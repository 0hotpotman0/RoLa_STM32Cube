
I2C_WakeUpFromStop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cb8  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08003df0  08003df0  00013df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e98  08003e98  000200f8  2**0
                  CONTENTS
  4 .ARM          00000000  08003e98  08003e98  000200f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e98  08003e98  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003e98  08003e98  00013e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08003ea0  08003ea0  00013ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  08003ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  200000f8  08003fa0  000200f8  2**2
                  ALLOC
 10 RAM1_region   00000000  20000240  20000240  000200f8  2**0
                  CONTENTS
 11 RAM2_region   00000000  20008000  20008000  000200f8  2**0
                  CONTENTS
 12 ._user_heap_stack 00000600  20000240  20000240  00020240  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 14 .debug_line   0000f6a4  00000000  00000000  00020122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0000f154  00000000  00000000  0002f7c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000248f  00000000  00000000  0003e91a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001090  00000000  00000000  00040db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a941b  00000000  00000000  00041e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00000f88  00000000  00000000  000eb260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001b4c9  00000000  00000000  000ec1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  001076b1  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000043d8  00000000  00000000  00107704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	200000f8 	.word	0x200000f8
 8000154:	00000000 	.word	0x00000000
 8000158:	08003dd4 	.word	0x08003dd4

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	200000fc 	.word	0x200000fc
 8000174:	08003dd4 	.word	0x08003dd4

08000178 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000178:	480d      	ldr	r0, [pc, #52]	; (80001b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800017a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800017c:	f000 fb1a 	bl	80007b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000180:	480c      	ldr	r0, [pc, #48]	; (80001b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000182:	490d      	ldr	r1, [pc, #52]	; (80001b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000184:	4a0d      	ldr	r2, [pc, #52]	; (80001bc <LoopForever+0xe>)
  movs r3, #0
 8000186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000188:	e002      	b.n	8000190 <LoopCopyDataInit>

0800018a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800018a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800018c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800018e:	3304      	adds	r3, #4

08000190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000194:	d3f9      	bcc.n	800018a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000196:	4a0a      	ldr	r2, [pc, #40]	; (80001c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000198:	4c0a      	ldr	r4, [pc, #40]	; (80001c4 <LoopForever+0x16>)
  movs r3, #0
 800019a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800019c:	e001      	b.n	80001a2 <LoopFillZerobss>

0800019e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800019e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001a0:	3204      	adds	r2, #4

080001a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001a4:	d3fb      	bcc.n	800019e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001a6:	f003 fde9 	bl	8003d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001aa:	f000 f839 	bl	8000220 <main>

080001ae <LoopForever>:

LoopForever:
    b LoopForever
 80001ae:	e7fe      	b.n	80001ae <LoopForever>
  ldr   r0, =_estack
 80001b0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80001b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001b8:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 80001bc:	08003ea8 	.word	0x08003ea8
  ldr r2, =_sbss
 80001c0:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 80001c4:	20000240 	.word	0x20000240

080001c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001c8:	e7fe      	b.n	80001c8 <ADC_IRQHandler>

080001ca <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80001ca:	b480      	push	{r7}
 80001cc:	b083      	sub	sp, #12
 80001ce:	af00      	add	r7, sp, #0
 80001d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80001d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001d6:	689b      	ldr	r3, [r3, #8]
 80001d8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80001dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4313      	orrs	r3, r2
 80001e4:	608b      	str	r3, [r1, #8]
}
 80001e6:	bf00      	nop
 80001e8:	370c      	adds	r7, #12
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr

080001f0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	4313      	orrs	r3, r2
 8000206:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800020c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	4013      	ands	r3, r2
 8000212:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000214:	68fb      	ldr	r3, [r7, #12]
}
 8000216:	bf00      	nop
 8000218:	3714      	adds	r7, #20
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 facc 	bl	80007c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f860 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8f2 	bl	8000414 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000230:	f000 f8ac 	bl	800038c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* Configure LED2, LED3 and LED1 */
  BSP_LED_Init(LED2);
 8000234:	2001      	movs	r0, #1
 8000236:	f000 fa4f 	bl	80006d8 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 800023a:	2002      	movs	r0, #2
 800023c:	f000 fa4c 	bl	80006d8 <BSP_LED_Init>
  BSP_LED_Init(LED1);
 8000240:	2000      	movs	r0, #0
 8000242:	f000 fa49 	bl	80006d8 <BSP_LED_Init>
  }
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);

#else
  /*## Unmask wakeup with Interrupt request from I2C1 */
  EXTI23_Enable_IT();
 8000246:	f000 f935 	bl	80004b4 <EXTI23_Enable_IT>
  /*##- Enable I2C peripheral in wake up from stop mode ###################*/
  HAL_I2CEx_EnableWakeUp(&hi2c1);
 800024a:	4825      	ldr	r0, [pc, #148]	; (80002e0 <main+0xc0>)
 800024c:	f002 f9c8 	bl	80025e0 <HAL_I2CEx_EnableWakeUp>

  /*##- Put I2C peripheral in reception process ###########################*/
  if(HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t *)aRxBuffer, RXBUFFERSIZE) != HAL_OK)
 8000250:	22d8      	movs	r2, #216	; 0xd8
 8000252:	4924      	ldr	r1, [pc, #144]	; (80002e4 <main+0xc4>)
 8000254:	4822      	ldr	r0, [pc, #136]	; (80002e0 <main+0xc0>)
 8000256:	f000 ffc5 	bl	80011e4 <HAL_I2C_Slave_Receive_IT>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <main+0x44>
  {
    /* Transfer error in reception process */
    Error_Handler();
 8000260:	f000 f95d 	bl	800051e <Error_Handler>
  }

  /* enter stop mode */
  /* Turn LED1 on */
  BSP_LED_On(LED1);
 8000264:	2000      	movs	r0, #0
 8000266:	f000 fa71 	bl	800074c <BSP_LED_On>

  /* Configure the WakeUp clock source */
  /* Configure the WakeUp clock source */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_HSI);
 800026a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800026e:	f7ff ffac 	bl	80001ca <LL_RCC_SetClkAfterWakeFromStop>

  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000272:	2101      	movs	r1, #1
 8000274:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000278:	f002 fa14 	bl	80026a4 <HAL_PWR_EnterSTOPMode>

  /* ... STOP mode ... */

  /* Wake Up from Stop mode */
  /* Turn LED1 off */
  BSP_LED_Off(LED1);
 800027c:	2000      	movs	r0, #0
 800027e:	f000 fa7f 	bl	8000780 <BSP_LED_Off>
      state of the peripheral; if it's busy you need to wait for the end of current
      transfer before starting a new one.
      For simplicity reasons, this example is just waiting till the end of the
      transfer, but application may perform other tasks while transfer operation
      is ongoing. */
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 8000282:	bf00      	nop
 8000284:	4816      	ldr	r0, [pc, #88]	; (80002e0 <main+0xc0>)
 8000286:	f001 f8bb 	bl	8001400 <HAL_I2C_GetState>
 800028a:	4603      	mov	r3, r0
 800028c:	2b20      	cmp	r3, #32
 800028e:	d1f9      	bne.n	8000284 <main+0x64>
  }

  /*##- Start the transmission process #####################################*/
  /* While the I2C in reception process, user can transmit data through
     "aTxBuffer" buffer */
  if(HAL_I2C_Slave_Transmit_IT(&hi2c1, (uint8_t*)aTxBuffer, TXBUFFERSIZE)!= HAL_OK)
 8000290:	22d8      	movs	r2, #216	; 0xd8
 8000292:	4915      	ldr	r1, [pc, #84]	; (80002e8 <main+0xc8>)
 8000294:	4812      	ldr	r0, [pc, #72]	; (80002e0 <main+0xc0>)
 8000296:	f000 ff55 	bl	8001144 <HAL_I2C_Slave_Transmit_IT>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <main+0x84>
  {
    /* Transfer error in transmission process */
    Error_Handler();
 80002a0:	f000 f93d 	bl	800051e <Error_Handler>
  }

  /* enter stop mode */
  /* Turn LED1 on */
  BSP_LED_On(LED1);
 80002a4:	2000      	movs	r0, #0
 80002a6:	f000 fa51 	bl	800074c <BSP_LED_On>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80002aa:	2101      	movs	r1, #1
 80002ac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80002b0:	f002 f9f8 	bl	80026a4 <HAL_PWR_EnterSTOPMode>
  /* ... STOP mode ... */


  /* Wake Up from Stop mode */
  /* Turn LED1 off */
  BSP_LED_Off(LED1);
 80002b4:	2000      	movs	r0, #0
 80002b6:	f000 fa63 	bl	8000780 <BSP_LED_Off>
      state of the peripheral; if it's busy you need to wait for the end of current
      transfer before starting a new one.
      For simplicity reasons, this example is just waiting till the end of the
      transfer, but application may perform other tasks while transfer operation
      is ongoing. */
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 80002ba:	bf00      	nop
 80002bc:	4808      	ldr	r0, [pc, #32]	; (80002e0 <main+0xc0>)
 80002be:	f001 f89f 	bl	8001400 <HAL_I2C_GetState>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b20      	cmp	r3, #32
 80002c6:	d1f9      	bne.n	80002bc <main+0x9c>
  {
  }

  /*##- Compare the sent and received buffers ##############################*/
  if(Buffercmp((uint8_t*)aTxBuffer,(uint8_t*)aRxBuffer,RXBUFFERSIZE))
 80002c8:	22d8      	movs	r2, #216	; 0xd8
 80002ca:	4906      	ldr	r1, [pc, #24]	; (80002e4 <main+0xc4>)
 80002cc:	4806      	ldr	r0, [pc, #24]	; (80002e8 <main+0xc8>)
 80002ce:	f000 f905 	bl	80004dc <Buffercmp>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <main+0xbc>
  {
    /* Processing Error */
    Error_Handler();
 80002d8:	f000 f921 	bl	800051e <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002dc:	e7fe      	b.n	80002dc <main+0xbc>
 80002de:	bf00      	nop
 80002e0:	20000114 	.word	0x20000114
 80002e4:	20000160 	.word	0x20000160
 80002e8:	20000000 	.word	0x20000000

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b09a      	sub	sp, #104	; 0x68
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0320 	add.w	r3, r7, #32
 80002f6:	2248      	movs	r2, #72	; 0x48
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f003 fd62 	bl	8003dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]
 800030e:	615a      	str	r2, [r3, #20]
 8000310:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000312:	4b1d      	ldr	r3, [pc, #116]	; (8000388 <SystemClock_Config+0x9c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800031a:	4a1b      	ldr	r2, [pc, #108]	; (8000388 <SystemClock_Config+0x9c>)
 800031c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000320:	6013      	str	r3, [r2, #0]
 8000322:	4b19      	ldr	r3, [pc, #100]	; (8000388 <SystemClock_Config+0x9c>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800032a:	603b      	str	r3, [r7, #0]
 800032c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800032e:	2302      	movs	r3, #2
 8000330:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000332:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000336:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000338:	2340      	movs	r3, #64	; 0x40
 800033a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800033c:	2300      	movs	r3, #0
 800033e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000340:	f107 0320 	add.w	r3, r7, #32
 8000344:	4618      	mov	r0, r3
 8000346:	f002 fcc5 	bl	8002cd4 <HAL_RCC_OscConfig>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000350:	f000 f8e5 	bl	800051e <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000354:	234f      	movs	r3, #79	; 0x4f
 8000356:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000358:	2301      	movs	r3, #1
 800035a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2100      	movs	r1, #0
 8000370:	4618      	mov	r0, r3
 8000372:	f003 f849 	bl	8003408 <HAL_RCC_ClockConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800037c:	f000 f8cf 	bl	800051e <Error_Handler>
  }
}
 8000380:	bf00      	nop
 8000382:	3768      	adds	r7, #104	; 0x68
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	58000400 	.word	0x58000400

0800038c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000390:	4b1d      	ldr	r3, [pc, #116]	; (8000408 <MX_I2C1_Init+0x7c>)
 8000392:	4a1e      	ldr	r2, [pc, #120]	; (800040c <MX_I2C1_Init+0x80>)
 8000394:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100107;
 8000396:	4b1c      	ldr	r3, [pc, #112]	; (8000408 <MX_I2C1_Init+0x7c>)
 8000398:	4a1d      	ldr	r2, [pc, #116]	; (8000410 <MX_I2C1_Init+0x84>)
 800039a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = I2C_ADDRESS;
 800039c:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <MX_I2C1_Init+0x7c>)
 800039e:	22ca      	movs	r2, #202	; 0xca
 80003a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003a2:	4b19      	ldr	r3, [pc, #100]	; (8000408 <MX_I2C1_Init+0x7c>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003a8:	4b17      	ldr	r3, [pc, #92]	; (8000408 <MX_I2C1_Init+0x7c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003ae:	4b16      	ldr	r3, [pc, #88]	; (8000408 <MX_I2C1_Init+0x7c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003b4:	4b14      	ldr	r3, [pc, #80]	; (8000408 <MX_I2C1_Init+0x7c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ba:	4b13      	ldr	r3, [pc, #76]	; (8000408 <MX_I2C1_Init+0x7c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c0:	4b11      	ldr	r3, [pc, #68]	; (8000408 <MX_I2C1_Init+0x7c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003c6:	4810      	ldr	r0, [pc, #64]	; (8000408 <MX_I2C1_Init+0x7c>)
 80003c8:	f000 fe2d 	bl	8001026 <HAL_I2C_Init>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003d2:	f000 f8a4 	bl	800051e <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003d6:	2100      	movs	r1, #0
 80003d8:	480b      	ldr	r0, [pc, #44]	; (8000408 <MX_I2C1_Init+0x7c>)
 80003da:	f002 f86c 	bl	80024b6 <HAL_I2CEx_ConfigAnalogFilter>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003e4:	f000 f89b 	bl	800051e <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003e8:	2100      	movs	r1, #0
 80003ea:	4807      	ldr	r0, [pc, #28]	; (8000408 <MX_I2C1_Init+0x7c>)
 80003ec:	f002 f8ad 	bl	800254a <HAL_I2CEx_ConfigDigitalFilter>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003f6:	f000 f892 	bl	800051e <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80003fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80003fe:	f002 f931 	bl	8002664 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	20000114 	.word	0x20000114
 800040c:	40005400 	.word	0x40005400
 8000410:	00100107 	.word	0x00100107

08000414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000418:	2002      	movs	r0, #2
 800041a:	f7ff fee9 	bl	80001f0 <LL_AHB2_GRP1_EnableClock>

}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}

08000422 <HAL_I2C_SlaveTxCpltCallback>:
  /* Toggle LED2: Transfer in transmission process is correct */
  BSP_LED_Toggle(LED2);
}
#else
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000422:	b580      	push	{r7, lr}
 8000424:	b082      	sub	sp, #8
 8000426:	af00      	add	r7, sp, #0
 8000428:	6078      	str	r0, [r7, #4]
  /* Restore config: clock, GPIO... */
  SystemClock_Config();
 800042a:	f7ff ff5f 	bl	80002ec <SystemClock_Config>

  /* Restore GPIO configuration */
  BSP_LED_Init(LED2);
 800042e:	2001      	movs	r0, #1
 8000430:	f000 f952 	bl	80006d8 <BSP_LED_Init>
  BSP_LED_Init(LED1);
 8000434:	2000      	movs	r0, #0
 8000436:	f000 f94f 	bl	80006d8 <BSP_LED_Init>

  /* Wake Up from Stop Mode */
  /* Turn LED1 off */
  BSP_LED_Off(LED1);
 800043a:	2000      	movs	r0, #0
 800043c:	f000 f9a0 	bl	8000780 <BSP_LED_Off>
  /* Turn off LED2: Transfer in transmission process is correct */
  BSP_LED_Off(LED2);
 8000440:	2001      	movs	r0, #1
 8000442:	f000 f99d 	bl	8000780 <BSP_LED_Off>
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <HAL_I2C_SlaveRxCpltCallback>:
  /* Toggle LED2: Transfer in reception process is correct */
  BSP_LED_Toggle(LED2);
}
#else
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	b082      	sub	sp, #8
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
  /* Restore config: clock, GPIO... */
  SystemClock_Config();
 8000456:	f7ff ff49 	bl	80002ec <SystemClock_Config>

  /* Restore GPIO configuration */
  BSP_LED_Init(LED2);
 800045a:	2001      	movs	r0, #1
 800045c:	f000 f93c 	bl	80006d8 <BSP_LED_Init>
  BSP_LED_Init(LED1);
 8000460:	2000      	movs	r0, #0
 8000462:	f000 f939 	bl	80006d8 <BSP_LED_Init>

  /* Wake Up from Stop Mode */
  /* Turn LED1 off */
  BSP_LED_Off(LED1);
 8000466:	2000      	movs	r0, #0
 8000468:	f000 f98a 	bl	8000780 <BSP_LED_Off>

  /* Turn On LED2: Transfer in reception process is correct */
  BSP_LED_On(LED2);
 800046c:	2001      	movs	r0, #1
 800046e:	f000 f96d 	bl	800074c <BSP_LED_On>
}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}

0800047a <HAL_I2C_ErrorCallback>:
  /* Turn LED3 on: Transfer error in reception/transmission process */
  BSP_LED_On(LED3); 
}
#else
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 800047a:	b580      	push	{r7, lr}
 800047c:	b082      	sub	sp, #8
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
  /* Restore config: clock, GPIO... */
  SystemClock_Config();
 8000482:	f7ff ff33 	bl	80002ec <SystemClock_Config>

  /** Error_Handler() function is called when error occurs.
    * 1- When Slave don't acknowledge it's address, Master restarts communication.
    * 2- When Master don't acknowledge the last data transferred, Slave don't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 8000486:	6878      	ldr	r0, [r7, #4]
 8000488:	f000 ffc7 	bl	800141a <HAL_I2C_GetError>
 800048c:	4603      	mov	r3, r0
 800048e:	2b04      	cmp	r3, #4
 8000490:	d00b      	beq.n	80004aa <HAL_I2C_ErrorCallback+0x30>
  {
    /* Restore GPIO configuration */
    BSP_LED_Init(LED2);
 8000492:	2001      	movs	r0, #1
 8000494:	f000 f920 	bl	80006d8 <BSP_LED_Init>
    BSP_LED_Init(LED3);
 8000498:	2002      	movs	r0, #2
 800049a:	f000 f91d 	bl	80006d8 <BSP_LED_Init>

    /* Turn Off LED2 */
    BSP_LED_Off(LED2);
 800049e:	2001      	movs	r0, #1
 80004a0:	f000 f96e 	bl	8000780 <BSP_LED_Off>

    /* Turn On LED3 */
    BSP_LED_On(LED3);
 80004a4:	2002      	movs	r0, #2
 80004a6:	f000 f951 	bl	800074c <BSP_LED_On>
  }
}
 80004aa:	bf00      	nop
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <EXTI23_Enable_IT>:
#endif /* MASTER_BOARD */
#ifndef MASTER_BOARD
static void EXTI23_Enable_IT(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
  EXTI_HandleTypeDef hexti;
  EXTI_ConfigTypeDef exticonfig;  
  exticonfig.Line = EXTI_LINE_23;
 80004ba:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <EXTI23_Enable_IT+0x24>)
 80004bc:	603b      	str	r3, [r7, #0]
  exticonfig.Mode = EXTI_MODE_INTERRUPT;  
 80004be:	2301      	movs	r3, #1
 80004c0:	607b      	str	r3, [r7, #4]
  HAL_EXTI_SetConfigLine(&hexti,&exticonfig);
 80004c2:	463a      	mov	r2, r7
 80004c4:	f107 0310 	add.w	r3, r7, #16
 80004c8:	4611      	mov	r1, r2
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 fb66 	bl	8000b9c <HAL_EXTI_SetConfigLine>
}
 80004d0:	bf00      	nop
 80004d2:	3718      	adds	r7, #24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	01000017 	.word	0x01000017

080004dc <Buffercmp>:
  * @param  BufferLength: buffer's length
  * @retval 0  : pBuffer1 identical to pBuffer2
  *         >0 : pBuffer1 differs from pBuffer2
  */
static uint16_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	4613      	mov	r3, r2
 80004e8:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 80004ea:	e00d      	b.n	8000508 <Buffercmp+0x2c>
  {
    if ((*pBuffer1) != *pBuffer2)
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	781a      	ldrb	r2, [r3, #0]
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d001      	beq.n	80004fc <Buffercmp+0x20>
    {
      return BufferLength;
 80004f8:	88fb      	ldrh	r3, [r7, #6]
 80004fa:	e00b      	b.n	8000514 <Buffercmp+0x38>
    }
    pBuffer1++;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	3301      	adds	r3, #1
 8000500:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	3301      	adds	r3, #1
 8000506:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 8000508:	88fb      	ldrh	r3, [r7, #6]
 800050a:	1e5a      	subs	r2, r3, #1
 800050c:	80fa      	strh	r2, [r7, #6]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d1ec      	bne.n	80004ec <Buffercmp+0x10>
  }

  return 0;
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr

0800051e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* Turn LED3 on */
  BSP_LED_On(LED3);
 8000522:	2002      	movs	r0, #2
 8000524:	f000 f912 	bl	800074c <BSP_LED_On>
  while(1)
 8000528:	e7fe      	b.n	8000528 <Error_Handler+0xa>

0800052a <LL_AHB2_GRP1_EnableClock>:
{
 800052a:	b480      	push	{r7}
 800052c:	b085      	sub	sp, #20
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000536:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000538:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	4313      	orrs	r3, r2
 8000540:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4013      	ands	r3, r2
 800054c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800054e:	68fb      	ldr	r3, [r7, #12]
}
 8000550:	bf00      	nop
 8000552:	3714      	adds	r7, #20
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800055a:	b480      	push	{r7}
 800055c:	b085      	sub	sp, #20
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000566:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000568:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4313      	orrs	r3, r2
 8000570:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000576:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4013      	ands	r3, r2
 800057c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800057e:	68fb      	ldr	r3, [r7, #12]
}
 8000580:	bf00      	nop
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr

0800058a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr
	...

08000598 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b096      	sub	sp, #88	; 0x58
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	2238      	movs	r2, #56	; 0x38
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f003 fc03 	bl	8003dc4 <memset>
  if(hi2c->Instance==I2C1)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a1e      	ldr	r2, [pc, #120]	; (800063c <HAL_I2C_MspInit+0xa4>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d135      	bne.n	8000634 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80005c8:	2340      	movs	r3, #64	; 0x40
 80005ca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80005cc:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <HAL_I2C_MspInit+0xa8>)
 80005ce:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	4618      	mov	r0, r3
 80005d6:	f003 fab7 	bl	8003b48 <HAL_RCCEx_PeriphCLKConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80005e0:	f7ff ff9d 	bl	800051e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e4:	2002      	movs	r0, #2
 80005e6:	f7ff ffa0 	bl	800052a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80005ea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80005ee:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005f0:	2312      	movs	r3, #18
 80005f2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005f4:	2301      	movs	r3, #1
 80005f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f8:	2300      	movs	r3, #0
 80005fa:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005fc:	2304      	movs	r3, #4
 80005fe:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000600:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000604:	4619      	mov	r1, r3
 8000606:	480f      	ldr	r0, [pc, #60]	; (8000644 <HAL_I2C_MspInit+0xac>)
 8000608:	f000 fb96 	bl	8000d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800060c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000610:	f7ff ffa3 	bl	800055a <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2100      	movs	r1, #0
 8000618:	201e      	movs	r0, #30
 800061a:	f000 fa1e 	bl	8000a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800061e:	201e      	movs	r0, #30
 8000620:	f000 fa35 	bl	8000a8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000624:	2200      	movs	r2, #0
 8000626:	2100      	movs	r1, #0
 8000628:	201f      	movs	r0, #31
 800062a:	f000 fa16 	bl	8000a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800062e:	201f      	movs	r0, #31
 8000630:	f000 fa2d 	bl	8000a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000634:	bf00      	nop
 8000636:	3758      	adds	r7, #88	; 0x58
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40005400 	.word	0x40005400
 8000640:	00030200 	.word	0x00030200
 8000644:	48000400 	.word	0x48000400

08000648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr

08000654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <HardFault_Handler+0x4>

0800065a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr

08000666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr

08000672 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000676:	f000 f8fd 	bl	8000874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event Interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000684:	4802      	ldr	r0, [pc, #8]	; (8000690 <I2C1_EV_IRQHandler+0x10>)
 8000686:	f000 fdfd 	bl	8001284 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000114 	.word	0x20000114

08000694 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 Error Interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000698:	4802      	ldr	r0, [pc, #8]	; (80006a4 <I2C1_ER_IRQHandler+0x10>)
 800069a:	f000 fe0d 	bl	80012b8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000114 	.word	0x20000114

080006a8 <LL_AHB2_GRP1_EnableClock>:
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4313      	orrs	r3, r2
 80006be:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4013      	ands	r3, r2
 80006ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006cc:	68fb      	ldr	r3, [r7, #12]
}
 80006ce:	bf00      	nop
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr

080006d8 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80006f2:	2002      	movs	r0, #2
 80006f4:	f7ff ffd8 	bl	80006a8 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <BSP_LED_Init+0x6c>)
 80006fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000700:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	2301      	movs	r3, #1
 8000704:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800070a:	2302      	movs	r3, #2
 800070c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	4a0d      	ldr	r2, [pc, #52]	; (8000748 <BSP_LED_Init+0x70>)
 8000712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000716:	f107 020c 	add.w	r2, r7, #12
 800071a:	4611      	mov	r1, r2
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fb0b 	bl	8000d38 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	4a08      	ldr	r2, [pc, #32]	; (8000748 <BSP_LED_Init+0x70>)
 8000726:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	4a05      	ldr	r2, [pc, #20]	; (8000744 <BSP_LED_Init+0x6c>)
 800072e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000732:	2200      	movs	r2, #0
 8000734:	4619      	mov	r1, r3
 8000736:	f000 fc5f 	bl	8000ff8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800073a:	2300      	movs	r3, #0
}
 800073c:	4618      	mov	r0, r3
 800073e:	3720      	adds	r7, #32
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	08003e0c 	.word	0x08003e0c
 8000748:	200000dc 	.word	0x200000dc

0800074c <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	4a07      	ldr	r2, [pc, #28]	; (8000778 <BSP_LED_On+0x2c>)
 800075a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	4a06      	ldr	r2, [pc, #24]	; (800077c <BSP_LED_On+0x30>)
 8000762:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000766:	2201      	movs	r2, #1
 8000768:	4619      	mov	r1, r3
 800076a:	f000 fc45 	bl	8000ff8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800076e:	2300      	movs	r3, #0
}
 8000770:	4618      	mov	r0, r3
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200000dc 	.word	0x200000dc
 800077c:	08003e0c 	.word	0x08003e0c

08000780 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <BSP_LED_Off+0x2c>)
 800078e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	4a06      	ldr	r2, [pc, #24]	; (80007b0 <BSP_LED_Off+0x30>)
 8000796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800079a:	2200      	movs	r2, #0
 800079c:	4619      	mov	r1, r3
 800079e:	f000 fc2b 	bl	8000ff8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80007a2:	2300      	movs	r3, #0
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200000dc 	.word	0x200000dc
 80007b0:	08003e0c 	.word	0x08003e0c

080007b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007c6:	2300      	movs	r3, #0
 80007c8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ca:	2003      	movs	r0, #3
 80007cc:	f000 f93a 	bl	8000a44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80007d0:	f002 fffc 	bl	80037cc <HAL_RCC_GetHCLKFreq>
 80007d4:	4603      	mov	r3, r0
 80007d6:	4a09      	ldr	r2, [pc, #36]	; (80007fc <HAL_Init+0x3c>)
 80007d8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007da:	200f      	movs	r0, #15
 80007dc:	f000 f810 	bl	8000800 <HAL_InitTick>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d002      	beq.n	80007ec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
 80007e8:	71fb      	strb	r3, [r7, #7]
 80007ea:	e001      	b.n	80007f0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007ec:	f7ff fecd 	bl	800058a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007f0:	79fb      	ldrb	r3, [r7, #7]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200000e8 	.word	0x200000e8

08000800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000808:	2300      	movs	r3, #0
 800080a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <HAL_InitTick+0x6c>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d024      	beq.n	800085e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000814:	f002 ffda 	bl	80037cc <HAL_RCC_GetHCLKFreq>
 8000818:	4602      	mov	r2, r0
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <HAL_InitTick+0x6c>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	4619      	mov	r1, r3
 8000820:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000824:	fbb3 f3f1 	udiv	r3, r3, r1
 8000828:	fbb2 f3f3 	udiv	r3, r2, r3
 800082c:	4618      	mov	r0, r3
 800082e:	f000 f93c 	bl	8000aaa <HAL_SYSTICK_Config>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d10f      	bne.n	8000858 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b0f      	cmp	r3, #15
 800083c:	d809      	bhi.n	8000852 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800083e:	2200      	movs	r2, #0
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	f04f 30ff 	mov.w	r0, #4294967295
 8000846:	f000 f908 	bl	8000a5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800084a:	4a09      	ldr	r2, [pc, #36]	; (8000870 <HAL_InitTick+0x70>)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	e007      	b.n	8000862 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	73fb      	strb	r3, [r7, #15]
 8000856:	e004      	b.n	8000862 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000858:	2301      	movs	r3, #1
 800085a:	73fb      	strb	r3, [r7, #15]
 800085c:	e001      	b.n	8000862 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800085e:	2301      	movs	r3, #1
 8000860:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000862:	7bfb      	ldrb	r3, [r7, #15]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200000f0 	.word	0x200000f0
 8000870:	200000ec 	.word	0x200000ec

08000874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_IncTick+0x1c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	461a      	mov	r2, r3
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <HAL_IncTick+0x20>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4413      	add	r3, r2
 8000884:	4a03      	ldr	r2, [pc, #12]	; (8000894 <HAL_IncTick+0x20>)
 8000886:	6013      	str	r3, [r2, #0]
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	200000f0 	.word	0x200000f0
 8000894:	20000238 	.word	0x20000238

08000898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return uwTick;
 800089c:	4b02      	ldr	r3, [pc, #8]	; (80008a8 <HAL_GetTick+0x10>)
 800089e:	681b      	ldr	r3, [r3, #0]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	20000238 	.word	0x20000238

080008ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f003 0307 	and.w	r3, r3, #7
 80008ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <__NVIC_SetPriorityGrouping+0x44>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008c8:	4013      	ands	r3, r2
 80008ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008de:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <__NVIC_SetPriorityGrouping+0x44>)
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	60d3      	str	r3, [r2, #12]
}
 80008e4:	bf00      	nop
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f8:	4b04      	ldr	r3, [pc, #16]	; (800090c <__NVIC_GetPriorityGrouping+0x18>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	0a1b      	lsrs	r3, r3, #8
 80008fe:	f003 0307 	and.w	r3, r3, #7
}
 8000902:	4618      	mov	r0, r3
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091e:	2b00      	cmp	r3, #0
 8000920:	db0b      	blt.n	800093a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	f003 021f 	and.w	r2, r3, #31
 8000928:	4906      	ldr	r1, [pc, #24]	; (8000944 <__NVIC_EnableIRQ+0x34>)
 800092a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092e:	095b      	lsrs	r3, r3, #5
 8000930:	2001      	movs	r0, #1
 8000932:	fa00 f202 	lsl.w	r2, r0, r2
 8000936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	e000e100 	.word	0xe000e100

08000948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000958:	2b00      	cmp	r3, #0
 800095a:	db0a      	blt.n	8000972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	b2da      	uxtb	r2, r3
 8000960:	490c      	ldr	r1, [pc, #48]	; (8000994 <__NVIC_SetPriority+0x4c>)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	0112      	lsls	r2, r2, #4
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	440b      	add	r3, r1
 800096c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000970:	e00a      	b.n	8000988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4908      	ldr	r1, [pc, #32]	; (8000998 <__NVIC_SetPriority+0x50>)
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	f003 030f 	and.w	r3, r3, #15
 800097e:	3b04      	subs	r3, #4
 8000980:	0112      	lsls	r2, r2, #4
 8000982:	b2d2      	uxtb	r2, r2
 8000984:	440b      	add	r3, r1
 8000986:	761a      	strb	r2, [r3, #24]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000e100 	.word	0xe000e100
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800099c:	b480      	push	{r7}
 800099e:	b089      	sub	sp, #36	; 0x24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	f1c3 0307 	rsb	r3, r3, #7
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	bf28      	it	cs
 80009ba:	2304      	movcs	r3, #4
 80009bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3304      	adds	r3, #4
 80009c2:	2b06      	cmp	r3, #6
 80009c4:	d902      	bls.n	80009cc <NVIC_EncodePriority+0x30>
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3b03      	subs	r3, #3
 80009ca:	e000      	b.n	80009ce <NVIC_EncodePriority+0x32>
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	f04f 32ff 	mov.w	r2, #4294967295
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43da      	mvns	r2, r3
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	401a      	ands	r2, r3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e4:	f04f 31ff 	mov.w	r1, #4294967295
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa01 f303 	lsl.w	r3, r1, r3
 80009ee:	43d9      	mvns	r1, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	4313      	orrs	r3, r2
         );
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3724      	adds	r7, #36	; 0x24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr

08000a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a10:	d301      	bcc.n	8000a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a12:	2301      	movs	r3, #1
 8000a14:	e00f      	b.n	8000a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <SysTick_Config+0x40>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a1e:	210f      	movs	r1, #15
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295
 8000a24:	f7ff ff90 	bl	8000948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <SysTick_Config+0x40>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2e:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <SysTick_Config+0x40>)
 8000a30:	2207      	movs	r2, #7
 8000a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	e000e010 	.word	0xe000e010

08000a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff ff2d 	bl	80008ac <__NVIC_SetPriorityGrouping>
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b086      	sub	sp, #24
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	4603      	mov	r3, r0
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
 8000a66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a68:	f7ff ff44 	bl	80008f4 <__NVIC_GetPriorityGrouping>
 8000a6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	68b9      	ldr	r1, [r7, #8]
 8000a72:	6978      	ldr	r0, [r7, #20]
 8000a74:	f7ff ff92 	bl	800099c <NVIC_EncodePriority>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ff61 	bl	8000948 <__NVIC_SetPriority>
}
 8000a86:	bf00      	nop
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	4603      	mov	r3, r0
 8000a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff37 	bl	8000910 <__NVIC_EnableIRQ>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff ffa4 	bl	8000a00 <SysTick_Config>
 8000ab8:	4603      	mov	r3, r0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b084      	sub	sp, #16
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d005      	beq.n	8000ae6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2204      	movs	r2, #4
 8000ade:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	73fb      	strb	r3, [r7, #15]
 8000ae4:	e047      	b.n	8000b76 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f022 020e 	bic.w	r2, r2, #14
 8000af4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f022 0201 	bic.w	r2, r2, #1
 8000b04:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	f003 021c 	and.w	r2, r3, #28
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	2101      	movs	r1, #1
 8000b24:	fa01 f202 	lsl.w	r2, r1, r2
 8000b28:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000b32:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d00c      	beq.n	8000b56 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b4a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000b54:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2201      	movs	r2, #1
 8000b5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2200      	movs	r2, #0
 8000b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d003      	beq.n	8000b76 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	4798      	blx	r3
    }
  }
  return status;
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000b8e:	b2db      	uxtb	r3, r3
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
	...

08000b9c <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b089      	sub	sp, #36	; 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  uint32_t linepos;
  uint32_t maskline;
  uint32_t offset;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d002      	beq.n	8000bb2 <HAL_EXTI_SetConfigLine+0x16>
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d101      	bne.n	8000bb6 <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e0b9      	b.n	8000d2a <HAL_EXTI_SetConfigLine+0x18e>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	601a      	str	r2, [r3, #0]

  /* compute line register offset and line mask */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	0c1b      	lsrs	r3, r3, #16
 8000bc4:	f003 0301 	and.w	r3, r3, #1
 8000bc8:	61bb      	str	r3, [r7, #24]
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 031f 	and.w	r3, r3, #31
 8000bd2:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d064      	beq.n	8000cb4 <HAL_EXTI_SetConfigLine+0x118>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    regaddr = (&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	015b      	lsls	r3, r3, #5
 8000bee:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8000bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000bf6:	60fb      	str	r3, [r7, #12]
    regval = *regaddr;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	61fb      	str	r3, [r7, #28]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d004      	beq.n	8000c14 <HAL_EXTI_SetConfigLine+0x78>
    {
      regval |= maskline;
 8000c0a:	69fa      	ldr	r2, [r7, #28]
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	61fb      	str	r3, [r7, #28]
 8000c12:	e004      	b.n	8000c1e <HAL_EXTI_SetConfigLine+0x82>
    }
    else
    {
      regval &= ~maskline;
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	43db      	mvns	r3, r3
 8000c18:	69fa      	ldr	r2, [r7, #28]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	61fb      	str	r3, [r7, #28]
    }

    /* Store rising trigger mode */
    *regaddr = regval;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	69fa      	ldr	r2, [r7, #28]
 8000c22:	601a      	str	r2, [r3, #0]

    /* Configure falling trigger */
    regaddr = (&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	015b      	lsls	r3, r3, #5
 8000c28:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8000c2c:	f603 0304 	addw	r3, r3, #2052	; 0x804
 8000c30:	60fb      	str	r3, [r7, #12]
    regval = *regaddr;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	61fb      	str	r3, [r7, #28]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	f003 0302 	and.w	r3, r3, #2
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d004      	beq.n	8000c4e <HAL_EXTI_SetConfigLine+0xb2>
    {
      regval |= maskline;
 8000c44:	69fa      	ldr	r2, [r7, #28]
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	61fb      	str	r3, [r7, #28]
 8000c4c:	e004      	b.n	8000c58 <HAL_EXTI_SetConfigLine+0xbc>
    }
    else
    {
      regval &= ~maskline;
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	43db      	mvns	r3, r3
 8000c52:	69fa      	ldr	r2, [r7, #28]
 8000c54:	4013      	ands	r3, r2
 8000c56:	61fb      	str	r3, [r7, #28]
    }

    /* Store falling trigger mode */
    *regaddr = regval;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	69fa      	ldr	r2, [r7, #28]
 8000c5c:	601a      	str	r2, [r3, #0]

    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8000c66:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8000c6a:	d123      	bne.n	8000cb4 <HAL_EXTI_SetConfigLine+0x118>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8000c6c:	4a31      	ldr	r2, [pc, #196]	; (8000d34 <HAL_EXTI_SetConfigLine+0x198>)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	089b      	lsrs	r3, r3, #2
 8000c72:	3302      	adds	r3, #2
 8000c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c78:	61fb      	str	r3, [r7, #28]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	f003 0303 	and.w	r3, r3, #3
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	2207      	movs	r2, #7
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	69fa      	ldr	r2, [r7, #28]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	61fb      	str	r3, [r7, #28]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	68da      	ldr	r2, [r3, #12]
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	f003 0303 	and.w	r3, r3, #3
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	69fa      	ldr	r2, [r7, #28]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	61fb      	str	r3, [r7, #28]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8000ca6:	4923      	ldr	r1, [pc, #140]	; (8000d34 <HAL_EXTI_SetConfigLine+0x198>)
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	089b      	lsrs	r3, r3, #2
 8000cac:	3302      	adds	r3, #2
 8000cae:	69fa      	ldr	r2, [r7, #28]
 8000cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  /* Configure interrupt mode : read current mode */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  regaddr = (&EXTI->C2IMR1 + (EXTI_MODE_OFFSET * offset));
#else
  regaddr = (&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8000cbc:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 8000cc0:	60fb      	str	r3, [r7, #12]
#endif
  regval = *regaddr;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	61fb      	str	r3, [r7, #28]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d004      	beq.n	8000cde <HAL_EXTI_SetConfigLine+0x142>
  {
    regval |= maskline;
 8000cd4:	69fa      	ldr	r2, [r7, #28]
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	61fb      	str	r3, [r7, #28]
 8000cdc:	e004      	b.n	8000ce8 <HAL_EXTI_SetConfigLine+0x14c>
  }
  else
  {
    regval &= ~maskline;
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	69fa      	ldr	r2, [r7, #28]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61fb      	str	r3, [r7, #28]
  }

  /* Store interrupt mode */
  *regaddr = regval;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	69fa      	ldr	r2, [r7, #28]
 8000cec:	601a      	str	r2, [r3, #0]

  /* Configure event mode : read current mode */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  regaddr = (&EXTI->C2EMR1 + (EXTI_MODE_OFFSET * offset));
#else
  regaddr = (&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	011b      	lsls	r3, r3, #4
 8000cf2:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8000cf6:	f603 0384 	addw	r3, r3, #2180	; 0x884
 8000cfa:	60fb      	str	r3, [r7, #12]
#endif
  regval = *regaddr;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	61fb      	str	r3, [r7, #28]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d004      	beq.n	8000d18 <HAL_EXTI_SetConfigLine+0x17c>
  {
    /* The event mode cannot be configured if the line does not support it */
    assert_param(IS_EXTI_EVENT_PRESENT(pExtiConfig->Line));
    regval |= maskline;
 8000d0e:	69fa      	ldr	r2, [r7, #28]
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61fb      	str	r3, [r7, #28]
 8000d16:	e004      	b.n	8000d22 <HAL_EXTI_SetConfigLine+0x186>
  }
  else
  {
    regval &= ~maskline;
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	69fa      	ldr	r2, [r7, #28]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	61fb      	str	r3, [r7, #28]
  }

  /* Store event mode */
  *regaddr = regval;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	69fa      	ldr	r2, [r7, #28]
 8000d26:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	40010000 	.word	0x40010000

08000d38 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d46:	e140      	b.n	8000fca <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	4013      	ands	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f000 8132 	beq.w	8000fc4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d00b      	beq.n	8000d80 <HAL_GPIO_Init+0x48>
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d007      	beq.n	8000d80 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d74:	2b11      	cmp	r3, #17
 8000d76:	d003      	beq.n	8000d80 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2b12      	cmp	r3, #18
 8000d7e:	d130      	bne.n	8000de2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000db6:	2201      	movs	r2, #1
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	091b      	lsrs	r3, r3, #4
 8000dcc:	f003 0201 	and.w	r2, r3, #1
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	2203      	movs	r2, #3
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_Init+0xea>
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2b12      	cmp	r3, #18
 8000e20:	d123      	bne.n	8000e6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	08da      	lsrs	r2, r3, #3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3208      	adds	r2, #8
 8000e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	220f      	movs	r2, #15
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	691a      	ldr	r2, [r3, #16]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	f003 0307 	and.w	r3, r3, #7
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	08da      	lsrs	r2, r3, #3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3208      	adds	r2, #8
 8000e64:	6939      	ldr	r1, [r7, #16]
 8000e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0203 	and.w	r2, r3, #3
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f000 808c 	beq.w	8000fc4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000eac:	4a4e      	ldr	r2, [pc, #312]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	2207      	movs	r2, #7
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ed6:	d00d      	beq.n	8000ef4 <HAL_GPIO_Init+0x1bc>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a44      	ldr	r2, [pc, #272]	; (8000fec <HAL_GPIO_Init+0x2b4>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d007      	beq.n	8000ef0 <HAL_GPIO_Init+0x1b8>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a43      	ldr	r2, [pc, #268]	; (8000ff0 <HAL_GPIO_Init+0x2b8>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d101      	bne.n	8000eec <HAL_GPIO_Init+0x1b4>
 8000ee8:	2302      	movs	r3, #2
 8000eea:	e004      	b.n	8000ef6 <HAL_GPIO_Init+0x1be>
 8000eec:	2307      	movs	r3, #7
 8000eee:	e002      	b.n	8000ef6 <HAL_GPIO_Init+0x1be>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e000      	b.n	8000ef6 <HAL_GPIO_Init+0x1be>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	f002 0203 	and.w	r2, r2, #3
 8000efc:	0092      	lsls	r2, r2, #2
 8000efe:	4093      	lsls	r3, r2
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f06:	4938      	ldr	r1, [pc, #224]	; (8000fe8 <HAL_GPIO_Init+0x2b0>)
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000f14:	4b37      	ldr	r3, [pc, #220]	; (8000ff4 <HAL_GPIO_Init+0x2bc>)
 8000f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f1a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000f3a:	4a2e      	ldr	r2, [pc, #184]	; (8000ff4 <HAL_GPIO_Init+0x2bc>)
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000f42:	4b2c      	ldr	r3, [pc, #176]	; (8000ff4 <HAL_GPIO_Init+0x2bc>)
 8000f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f48:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000f68:	4a22      	ldr	r2, [pc, #136]	; (8000ff4 <HAL_GPIO_Init+0x2bc>)
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f70:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <HAL_GPIO_Init+0x2bc>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f94:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <HAL_GPIO_Init+0x2bc>)
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <HAL_GPIO_Init+0x2bc>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fbe:	4a0d      	ldr	r2, [pc, #52]	; (8000ff4 <HAL_GPIO_Init+0x2bc>)
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f47f aeb7 	bne.w	8000d48 <HAL_GPIO_Init+0x10>
  }
}
 8000fda:	bf00      	nop
 8000fdc:	bf00      	nop
 8000fde:	371c      	adds	r7, #28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40010000 	.word	0x40010000
 8000fec:	48000400 	.word	0x48000400
 8000ff0:	48000800 	.word	0x48000800
 8000ff4:	58000800 	.word	0x58000800

08000ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
 8001004:	4613      	mov	r3, r2
 8001006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001008:	787b      	ldrb	r3, [r7, #1]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800100e:	887a      	ldrh	r2, [r7, #2]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001014:	e002      	b.n	800101c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001016:	887a      	ldrh	r2, [r7, #2]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr

08001026 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d101      	bne.n	8001038 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e081      	b.n	800113c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d106      	bne.n	8001052 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff faa3 	bl	8000598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2224      	movs	r2, #36	; 0x24
 8001056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f022 0201 	bic.w	r2, r2, #1
 8001068:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001076:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001086:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d107      	bne.n	80010a0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	e006      	b.n	80010ae <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80010ac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d104      	bne.n	80010c0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010be:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	6812      	ldr	r2, [r2, #0]
 80010ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010d2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68da      	ldr	r2, [r3, #12]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010e2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	691a      	ldr	r2, [r3, #16]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	ea42 0103 	orr.w	r1, r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	021a      	lsls	r2, r3, #8
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	430a      	orrs	r2, r1
 80010fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69d9      	ldr	r1, [r3, #28]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a1a      	ldr	r2, [r3, #32]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f042 0201 	orr.w	r2, r2, #1
 800111c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2220      	movs	r2, #32
 8001128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2200      	movs	r2, #0
 8001130:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	4613      	mov	r3, r2
 8001150:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b20      	cmp	r3, #32
 800115c:	d139      	bne.n	80011d2 <HAL_I2C_Slave_Transmit_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001164:	2b01      	cmp	r3, #1
 8001166:	d101      	bne.n	800116c <HAL_I2C_Slave_Transmit_IT+0x28>
 8001168:	2302      	movs	r3, #2
 800116a:	e033      	b.n	80011d4 <HAL_I2C_Slave_Transmit_IT+0x90>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2201      	movs	r2, #1
 8001170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2221      	movs	r2, #33	; 0x21
 8001178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2220      	movs	r2, #32
 8001180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2200      	movs	r2, #0
 8001188:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001198:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	88fa      	ldrh	r2, [r7, #6]
 80011a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <HAL_I2C_Slave_Transmit_IT+0x98>)
 80011b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <HAL_I2C_Slave_Transmit_IT+0x9c>)
 80011ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80011c4:	f248 0101 	movw	r1, #32769	; 0x8001
 80011c8:	68f8      	ldr	r0, [r7, #12]
 80011ca:	f001 f8b5 	bl	8002338 <I2C_Enable_IRQ>

    return HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e000      	b.n	80011d4 <HAL_I2C_Slave_Transmit_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 80011d2:	2302      	movs	r3, #2
  }
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	ffff0000 	.word	0xffff0000
 80011e0:	08001431 	.word	0x08001431

080011e4 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	4613      	mov	r3, r2
 80011f0:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b20      	cmp	r3, #32
 80011fc:	d139      	bne.n	8001272 <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001204:	2b01      	cmp	r3, #1
 8001206:	d101      	bne.n	800120c <HAL_I2C_Slave_Receive_IT+0x28>
 8001208:	2302      	movs	r3, #2
 800120a:	e033      	b.n	8001274 <HAL_I2C_Slave_Receive_IT+0x90>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2201      	movs	r2, #1
 8001210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2222      	movs	r2, #34	; 0x22
 8001218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2220      	movs	r2, #32
 8001220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2200      	movs	r2, #0
 8001228:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001238:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	88fa      	ldrh	r2, [r7, #6]
 8001244:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800124a:	b29a      	uxth	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <HAL_I2C_Slave_Receive_IT+0x98>)
 8001254:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4a09      	ldr	r2, [pc, #36]	; (8001280 <HAL_I2C_Slave_Receive_IT+0x9c>)
 800125a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001264:	f248 0102 	movw	r1, #32770	; 0x8002
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f001 f865 	bl	8002338 <I2C_Enable_IRQ>

    return HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	e000      	b.n	8001274 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 8001272:	2302      	movs	r3, #2
  }
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	ffff0000 	.word	0xffff0000
 8001280:	08001431 	.word	0x08001431

08001284 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d005      	beq.n	80012b0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a8:	68ba      	ldr	r2, [r7, #8]
 80012aa:	68f9      	ldr	r1, [r7, #12]
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	4798      	blx	r3
  }
}
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	0a1b      	lsrs	r3, r3, #8
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d010      	beq.n	80012fe <HAL_I2C_ER_IRQHandler+0x46>
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	09db      	lsrs	r3, r3, #7
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00a      	beq.n	80012fe <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ec:	f043 0201 	orr.w	r2, r3, #1
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012fc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	0a9b      	lsrs	r3, r3, #10
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	d010      	beq.n	800132c <HAL_I2C_ER_IRQHandler+0x74>
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	09db      	lsrs	r3, r3, #7
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00a      	beq.n	800132c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f043 0208 	orr.w	r2, r3, #8
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800132a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	0a5b      	lsrs	r3, r3, #9
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b00      	cmp	r3, #0
 8001336:	d010      	beq.n	800135a <HAL_I2C_ER_IRQHandler+0xa2>
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	09db      	lsrs	r3, r3, #7
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00a      	beq.n	800135a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001348:	f043 0202 	orr.w	r2, r3, #2
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001358:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 030b 	and.w	r3, r3, #11
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800136a:	68f9      	ldr	r1, [r7, #12]
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 fe7f 	bl	8002070 <I2C_ITError>
  }
}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr

0800139e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
 80013a6:	460b      	mov	r3, r1
 80013a8:	70fb      	strb	r3, [r7, #3]
 80013aa:	4613      	mov	r3, r2
 80013ac:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr

080013b8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr

080013ca <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800140e:	b2db      	uxtb	r3, r3
}
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001440:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800144c:	2b01      	cmp	r3, #1
 800144e:	d101      	bne.n	8001454 <I2C_Slave_ISR_IT+0x24>
 8001450:	2302      	movs	r3, #2
 8001452:	e0ec      	b.n	800162e <I2C_Slave_ISR_IT+0x1fe>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	095b      	lsrs	r3, r3, #5
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b00      	cmp	r3, #0
 8001466:	d009      	beq.n	800147c <I2C_Slave_ISR_IT+0x4c>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	095b      	lsrs	r3, r3, #5
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001474:	6939      	ldr	r1, [r7, #16]
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	f000 fc9a 	bl	8001db0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	091b      	lsrs	r3, r3, #4
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b00      	cmp	r3, #0
 8001486:	d04d      	beq.n	8001524 <I2C_Slave_ISR_IT+0xf4>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	091b      	lsrs	r3, r3, #4
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	d047      	beq.n	8001524 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001498:	b29b      	uxth	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d128      	bne.n	80014f0 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b28      	cmp	r3, #40	; 0x28
 80014a8:	d108      	bne.n	80014bc <I2C_Slave_ISR_IT+0x8c>
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80014b0:	d104      	bne.n	80014bc <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80014b2:	6939      	ldr	r1, [r7, #16]
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f000 fd85 	bl	8001fc4 <I2C_ITListenCplt>
 80014ba:	e032      	b.n	8001522 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b29      	cmp	r3, #41	; 0x29
 80014c6:	d10e      	bne.n	80014e6 <I2C_Slave_ISR_IT+0xb6>
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80014ce:	d00a      	beq.n	80014e6 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2210      	movs	r2, #16
 80014d6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f000 fec0 	bl	800225e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f000 fb3d 	bl	8001b5e <I2C_ITSlaveSeqCplt>
 80014e4:	e01d      	b.n	8001522 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2210      	movs	r2, #16
 80014ec:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80014ee:	e096      	b.n	800161e <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2210      	movs	r2, #16
 80014f6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fc:	f043 0204 	orr.w	r2, r3, #4
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d004      	beq.n	8001514 <I2C_Slave_ISR_IT+0xe4>
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001510:	f040 8085 	bne.w	800161e <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001518:	4619      	mov	r1, r3
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 fda8 	bl	8002070 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001520:	e07d      	b.n	800161e <I2C_Slave_ISR_IT+0x1ee>
 8001522:	e07c      	b.n	800161e <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	089b      	lsrs	r3, r3, #2
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b00      	cmp	r3, #0
 800152e:	d030      	beq.n	8001592 <I2C_Slave_ISR_IT+0x162>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	d02a      	beq.n	8001592 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001540:	b29b      	uxth	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d018      	beq.n	8001578 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001562:	3b01      	subs	r3, #1
 8001564:	b29a      	uxth	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800156e:	b29b      	uxth	r3, r3
 8001570:	3b01      	subs	r3, #1
 8001572:	b29a      	uxth	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800157c:	b29b      	uxth	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d14f      	bne.n	8001622 <I2C_Slave_ISR_IT+0x1f2>
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001588:	d04b      	beq.n	8001622 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f000 fae7 	bl	8001b5e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001590:	e047      	b.n	8001622 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	08db      	lsrs	r3, r3, #3
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00a      	beq.n	80015b4 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	08db      	lsrs	r3, r3, #3
 80015a2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d004      	beq.n	80015b4 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80015aa:	6939      	ldr	r1, [r7, #16]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f000 fa15 	bl	80019dc <I2C_ITAddrCplt>
 80015b2:	e037      	b.n	8001624 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	085b      	lsrs	r3, r3, #1
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d031      	beq.n	8001624 <I2C_Slave_ISR_IT+0x1f4>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	085b      	lsrs	r3, r3, #1
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d02b      	beq.n	8001624 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d018      	beq.n	8001608 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	781a      	ldrb	r2, [r3, #0]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	3b01      	subs	r3, #1
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fe:	3b01      	subs	r3, #1
 8001600:	b29a      	uxth	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	851a      	strh	r2, [r3, #40]	; 0x28
 8001606:	e00d      	b.n	8001624 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800160e:	d002      	beq.n	8001616 <I2C_Slave_ISR_IT+0x1e6>
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d106      	bne.n	8001624 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f000 faa1 	bl	8001b5e <I2C_ITSlaveSeqCplt>
 800161c:	e002      	b.n	8001624 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800161e:	bf00      	nop
 8001620:	e000      	b.n	8001624 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8001622:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b088      	sub	sp, #32
 800163a:	af02      	add	r7, sp, #8
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001648:	2b01      	cmp	r3, #1
 800164a:	d101      	bne.n	8001650 <I2C_Master_ISR_DMA+0x1a>
 800164c:	2302      	movs	r3, #2
 800164e:	e0e1      	b.n	8001814 <I2C_Master_ISR_DMA+0x1de>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b00      	cmp	r3, #0
 8001662:	d017      	beq.n	8001694 <I2C_Master_ISR_DMA+0x5e>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	091b      	lsrs	r3, r3, #4
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d011      	beq.n	8001694 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2210      	movs	r2, #16
 8001676:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167c:	f043 0204 	orr.w	r2, r3, #4
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001684:	2120      	movs	r1, #32
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f000 fe56 	bl	8002338 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f000 fde6 	bl	800225e <I2C_Flush_TXDR>
 8001692:	e0ba      	b.n	800180a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	09db      	lsrs	r3, r3, #7
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	d072      	beq.n	8001786 <I2C_Master_ISR_DMA+0x150>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	099b      	lsrs	r3, r3, #6
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d06c      	beq.n	8001786 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016ba:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d04e      	beq.n	8001764 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016d2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d8:	b29b      	uxth	r3, r3
 80016da:	2bff      	cmp	r3, #255	; 0xff
 80016dc:	d906      	bls.n	80016ec <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	22ff      	movs	r2, #255	; 0xff
 80016e2:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80016e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	e010      	b.n	800170e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80016fe:	d003      	beq.n	8001708 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	e002      	b.n	800170e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001708:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800170c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001712:	b2da      	uxtb	r2, r3
 8001714:	8a79      	ldrh	r1, [r7, #18]
 8001716:	2300      	movs	r3, #0
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f000 fddf 	bl	80022e0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001726:	b29a      	uxth	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	b29a      	uxth	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b22      	cmp	r3, #34	; 0x22
 800173e:	d108      	bne.n	8001752 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800174e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001750:	e05b      	b.n	800180a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001760:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001762:	e052      	b.n	800180a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001772:	d003      	beq.n	800177c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f000 f9b5 	bl	8001ae4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800177a:	e046      	b.n	800180a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800177c:	2140      	movs	r1, #64	; 0x40
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f000 fc76 	bl	8002070 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001784:	e041      	b.n	800180a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	099b      	lsrs	r3, r3, #6
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	d029      	beq.n	80017e6 <I2C_Master_ISR_DMA+0x1b0>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	099b      	lsrs	r3, r3, #6
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d023      	beq.n	80017e6 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d119      	bne.n	80017dc <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017b6:	d027      	beq.n	8001808 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80017c0:	d108      	bne.n	80017d4 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017d0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80017d2:	e019      	b.n	8001808 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f000 f985 	bl	8001ae4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80017da:	e015      	b.n	8001808 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80017dc:	2140      	movs	r1, #64	; 0x40
 80017de:	68f8      	ldr	r0, [r7, #12]
 80017e0:	f000 fc46 	bl	8002070 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80017e4:	e010      	b.n	8001808 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	095b      	lsrs	r3, r3, #5
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00b      	beq.n	800180a <I2C_Master_ISR_DMA+0x1d4>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	095b      	lsrs	r3, r3, #5
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d005      	beq.n	800180a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80017fe:	68b9      	ldr	r1, [r7, #8]
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f000 fa0b 	bl	8001c1c <I2C_ITMasterCplt>
 8001806:	e000      	b.n	800180a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8001808:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <I2C_Slave_ISR_DMA+0x24>
 800183c:	2302      	movs	r3, #2
 800183e:	e0c9      	b.n	80019d4 <I2C_Slave_ISR_DMA+0x1b8>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b00      	cmp	r3, #0
 8001852:	d009      	beq.n	8001868 <I2C_Slave_ISR_DMA+0x4c>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 faa4 	bl	8001db0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	091b      	lsrs	r3, r3, #4
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 809a 	beq.w	80019aa <I2C_Slave_ISR_DMA+0x18e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	091b      	lsrs	r3, r3, #4
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 8093 	beq.w	80019aa <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	0b9b      	lsrs	r3, r3, #14
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b00      	cmp	r3, #0
 800188e:	d105      	bne.n	800189c <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	0bdb      	lsrs	r3, r3, #15
 8001894:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001898:	2b00      	cmp	r3, #0
 800189a:	d07f      	beq.n	800199c <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d00d      	beq.n	80018c0 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	0bdb      	lsrs	r3, r3, #15
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d007      	beq.n	80018c0 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80018bc:	2301      	movs	r3, #1
 80018be:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00d      	beq.n	80018e4 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	0b9b      	lsrs	r3, r3, #14
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d007      	beq.n	80018e4 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 80018e0:	2301      	movs	r3, #1
 80018e2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d128      	bne.n	800193c <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b28      	cmp	r3, #40	; 0x28
 80018f4:	d108      	bne.n	8001908 <I2C_Slave_ISR_DMA+0xec>
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018fc:	d104      	bne.n	8001908 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80018fe:	68b9      	ldr	r1, [r7, #8]
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f000 fb5f 	bl	8001fc4 <I2C_ITListenCplt>
 8001906:	e048      	b.n	800199a <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b29      	cmp	r3, #41	; 0x29
 8001912:	d10e      	bne.n	8001932 <I2C_Slave_ISR_DMA+0x116>
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800191a:	d00a      	beq.n	8001932 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2210      	movs	r2, #16
 8001922:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f000 fc9a 	bl	800225e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 f917 	bl	8001b5e <I2C_ITSlaveSeqCplt>
 8001930:	e033      	b.n	800199a <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2210      	movs	r2, #16
 8001938:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800193a:	e034      	b.n	80019a6 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2210      	movs	r2, #16
 8001942:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001948:	f043 0204 	orr.w	r2, r3, #4
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001956:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <I2C_Slave_ISR_DMA+0x14a>
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001964:	d11f      	bne.n	80019a6 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001966:	7dfb      	ldrb	r3, [r7, #23]
 8001968:	2b21      	cmp	r3, #33	; 0x21
 800196a:	d002      	beq.n	8001972 <I2C_Slave_ISR_DMA+0x156>
 800196c:	7dfb      	ldrb	r3, [r7, #23]
 800196e:	2b29      	cmp	r3, #41	; 0x29
 8001970:	d103      	bne.n	800197a <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2221      	movs	r2, #33	; 0x21
 8001976:	631a      	str	r2, [r3, #48]	; 0x30
 8001978:	e008      	b.n	800198c <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800197a:	7dfb      	ldrb	r3, [r7, #23]
 800197c:	2b22      	cmp	r3, #34	; 0x22
 800197e:	d002      	beq.n	8001986 <I2C_Slave_ISR_DMA+0x16a>
 8001980:	7dfb      	ldrb	r3, [r7, #23]
 8001982:	2b2a      	cmp	r3, #42	; 0x2a
 8001984:	d102      	bne.n	800198c <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2222      	movs	r2, #34	; 0x22
 800198a:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001990:	4619      	mov	r1, r3
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 fb6c 	bl	8002070 <I2C_ITError>
      if (treatdmanack == 1U)
 8001998:	e005      	b.n	80019a6 <I2C_Slave_ISR_DMA+0x18a>
 800199a:	e004      	b.n	80019a6 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2210      	movs	r2, #16
 80019a2:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80019a4:	e011      	b.n	80019ca <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80019a6:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80019a8:	e00f      	b.n	80019ca <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	08db      	lsrs	r3, r3, #3
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d009      	beq.n	80019ca <I2C_Slave_ISR_DMA+0x1ae>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	08db      	lsrs	r3, r3, #3
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80019c2:	68b9      	ldr	r1, [r7, #8]
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f000 f809 	bl	80019dc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3720      	adds	r7, #32
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80019f2:	2b28      	cmp	r3, #40	; 0x28
 80019f4:	d16a      	bne.n	8001acc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	0c1b      	lsrs	r3, r3, #16
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	0c1b      	lsrs	r3, r3, #16
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001a14:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a22:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001a30:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d138      	bne.n	8001aac <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001a3a:	897b      	ldrh	r3, [r7, #10]
 8001a3c:	09db      	lsrs	r3, r3, #7
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	89bb      	ldrh	r3, [r7, #12]
 8001a42:	4053      	eors	r3, r2
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	f003 0306 	and.w	r3, r3, #6
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d11c      	bne.n	8001a88 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001a4e:	897b      	ldrh	r3, [r7, #10]
 8001a50:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d13b      	bne.n	8001adc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2208      	movs	r2, #8
 8001a70:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a7a:	89ba      	ldrh	r2, [r7, #12]
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff fc8c 	bl	800139e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001a86:	e029      	b.n	8001adc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001a88:	893b      	ldrh	r3, [r7, #8]
 8001a8a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001a8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 fcb3 	bl	80023fc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a9e:	89ba      	ldrh	r2, [r7, #12]
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff fc7a 	bl	800139e <HAL_I2C_AddrCallback>
}
 8001aaa:	e017      	b.n	8001adc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001aac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 fca3 	bl	80023fc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001abe:	89ba      	ldrh	r2, [r7, #12]
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff fc6a 	bl	800139e <HAL_I2C_AddrCallback>
}
 8001aca:	e007      	b.n	8001adc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001adc:	bf00      	nop
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b21      	cmp	r3, #33	; 0x21
 8001afe:	d115      	bne.n	8001b2c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2220      	movs	r2, #32
 8001b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2211      	movs	r2, #17
 8001b0c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001b14:	2101      	movs	r1, #1
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 fc70 	bl	80023fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff fc28 	bl	800137a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001b2a:	e014      	b.n	8001b56 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2212      	movs	r2, #18
 8001b38:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001b40:	2102      	movs	r1, #2
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 fc5a 	bl	80023fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff fc1b 	bl	800138c <HAL_I2C_MasterRxCpltCallback>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b084      	sub	sp, #16
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	0b9b      	lsrs	r3, r3, #14
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d008      	beq.n	8001b94 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	e00d      	b.n	8001bb0 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	0bdb      	lsrs	r3, r3, #15
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d007      	beq.n	8001bb0 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bae:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b29      	cmp	r3, #41	; 0x29
 8001bba:	d112      	bne.n	8001be2 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2228      	movs	r2, #40	; 0x28
 8001bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2221      	movs	r2, #33	; 0x21
 8001bc8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001bca:	2101      	movs	r1, #1
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 fc15 	bl	80023fc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7fe fc21 	bl	8000422 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001be0:	e017      	b.n	8001c12 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b2a      	cmp	r3, #42	; 0x2a
 8001bec:	d111      	bne.n	8001c12 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2228      	movs	r2, #40	; 0x28
 8001bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2222      	movs	r2, #34	; 0x22
 8001bfa:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001bfc:	2102      	movs	r1, #2
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 fbfc 	bl	80023fc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7fe fc1e 	bl	800044e <HAL_I2C_SlaveRxCpltCallback>
}
 8001c12:	bf00      	nop
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b21      	cmp	r3, #33	; 0x21
 8001c3c:	d107      	bne.n	8001c4e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001c3e:	2101      	movs	r1, #1
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 fbdb 	bl	80023fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2211      	movs	r2, #17
 8001c4a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c4c:	e00c      	b.n	8001c68 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b22      	cmp	r3, #34	; 0x22
 8001c58:	d106      	bne.n	8001c68 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001c5a:	2102      	movs	r1, #2
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 fbcd 	bl	80023fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2212      	movs	r2, #18
 8001c66:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6859      	ldr	r1, [r3, #4]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4b4d      	ldr	r3, [pc, #308]	; (8001da8 <I2C_ITMasterCplt+0x18c>)
 8001c74:	400b      	ands	r3, r1
 8001c76:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4a      	ldr	r2, [pc, #296]	; (8001dac <I2C_ITMasterCplt+0x190>)
 8001c82:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	091b      	lsrs	r3, r3, #4
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d009      	beq.n	8001ca4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2210      	movs	r2, #16
 8001c96:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9c:	f043 0204 	orr.w	r2, r3, #4
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b60      	cmp	r3, #96	; 0x60
 8001cae:	d10b      	bne.n	8001cc8 <I2C_ITMasterCplt+0xac>
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	089b      	lsrs	r3, r3, #2
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 fac8 	bl	800225e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b60      	cmp	r3, #96	; 0x60
 8001cde:	d002      	beq.n	8001ce6 <I2C_ITMasterCplt+0xca>
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d006      	beq.n	8001cf4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	4619      	mov	r1, r3
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f9bf 	bl	8002070 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001cf2:	e054      	b.n	8001d9e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b21      	cmp	r3, #33	; 0x21
 8001cfe:	d124      	bne.n	8001d4a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2220      	movs	r2, #32
 8001d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b40      	cmp	r3, #64	; 0x40
 8001d18:	d10b      	bne.n	8001d32 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff fb4d 	bl	80013ca <HAL_I2C_MemTxCpltCallback>
}
 8001d30:	e035      	b.n	8001d9e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff fb19 	bl	800137a <HAL_I2C_MasterTxCpltCallback>
}
 8001d48:	e029      	b.n	8001d9e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b22      	cmp	r3, #34	; 0x22
 8001d54:	d123      	bne.n	8001d9e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b40      	cmp	r3, #64	; 0x40
 8001d6e:	d10b      	bne.n	8001d88 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff fb2b 	bl	80013dc <HAL_I2C_MemRxCpltCallback>
}
 8001d86:	e00a      	b.n	8001d9e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff faf7 	bl	800138c <HAL_I2C_MasterRxCpltCallback>
}
 8001d9e:	bf00      	nop
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	fe00e800 	.word	0xfe00e800
 8001dac:	ffff0000 	.word	0xffff0000

08001db0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dcc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	2b21      	cmp	r3, #33	; 0x21
 8001dda:	d002      	beq.n	8001de2 <I2C_ITSlaveCplt+0x32>
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	2b29      	cmp	r3, #41	; 0x29
 8001de0:	d108      	bne.n	8001df4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001de2:	f248 0101 	movw	r1, #32769	; 0x8001
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 fb08 	bl	80023fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2221      	movs	r2, #33	; 0x21
 8001df0:	631a      	str	r2, [r3, #48]	; 0x30
 8001df2:	e00d      	b.n	8001e10 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	2b22      	cmp	r3, #34	; 0x22
 8001df8:	d002      	beq.n	8001e00 <I2C_ITSlaveCplt+0x50>
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8001dfe:	d107      	bne.n	8001e10 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001e00:	f248 0102 	movw	r1, #32770	; 0x8002
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 faf9 	bl	80023fc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2222      	movs	r2, #34	; 0x22
 8001e0e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e1e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6859      	ldr	r1, [r3, #4]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4b64      	ldr	r3, [pc, #400]	; (8001fbc <I2C_ITSlaveCplt+0x20c>)
 8001e2c:	400b      	ands	r3, r1
 8001e2e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 fa14 	bl	800225e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	0b9b      	lsrs	r3, r3, #14
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d013      	beq.n	8001e6a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e50:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d020      	beq.n	8001e9c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e68:	e018      	b.n	8001e9c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	0bdb      	lsrs	r3, r3, #15
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d012      	beq.n	8001e9c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e84:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d006      	beq.n	8001e9c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	089b      	lsrs	r3, r3, #2
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d020      	beq.n	8001eea <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f023 0304 	bic.w	r3, r3, #4
 8001eae:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00c      	beq.n	8001eea <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	f043 0204 	orr.w	r2, r3, #4
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d010      	beq.n	8001f38 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f8a7 	bl	8002070 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b28      	cmp	r3, #40	; 0x28
 8001f2c:	d141      	bne.n	8001fb2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001f2e:	6979      	ldr	r1, [r7, #20]
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f847 	bl	8001fc4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001f36:	e03c      	b.n	8001fb2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f40:	d014      	beq.n	8001f6c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff fe0b 	bl	8001b5e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <I2C_ITSlaveCplt+0x210>)
 8001f4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2220      	movs	r2, #32
 8001f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff fa27 	bl	80013b8 <HAL_I2C_ListenCpltCallback>
}
 8001f6a:	e022      	b.n	8001fb2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b22      	cmp	r3, #34	; 0x22
 8001f76:	d10e      	bne.n	8001f96 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7fe fa5d 	bl	800044e <HAL_I2C_SlaveRxCpltCallback>
}
 8001f94:	e00d      	b.n	8001fb2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7fe fa38 	bl	8000422 <HAL_I2C_SlaveTxCpltCallback>
}
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	fe00e800 	.word	0xfe00e800
 8001fc0:	ffff0000 	.word	0xffff0000

08001fc4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a26      	ldr	r2, [pc, #152]	; (800206c <I2C_ITListenCplt+0xa8>)
 8001fd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d022      	beq.n	8002042 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002018:	2b00      	cmp	r3, #0
 800201a:	d012      	beq.n	8002042 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002020:	3b01      	subs	r3, #1
 8002022:	b29a      	uxth	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202c:	b29b      	uxth	r3, r3
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f043 0204 	orr.w	r2, r3, #4
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002042:	f248 0103 	movw	r1, #32771	; 0x8003
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f9d8 	bl	80023fc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2210      	movs	r2, #16
 8002052:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff f9ab 	bl	80013b8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	ffff0000 	.word	0xffff0000

08002070 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002080:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a5d      	ldr	r2, [pc, #372]	; (8002204 <I2C_ITError+0x194>)
 800208e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	431a      	orrs	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	2b28      	cmp	r3, #40	; 0x28
 80020a6:	d005      	beq.n	80020b4 <I2C_ITError+0x44>
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	2b29      	cmp	r3, #41	; 0x29
 80020ac:	d002      	beq.n	80020b4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
 80020b0:	2b2a      	cmp	r3, #42	; 0x2a
 80020b2:	d10b      	bne.n	80020cc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80020b4:	2103      	movs	r1, #3
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f9a0 	bl	80023fc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2228      	movs	r2, #40	; 0x28
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a50      	ldr	r2, [pc, #320]	; (8002208 <I2C_ITError+0x198>)
 80020c8:	635a      	str	r2, [r3, #52]	; 0x34
 80020ca:	e011      	b.n	80020f0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80020cc:	f248 0103 	movw	r1, #32771	; 0x8003
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f993 	bl	80023fc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b60      	cmp	r3, #96	; 0x60
 80020e0:	d003      	beq.n	80020ea <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2220      	movs	r2, #32
 80020e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d039      	beq.n	8002172 <I2C_ITError+0x102>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2b11      	cmp	r3, #17
 8002102:	d002      	beq.n	800210a <I2C_ITError+0x9a>
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b21      	cmp	r3, #33	; 0x21
 8002108:	d133      	bne.n	8002172 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002114:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002118:	d107      	bne.n	800212a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002128:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe fd26 	bl	8000b80 <HAL_DMA_GetState>
 8002134:	4603      	mov	r3, r0
 8002136:	2b01      	cmp	r3, #1
 8002138:	d017      	beq.n	800216a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213e:	4a33      	ldr	r2, [pc, #204]	; (800220c <I2C_ITError+0x19c>)
 8002140:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fcb7 	bl	8000ac2 <HAL_DMA_Abort_IT>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d04d      	beq.n	80021f6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002164:	4610      	mov	r0, r2
 8002166:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002168:	e045      	b.n	80021f6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f850 	bl	8002210 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002170:	e041      	b.n	80021f6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002176:	2b00      	cmp	r3, #0
 8002178:	d039      	beq.n	80021ee <I2C_ITError+0x17e>
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b12      	cmp	r3, #18
 800217e:	d002      	beq.n	8002186 <I2C_ITError+0x116>
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2b22      	cmp	r3, #34	; 0x22
 8002184:	d133      	bne.n	80021ee <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002194:	d107      	bne.n	80021a6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021a4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe fce8 	bl	8000b80 <HAL_DMA_GetState>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d017      	beq.n	80021e6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ba:	4a14      	ldr	r2, [pc, #80]	; (800220c <I2C_ITError+0x19c>)
 80021bc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fc79 	bl	8000ac2 <HAL_DMA_Abort_IT>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d011      	beq.n	80021fa <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021e0:	4610      	mov	r0, r2
 80021e2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80021e4:	e009      	b.n	80021fa <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f812 	bl	8002210 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80021ec:	e005      	b.n	80021fa <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f80e 	bl	8002210 <I2C_TreatErrorCallback>
  }
}
 80021f4:	e002      	b.n	80021fc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80021f6:	bf00      	nop
 80021f8:	e000      	b.n	80021fc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80021fa:	bf00      	nop
}
 80021fc:	bf00      	nop
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	ffff0000 	.word	0xffff0000
 8002208:	08001431 	.word	0x08001431
 800220c:	080022a5 	.word	0x080022a5

08002210 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b60      	cmp	r3, #96	; 0x60
 8002222:	d10e      	bne.n	8002242 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff f8d7 	bl	80013ee <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002240:	e009      	b.n	8002256 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7fe f912 	bl	800047a <HAL_I2C_ErrorCallback>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b02      	cmp	r3, #2
 8002272:	d103      	bne.n	800227c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2200      	movs	r2, #0
 800227a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b01      	cmp	r3, #1
 8002288:	d007      	beq.n	800229a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0201 	orr.w	r2, r2, #1
 8002298:	619a      	str	r2, [r3, #24]
  }
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022be:	2200      	movs	r2, #0
 80022c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ce:	2200      	movs	r2, #0
 80022d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f7ff ff9c 	bl	8002210 <I2C_TreatErrorCallback>
}
 80022d8:	bf00      	nop
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	607b      	str	r3, [r7, #4]
 80022ea:	460b      	mov	r3, r1
 80022ec:	817b      	strh	r3, [r7, #10]
 80022ee:	4613      	mov	r3, r2
 80022f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	0d5b      	lsrs	r3, r3, #21
 80022fc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <I2C_TransferConfig+0x54>)
 8002302:	430b      	orrs	r3, r1
 8002304:	43db      	mvns	r3, r3
 8002306:	ea02 0103 	and.w	r1, r2, r3
 800230a:	897b      	ldrh	r3, [r7, #10]
 800230c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002310:	7a7b      	ldrb	r3, [r7, #9]
 8002312:	041b      	lsls	r3, r3, #16
 8002314:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	431a      	orrs	r2, r3
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	431a      	orrs	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800232a:	bf00      	nop
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	03ff63ff 	.word	0x03ff63ff

08002338 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234c:	4a29      	ldr	r2, [pc, #164]	; (80023f4 <I2C_Enable_IRQ+0xbc>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d004      	beq.n	800235c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002356:	4a28      	ldr	r2, [pc, #160]	; (80023f8 <I2C_Enable_IRQ+0xc0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d11d      	bne.n	8002398 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800235c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002360:	2b00      	cmp	r3, #0
 8002362:	da03      	bge.n	800236c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800236a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800236c:	887b      	ldrh	r3, [r7, #2]
 800236e:	2b10      	cmp	r3, #16
 8002370:	d103      	bne.n	800237a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002378:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800237a:	887b      	ldrh	r3, [r7, #2]
 800237c:	2b20      	cmp	r3, #32
 800237e:	d103      	bne.n	8002388 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002386:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002388:	887b      	ldrh	r3, [r7, #2]
 800238a:	2b40      	cmp	r3, #64	; 0x40
 800238c:	d125      	bne.n	80023da <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002394:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002396:	e020      	b.n	80023da <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002398:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800239c:	2b00      	cmp	r3, #0
 800239e:	da03      	bge.n	80023a8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80023a6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80023a8:	887b      	ldrh	r3, [r7, #2]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80023b8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80023ba:	887b      	ldrh	r3, [r7, #2]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80023ca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80023cc:	887b      	ldrh	r3, [r7, #2]
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	d103      	bne.n	80023da <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f043 0320 	orr.w	r3, r3, #32
 80023d8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6819      	ldr	r1, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	601a      	str	r2, [r3, #0]
}
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	08001637 	.word	0x08001637
 80023f8:	0800181d 	.word	0x0800181d

080023fc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800240c:	887b      	ldrh	r3, [r7, #2]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00f      	beq.n	8002436 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800241c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002424:	b2db      	uxtb	r3, r3
 8002426:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800242a:	2b28      	cmp	r3, #40	; 0x28
 800242c:	d003      	beq.n	8002436 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002434:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002436:	887b      	ldrh	r3, [r7, #2]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00f      	beq.n	8002460 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002446:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002454:	2b28      	cmp	r3, #40	; 0x28
 8002456:	d003      	beq.n	8002460 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800245e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002460:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002464:	2b00      	cmp	r3, #0
 8002466:	da03      	bge.n	8002470 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800246e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002470:	887b      	ldrh	r3, [r7, #2]
 8002472:	2b10      	cmp	r3, #16
 8002474:	d103      	bne.n	800247e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800247c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800247e:	887b      	ldrh	r3, [r7, #2]
 8002480:	2b20      	cmp	r3, #32
 8002482:	d103      	bne.n	800248c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f043 0320 	orr.w	r3, r3, #32
 800248a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800248c:	887b      	ldrh	r3, [r7, #2]
 800248e:	2b40      	cmp	r3, #64	; 0x40
 8002490:	d103      	bne.n	800249a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002498:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6819      	ldr	r1, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	43da      	mvns	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	400a      	ands	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]
}
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b20      	cmp	r3, #32
 80024ca:	d138      	bne.n	800253e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e032      	b.n	8002540 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2224      	movs	r2, #36	; 0x24
 80024e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0201 	bic.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002508:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6819      	ldr	r1, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0201 	orr.w	r2, r2, #1
 8002528:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	e000      	b.n	8002540 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800253e:	2302      	movs	r3, #2
  }
}
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr

0800254a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800254a:	b480      	push	{r7}
 800254c:	b085      	sub	sp, #20
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b20      	cmp	r3, #32
 800255e:	d139      	bne.n	80025d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800256a:	2302      	movs	r3, #2
 800256c:	e033      	b.n	80025d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2224      	movs	r2, #36	; 0x24
 800257a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0201 	bic.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800259c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	e000      	b.n	80025d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025d4:	2302      	movs	r3, #2
  }
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <HAL_I2CEx_EnableWakeUp>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2Cx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_EnableWakeUp(I2C_HandleTypeDef *hi2c)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b20      	cmp	r3, #32
 80025f2:	d130      	bne.n	8002656 <HAL_I2CEx_EnableWakeUp+0x76>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_I2CEx_EnableWakeUp+0x22>
 80025fe:	2302      	movs	r3, #2
 8002600:	e02a      	b.n	8002658 <HAL_I2CEx_EnableWakeUp+0x78>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2224      	movs	r2, #36	; 0x24
 800260e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0201 	bic.w	r2, r2, #1
 8002620:	601a      	str	r2, [r3, #0]

    /* Enable wakeup from stop mode */
    hi2c->Instance->CR1 |= I2C_CR1_WUPEN;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002630:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f042 0201 	orr.w	r2, r2, #1
 8002640:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2220      	movs	r2, #32
 8002646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	e000      	b.n	8002658 <HAL_I2CEx_EnableWakeUp+0x78>
  }
  else
  {
    return HAL_BUSY;
 8002656:	2302      	movs	r3, #2
  }
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr
	...

08002664 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	4904      	ldr	r1, [pc, #16]	; (8002684 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40010000 	.word	0x40010000

08002688 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <HAL_PWR_EnableBkUpAccess+0x18>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a03      	ldr	r2, [pc, #12]	; (80026a0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002696:	6013      	str	r3, [r2, #0]
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	58000400 	.word	0x58000400

080026a4 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if (Regulator == PWR_LOWPOWERREGULATOR_ON)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026b6:	d104      	bne.n	80026c2 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 f83e 	bl	800273c <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 80026c0:	e003      	b.n	80026ca <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 80026c2:	78fb      	ldrb	r3, [r7, #3]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 f811 	bl	80026ec <HAL_PWREx_EnterSTOP0Mode>
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80026d8:	4b03      	ldr	r3, [pc, #12]	; (80026e8 <HAL_PWREx_GetVoltageRange+0x14>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr
 80026e8:	58000400 	.word	0x58000400

080026ec <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP0);

#else
  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 80026f6:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <HAL_PWREx_EnterSTOP0Mode+0x48>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a0e      	ldr	r2, [pc, #56]	; (8002734 <HAL_PWREx_EnterSTOP0Mode+0x48>)
 80026fc:	f023 0307 	bic.w	r3, r3, #7
 8002700:	6013      	str	r3, [r2, #0]

#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002702:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	4a0c      	ldr	r2, [pc, #48]	; (8002738 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002708:	f043 0304 	orr.w	r3, r3, #4
 800270c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002714:	bf30      	wfi
 8002716:	e002      	b.n	800271e <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002718:	bf40      	sev
    __WFE();
 800271a:	bf20      	wfe
    __WFE();
 800271c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	4a05      	ldr	r2, [pc, #20]	; (8002738 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002724:	f023 0304 	bic.w	r3, r3, #4
 8002728:	6113      	str	r3, [r2, #16]
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	58000400 	.word	0x58000400
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
#else
  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <HAL_PWREx_EnterSTOP1Mode+0x4c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 0307 	bic.w	r3, r3, #7
 800274e:	4a0e      	ldr	r2, [pc, #56]	; (8002788 <HAL_PWREx_EnterSTOP1Mode+0x4c>)
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002756:	4b0d      	ldr	r3, [pc, #52]	; (800278c <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	4a0c      	ldr	r2, [pc, #48]	; (800278c <HAL_PWREx_EnterSTOP1Mode+0x50>)
 800275c:	f043 0304 	orr.w	r3, r3, #4
 8002760:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002768:	bf30      	wfi
 800276a:	e002      	b.n	8002772 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800276c:	bf40      	sev
    __WFE();
 800276e:	bf20      	wfe
    __WFE();
 8002770:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	4a05      	ldr	r2, [pc, #20]	; (800278c <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002778:	f023 0304 	bic.w	r3, r3, #4
 800277c:	6113      	str	r3, [r2, #16]
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	58000400 	.word	0x58000400
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a0:	d101      	bne.n	80027a6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	58000400 	.word	0x58000400

080027b4 <LL_RCC_HSE_EnableTcxo>:
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80027b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027c6:	6013      	str	r3, [r2, #0]
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <LL_RCC_HSE_DisableTcxo>:
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80027d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027e2:	6013      	str	r3, [r2, #0]
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <LL_RCC_HSE_IsEnabledDiv2>:
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80027f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027fe:	d101      	bne.n	8002804 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr

0800280e <LL_RCC_HSE_Enable>:
{
 800280e:	b480      	push	{r7}
 8002810:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800281c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002820:	6013      	str	r3, [r2, #0]
}
 8002822:	bf00      	nop
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr

0800282a <LL_RCC_HSE_Disable>:
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800282e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800283c:	6013      	str	r3, [r2, #0]
}
 800283e:	bf00      	nop
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr

08002846 <LL_RCC_HSE_IsReady>:
{
 8002846:	b480      	push	{r7}
 8002848:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800284a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002854:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002858:	d101      	bne.n	800285e <LL_RCC_HSE_IsReady+0x18>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <LL_RCC_HSE_IsReady+0x1a>
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <LL_RCC_HSI_Enable>:
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800286c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287a:	6013      	str	r3, [r2, #0]
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <LL_RCC_HSI_Disable>:
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002892:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002896:	6013      	str	r3, [r2, #0]
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <LL_RCC_HSI_IsReady>:
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80028a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028b2:	d101      	bne.n	80028b8 <LL_RCC_HSI_IsReady+0x18>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <LL_RCC_HSI_IsReady+0x1a>
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr

080028c2 <LL_RCC_HSI_SetCalibTrimming>:
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80028ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	061b      	lsls	r3, r3, #24
 80028d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <LL_RCC_LSE_IsReady>:
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80028ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d101      	bne.n	8002902 <LL_RCC_LSE_IsReady+0x18>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <LL_RCC_LSE_IsReady+0x1a>
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <LL_RCC_LSI_Enable>:
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002918:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <LL_RCC_LSI_Disable>:
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002934:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002938:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800293c:	f023 0301 	bic.w	r3, r3, #1
 8002940:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <LL_RCC_LSI_IsReady>:
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b02      	cmp	r3, #2
 800295e:	d101      	bne.n	8002964 <LL_RCC_LSI_IsReady+0x18>
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <LL_RCC_LSI_IsReady+0x1a>
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <LL_RCC_MSI_Enable>:
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6013      	str	r3, [r2, #0]
}
 8002982:	bf00      	nop
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <LL_RCC_MSI_Disable>:
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800298e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002998:	f023 0301 	bic.w	r3, r3, #1
 800299c:	6013      	str	r3, [r2, #0]
}
 800299e:	bf00      	nop
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <LL_RCC_MSI_IsReady>:
{
 80029a6:	b480      	push	{r7}
 80029a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80029aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d101      	bne.n	80029bc <LL_RCC_MSI_IsReady+0x16>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <LL_RCC_MSI_IsReady+0x18>
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr

080029c6 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80029ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d101      	bne.n	80029dc <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80029d8:	2301      	movs	r3, #1
 80029da:	e000      	b.n	80029de <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <LL_RCC_MSI_GetRange>:
{
 80029e6:	b480      	push	{r7}
 80029e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80029ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a08:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	021b      	lsls	r3, r3, #8
 8002a2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	604b      	str	r3, [r1, #4]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <LL_RCC_SetSysClkSource>:
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f023 0203 	bic.w	r2, r3, #3
 8002a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	608b      	str	r3, [r1, #8]
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <LL_RCC_GetSysClkSource>:
{
 8002a62:	b480      	push	{r7}
 8002a64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 030c 	and.w	r3, r3, #12
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <LL_RCC_SetAHBPrescaler>:
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	608b      	str	r3, [r1, #8]
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <LL_C2_RCC_SetAHBPrescaler>:
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aaa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002aae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr

08002ac8 <LL_RCC_SetAHB3Prescaler>:
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ad8:	f023 020f 	bic.w	r2, r3, #15
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	091b      	lsrs	r3, r3, #4
 8002ae0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <LL_RCC_SetAPB1Prescaler>:
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	608b      	str	r3, [r1, #8]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr

08002b1a <LL_RCC_SetAPB2Prescaler>:
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <LL_RCC_GetAHBPrescaler>:
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <LL_RCC_GetAHB3Prescaler>:
{
 8002b56:	b480      	push	{r7}
 8002b58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b82:	6013      	str	r3, [r2, #0]
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b9e:	6013      	str	r3, [r2, #0]
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bba:	d101      	bne.n	8002bc0 <LL_RCC_PLL_IsReady+0x18>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <LL_RCC_PLL_IsReady+0x1a>
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	0a1b      	lsrs	r3, r3, #8
 8002bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002be2:	b480      	push	{r7}
 8002be4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0303 	and.w	r3, r3, #3
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c36:	d101      	bne.n	8002c3c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002c46:	b480      	push	{r7}
 8002c48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c5a:	d101      	bne.n	8002c60 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e000      	b.n	8002c62 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr

08002c6a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7e:	d101      	bne.n	8002c84 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr

08002c8e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ca0:	d101      	bne.n	8002ca6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cbe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cc2:	d101      	bne.n	8002cc8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e000      	b.n	8002cca <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr
	...

08002cd4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e38a      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ce6:	f7ff febc 	bl	8002a62 <LL_RCC_GetSysClkSource>
 8002cea:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cec:	f7ff ff8f 	bl	8002c0e <LL_RCC_PLL_GetMainSource>
 8002cf0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0320 	and.w	r3, r3, #32
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 80c9 	beq.w	8002e92 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_RCC_OscConfig+0x3e>
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	2b0c      	cmp	r3, #12
 8002d0a:	d17b      	bne.n	8002e04 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d178      	bne.n	8002e04 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d12:	f7ff fe48 	bl	80029a6 <LL_RCC_MSI_IsReady>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_OscConfig+0x54>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e369      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d005      	beq.n	8002d46 <HAL_RCC_OscConfig+0x72>
 8002d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d44:	e006      	b.n	8002d54 <HAL_RCC_OscConfig+0x80>
 8002d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d4e:	091b      	lsrs	r3, r3, #4
 8002d50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d222      	bcs.n	8002d9e <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fd49 	bl	80037f4 <RCC_SetFlashLatencyFromMSIRange>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e347      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d76:	f043 0308 	orr.w	r3, r3, #8
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff fe3c 	bl	8002a14 <LL_RCC_MSI_SetCalibTrimming>
 8002d9c:	e021      	b.n	8002de2 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002da8:	f043 0308 	orr.w	r3, r3, #8
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fe23 	bl	8002a14 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 fd0e 	bl	80037f4 <RCC_SetFlashLatencyFromMSIRange>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e30c      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002de2:	f000 fcf3 	bl	80037cc <HAL_RCC_GetHCLKFreq>
 8002de6:	4603      	mov	r3, r0
 8002de8:	4ab4      	ldr	r2, [pc, #720]	; (80030bc <HAL_RCC_OscConfig+0x3e8>)
 8002dea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dec:	4bb4      	ldr	r3, [pc, #720]	; (80030c0 <HAL_RCC_OscConfig+0x3ec>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd fd05 	bl	8000800 <HAL_InitTick>
 8002df6:	4603      	mov	r3, r0
 8002df8:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002dfa:	7cfb      	ldrb	r3, [r7, #19]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d047      	beq.n	8002e90 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8002e00:	7cfb      	ldrb	r3, [r7, #19]
 8002e02:	e2fb      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d02c      	beq.n	8002e66 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e0c:	f7ff fdaf 	bl	800296e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e10:	f7fd fd42 	bl	8000898 <HAL_GetTick>
 8002e14:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e18:	f7fd fd3e 	bl	8000898 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e2e8      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e2a:	f7ff fdbc 	bl	80029a6 <LL_RCC_MSI_IsReady>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f1      	beq.n	8002e18 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e3e:	f043 0308 	orr.w	r3, r3, #8
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e56:	4313      	orrs	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff fdd8 	bl	8002a14 <LL_RCC_MSI_SetCalibTrimming>
 8002e64:	e015      	b.n	8002e92 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e66:	f7ff fd90 	bl	800298a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e6a:	f7fd fd15 	bl	8000898 <HAL_GetTick>
 8002e6e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e72:	f7fd fd11 	bl	8000898 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e2bb      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e84:	f7ff fd8f 	bl	80029a6 <LL_RCC_MSI_IsReady>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f1      	bne.n	8002e72 <HAL_RCC_OscConfig+0x19e>
 8002e8e:	e000      	b.n	8002e92 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e90:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d05f      	beq.n	8002f5e <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x1dc>
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	2b0c      	cmp	r3, #12
 8002ea8:	d10d      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d10a      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb0:	f7ff fcc9 	bl	8002846 <LL_RCC_HSE_IsReady>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d050      	beq.n	8002f5c <HAL_RCC_OscConfig+0x288>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d14c      	bne.n	8002f5c <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e29a      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee4:	d102      	bne.n	8002eec <HAL_RCC_OscConfig+0x218>
 8002ee6:	f7ff fc92 	bl	800280e <LL_RCC_HSE_Enable>
 8002eea:	e00d      	b.n	8002f08 <HAL_RCC_OscConfig+0x234>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002ef4:	d104      	bne.n	8002f00 <HAL_RCC_OscConfig+0x22c>
 8002ef6:	f7ff fc5d 	bl	80027b4 <LL_RCC_HSE_EnableTcxo>
 8002efa:	f7ff fc88 	bl	800280e <LL_RCC_HSE_Enable>
 8002efe:	e003      	b.n	8002f08 <HAL_RCC_OscConfig+0x234>
 8002f00:	f7ff fc93 	bl	800282a <LL_RCC_HSE_Disable>
 8002f04:	f7ff fc64 	bl	80027d0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d012      	beq.n	8002f36 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7fd fcc2 	bl	8000898 <HAL_GetTick>
 8002f14:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f18:	f7fd fcbe 	bl	8000898 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b64      	cmp	r3, #100	; 0x64
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e268      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f2a:	f7ff fc8c 	bl	8002846 <LL_RCC_HSE_IsReady>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f1      	beq.n	8002f18 <HAL_RCC_OscConfig+0x244>
 8002f34:	e013      	b.n	8002f5e <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f36:	f7fd fcaf 	bl	8000898 <HAL_GetTick>
 8002f3a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f3e:	f7fd fcab 	bl	8000898 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b64      	cmp	r3, #100	; 0x64
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e255      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f50:	f7ff fc79 	bl	8002846 <LL_RCC_HSE_IsReady>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f1      	bne.n	8002f3e <HAL_RCC_OscConfig+0x26a>
 8002f5a:	e000      	b.n	8002f5e <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f5c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d04b      	beq.n	8003002 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_OscConfig+0x2a8>
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	2b0c      	cmp	r3, #12
 8002f74:	d113      	bne.n	8002f9e <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d110      	bne.n	8002f9e <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f7c:	f7ff fc90 	bl	80028a0 <LL_RCC_HSI_IsReady>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <HAL_RCC_OscConfig+0x2be>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e234      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fc93 	bl	80028c2 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f9c:	e031      	b.n	8003002 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d019      	beq.n	8002fda <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fa6:	f7ff fc5f 	bl	8002868 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002faa:	f7fd fc75 	bl	8000898 <HAL_GetTick>
 8002fae:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb2:	f7fd fc71 	bl	8000898 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e21b      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002fc4:	f7ff fc6c 	bl	80028a0 <LL_RCC_HSI_IsReady>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f1      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff fc75 	bl	80028c2 <LL_RCC_HSI_SetCalibTrimming>
 8002fd8:	e013      	b.n	8003002 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fda:	f7ff fc53 	bl	8002884 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fde:	f7fd fc5b 	bl	8000898 <HAL_GetTick>
 8002fe2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe6:	f7fd fc57 	bl	8000898 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e201      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002ff8:	f7ff fc52 	bl	80028a0 <LL_RCC_HSI_IsReady>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f1      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d06e      	beq.n	80030ec <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d056      	beq.n	80030c4 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8003016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800301e:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	69da      	ldr	r2, [r3, #28]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 0310 	and.w	r3, r3, #16
 800302a:	429a      	cmp	r2, r3
 800302c:	d031      	beq.n	8003092 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d006      	beq.n	8003046 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e1da      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d013      	beq.n	8003078 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8003050:	f7ff fc6c 	bl	800292c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003054:	f7fd fc20 	bl	8000898 <HAL_GetTick>
 8003058:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800305c:	f7fd fc1c 	bl	8000898 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b11      	cmp	r3, #17
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e1c6      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 800306e:	f7ff fc6d 	bl	800294c <LL_RCC_LSI_IsReady>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f1      	bne.n	800305c <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8003078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003080:	f023 0210 	bic.w	r2, r3, #16
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003092:	f7ff fc3b 	bl	800290c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003096:	f7fd fbff 	bl	8000898 <HAL_GetTick>
 800309a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800309e:	f7fd fbfb 	bl	8000898 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b11      	cmp	r3, #17
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e1a5      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 80030b0:	f7ff fc4c 	bl	800294c <LL_RCC_LSI_IsReady>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f1      	beq.n	800309e <HAL_RCC_OscConfig+0x3ca>
 80030ba:	e017      	b.n	80030ec <HAL_RCC_OscConfig+0x418>
 80030bc:	200000e8 	.word	0x200000e8
 80030c0:	200000ec 	.word	0x200000ec
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c4:	f7ff fc32 	bl	800292c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c8:	f7fd fbe6 	bl	8000898 <HAL_GetTick>
 80030cc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d0:	f7fd fbe2 	bl	8000898 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b11      	cmp	r3, #17
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e18c      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 80030e2:	f7ff fc33 	bl	800294c <LL_RCC_LSI_IsReady>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1f1      	bne.n	80030d0 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80d8 	beq.w	80032aa <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80030fa:	f7ff fb49 	bl	8002790 <LL_PWR_IsEnabledBkUpAccess>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d113      	bne.n	800312c <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003104:	f7ff fac0 	bl	8002688 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003108:	f7fd fbc6 	bl	8000898 <HAL_GetTick>
 800310c:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003110:	f7fd fbc2 	bl	8000898 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e16c      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003122:	f7ff fb35 	bl	8002790 <LL_PWR_IsEnabledBkUpAccess>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0f1      	beq.n	8003110 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d07b      	beq.n	800322c <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b85      	cmp	r3, #133	; 0x85
 800313a:	d003      	beq.n	8003144 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2b05      	cmp	r3, #5
 8003142:	d109      	bne.n	8003158 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003150:	f043 0304 	orr.w	r3, r3, #4
 8003154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003158:	f7fd fb9e 	bl	8000898 <HAL_GetTick>
 800315c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800315e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003166:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003172:	e00a      	b.n	800318a <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003174:	f7fd fb90 	bl	8000898 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e138      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 800318a:	f7ff fbae 	bl	80028ea <LL_RCC_LSE_IsReady>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0ef      	beq.n	8003174 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	2b81      	cmp	r3, #129	; 0x81
 800319a:	d003      	beq.n	80031a4 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	2b85      	cmp	r3, #133	; 0x85
 80031a2:	d121      	bne.n	80031e8 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fd fb78 	bl	8000898 <HAL_GetTick>
 80031a8:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80031be:	e00a      	b.n	80031d6 <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031c0:	f7fd fb6a 	bl	8000898 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e112      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80031d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0ec      	beq.n	80031c0 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80031e6:	e060      	b.n	80032aa <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7fd fb56 	bl	8000898 <HAL_GetTick>
 80031ec:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003202:	e00a      	b.n	800321a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003204:	f7fd fb48 	bl	8000898 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e0f0      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800321a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1ec      	bne.n	8003204 <HAL_RCC_OscConfig+0x530>
 800322a:	e03e      	b.n	80032aa <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322c:	f7fd fb34 	bl	8000898 <HAL_GetTick>
 8003230:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800323e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003242:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003246:	e00a      	b.n	800325e <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003248:	f7fd fb26 	bl	8000898 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	; 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e0ce      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800325e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1ec      	bne.n	8003248 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326e:	f7fd fb13 	bl	8000898 <HAL_GetTick>
 8003272:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003280:	f023 0301 	bic.w	r3, r3, #1
 8003284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003288:	e00a      	b.n	80032a0 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328a:	f7fd fb05 	bl	8000898 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	f241 3288 	movw	r2, #5000	; 0x1388
 8003298:	4293      	cmp	r3, r2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e0ad      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 80032a0:	f7ff fb23 	bl	80028ea <LL_RCC_LSE_IsReady>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1ef      	bne.n	800328a <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 80a3 	beq.w	80033fa <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	2b0c      	cmp	r3, #12
 80032b8:	d076      	beq.n	80033a8 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d14b      	bne.n	800335a <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c2:	f7ff fc63 	bl	8002b8c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c6:	f7fd fae7 	bl	8000898 <HAL_GetTick>
 80032ca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ce:	f7fd fae3 	bl	8000898 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b0a      	cmp	r3, #10
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e08d      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80032e0:	f7ff fc62 	bl	8002ba8 <LL_RCC_PLL_IsReady>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f1      	bne.n	80032ce <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	4b44      	ldr	r3, [pc, #272]	; (8003404 <HAL_RCC_OscConfig+0x730>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032fc:	4311      	orrs	r1, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003302:	0212      	lsls	r2, r2, #8
 8003304:	4311      	orrs	r1, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800330a:	4311      	orrs	r1, r2
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003310:	4311      	orrs	r1, r2
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003316:	430a      	orrs	r2, r1
 8003318:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800331c:	4313      	orrs	r3, r2
 800331e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003320:	f7ff fc26 	bl	8002b70 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800332e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003332:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003334:	f7fd fab0 	bl	8000898 <HAL_GetTick>
 8003338:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333c:	f7fd faac 	bl	8000898 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b0a      	cmp	r3, #10
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e056      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 800334e:	f7ff fc2b 	bl	8002ba8 <LL_RCC_PLL_IsReady>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f1      	beq.n	800333c <HAL_RCC_OscConfig+0x668>
 8003358:	e04f      	b.n	80033fa <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335a:	f7ff fc17 	bl	8002b8c <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800335e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003368:	f023 0303 	bic.w	r3, r3, #3
 800336c:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800336e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003378:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800337c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003380:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003382:	f7fd fa89 	bl	8000898 <HAL_GetTick>
 8003386:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338a:	f7fd fa85 	bl	8000898 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b0a      	cmp	r3, #10
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e02f      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 800339c:	f7ff fc04 	bl	8002ba8 <LL_RCC_PLL_IsReady>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f1      	bne.n	800338a <HAL_RCC_OscConfig+0x6b6>
 80033a6:	e028      	b.n	80033fa <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e023      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	f003 0203 	and.w	r2, r3, #3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d115      	bne.n	80033f6 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d10e      	bne.n	80033f6 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d106      	bne.n	80033f6 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3720      	adds	r7, #32
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	11c1808c 	.word	0x11c1808c

08003408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e12c      	b.n	8003676 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800341c:	4b98      	ldr	r3, [pc, #608]	; (8003680 <HAL_RCC_ClockConfig+0x278>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d91b      	bls.n	8003462 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b95      	ldr	r3, [pc, #596]	; (8003680 <HAL_RCC_ClockConfig+0x278>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 0207 	bic.w	r2, r3, #7
 8003432:	4993      	ldr	r1, [pc, #588]	; (8003680 <HAL_RCC_ClockConfig+0x278>)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800343a:	f7fd fa2d 	bl	8000898 <HAL_GetTick>
 800343e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003440:	e008      	b.n	8003454 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003442:	f7fd fa29 	bl	8000898 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e110      	b.n	8003676 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003454:	4b8a      	ldr	r3, [pc, #552]	; (8003680 <HAL_RCC_ClockConfig+0x278>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d1ef      	bne.n	8003442 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d016      	beq.n	800349c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff fb00 	bl	8002a78 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003478:	f7fd fa0e 	bl	8000898 <HAL_GetTick>
 800347c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800347e:	e008      	b.n	8003492 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003480:	f7fd fa0a 	bl	8000898 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e0f1      	b.n	8003676 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003492:	f7ff fbc7 	bl	8002c24 <LL_RCC_IsActiveFlag_HPRE>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f1      	beq.n	8003480 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0320 	and.w	r3, r3, #32
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d016      	beq.n	80034d6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff faf6 	bl	8002a9e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034b2:	f7fd f9f1 	bl	8000898 <HAL_GetTick>
 80034b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034ba:	f7fd f9ed 	bl	8000898 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e0d4      	b.n	8003676 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80034cc:	f7ff fbbb 	bl	8002c46 <LL_RCC_IsActiveFlag_C2HPRE>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f1      	beq.n	80034ba <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d016      	beq.n	8003510 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7ff faee 	bl	8002ac8 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034ec:	f7fd f9d4 	bl	8000898 <HAL_GetTick>
 80034f0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034f4:	f7fd f9d0 	bl	8000898 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e0b7      	b.n	8003676 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003506:	f7ff fbb0 	bl	8002c6a <LL_RCC_IsActiveFlag_SHDHPRE>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f1      	beq.n	80034f4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d016      	beq.n	800354a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fae7 	bl	8002af4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003526:	f7fd f9b7 	bl	8000898 <HAL_GetTick>
 800352a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800352c:	e008      	b.n	8003540 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800352e:	f7fd f9b3 	bl	8000898 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e09a      	b.n	8003676 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003540:	f7ff fba5 	bl	8002c8e <LL_RCC_IsActiveFlag_PPRE1>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f1      	beq.n	800352e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d017      	beq.n	8003586 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff fadc 	bl	8002b1a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003562:	f7fd f999 	bl	8000898 <HAL_GetTick>
 8003566:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003568:	e008      	b.n	800357c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800356a:	f7fd f995 	bl	8000898 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e07c      	b.n	8003676 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800357c:	f7ff fb98 	bl	8002cb0 <LL_RCC_IsActiveFlag_PPRE2>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f1      	beq.n	800356a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d043      	beq.n	800361a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b02      	cmp	r3, #2
 8003598:	d106      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800359a:	f7ff f954 	bl	8002846 <LL_RCC_HSE_IsReady>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d11e      	bne.n	80035e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e066      	b.n	8003676 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d106      	bne.n	80035be <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80035b0:	f7ff fafa 	bl	8002ba8 <LL_RCC_PLL_IsReady>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d113      	bne.n	80035e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e05b      	b.n	8003676 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d106      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80035c6:	f7ff f9ee 	bl	80029a6 <LL_RCC_MSI_IsReady>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d108      	bne.n	80035e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e050      	b.n	8003676 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80035d4:	f7ff f964 	bl	80028a0 <LL_RCC_HSI_IsReady>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e049      	b.n	8003676 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fa28 	bl	8002a3c <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ec:	f7fd f954 	bl	8000898 <HAL_GetTick>
 80035f0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	e00a      	b.n	800360a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f4:	f7fd f950 	bl	8000898 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e035      	b.n	8003676 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360a:	f7ff fa2a 	bl	8002a62 <LL_RCC_GetSysClkSource>
 800360e:	4602      	mov	r2, r0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	429a      	cmp	r2, r3
 8003618:	d1ec      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800361a:	4b19      	ldr	r3, [pc, #100]	; (8003680 <HAL_RCC_ClockConfig+0x278>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d21b      	bcs.n	8003660 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003628:	4b15      	ldr	r3, [pc, #84]	; (8003680 <HAL_RCC_ClockConfig+0x278>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f023 0207 	bic.w	r2, r3, #7
 8003630:	4913      	ldr	r1, [pc, #76]	; (8003680 <HAL_RCC_ClockConfig+0x278>)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	4313      	orrs	r3, r2
 8003636:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003638:	f7fd f92e 	bl	8000898 <HAL_GetTick>
 800363c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363e:	e008      	b.n	8003652 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003640:	f7fd f92a 	bl	8000898 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e011      	b.n	8003676 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003652:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <HAL_RCC_ClockConfig+0x278>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d1ef      	bne.n	8003640 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003660:	f000 f8b4 	bl	80037cc <HAL_RCC_GetHCLKFreq>
 8003664:	4603      	mov	r3, r0
 8003666:	4a07      	ldr	r2, [pc, #28]	; (8003684 <HAL_RCC_ClockConfig+0x27c>)
 8003668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800366a:	4b07      	ldr	r3, [pc, #28]	; (8003688 <HAL_RCC_ClockConfig+0x280>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f7fd f8c6 	bl	8000800 <HAL_InitTick>
 8003674:	4603      	mov	r3, r0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	58004000 	.word	0x58004000
 8003684:	200000e8 	.word	0x200000e8
 8003688:	200000ec 	.word	0x200000ec

0800368c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800368c:	b590      	push	{r4, r7, lr}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800369a:	f7ff f9e2 	bl	8002a62 <LL_RCC_GetSysClkSource>
 800369e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036a0:	f7ff fab5 	bl	8002c0e <LL_RCC_PLL_GetMainSource>
 80036a4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x2c>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	d139      	bne.n	8003726 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d136      	bne.n	8003726 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80036b8:	f7ff f985 	bl	80029c6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d115      	bne.n	80036ee <HAL_RCC_GetSysClockFreq+0x62>
 80036c2:	f7ff f980 	bl	80029c6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d106      	bne.n	80036da <HAL_RCC_GetSysClockFreq+0x4e>
 80036cc:	f7ff f98b 	bl	80029e6 <LL_RCC_MSI_GetRange>
 80036d0:	4603      	mov	r3, r0
 80036d2:	0a1b      	lsrs	r3, r3, #8
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	e005      	b.n	80036e6 <HAL_RCC_GetSysClockFreq+0x5a>
 80036da:	f7ff f98f 	bl	80029fc <LL_RCC_MSI_GetRangeAfterStandby>
 80036de:	4603      	mov	r3, r0
 80036e0:	0a1b      	lsrs	r3, r3, #8
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	4a36      	ldr	r2, [pc, #216]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x134>)
 80036e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ec:	e014      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x8c>
 80036ee:	f7ff f96a 	bl	80029c6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d106      	bne.n	8003706 <HAL_RCC_GetSysClockFreq+0x7a>
 80036f8:	f7ff f975 	bl	80029e6 <LL_RCC_MSI_GetRange>
 80036fc:	4603      	mov	r3, r0
 80036fe:	091b      	lsrs	r3, r3, #4
 8003700:	f003 030f 	and.w	r3, r3, #15
 8003704:	e005      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x86>
 8003706:	f7ff f979 	bl	80029fc <LL_RCC_MSI_GetRangeAfterStandby>
 800370a:	4603      	mov	r3, r0
 800370c:	091b      	lsrs	r3, r3, #4
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	4a2b      	ldr	r2, [pc, #172]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x134>)
 8003714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003718:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d115      	bne.n	800374c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003724:	e012      	b.n	800374c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b04      	cmp	r3, #4
 800372a:	d102      	bne.n	8003732 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800372c:	4b25      	ldr	r3, [pc, #148]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x138>)
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	e00c      	b.n	800374c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b08      	cmp	r3, #8
 8003736:	d109      	bne.n	800374c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003738:	f7ff f858 	bl	80027ec <LL_RCC_HSE_IsEnabledDiv2>
 800373c:	4603      	mov	r3, r0
 800373e:	2b01      	cmp	r3, #1
 8003740:	d102      	bne.n	8003748 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003742:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	e001      	b.n	800374c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003748:	4b1f      	ldr	r3, [pc, #124]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800374a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800374c:	f7ff f989 	bl	8002a62 <LL_RCC_GetSysClkSource>
 8003750:	4603      	mov	r3, r0
 8003752:	2b0c      	cmp	r3, #12
 8003754:	d12f      	bne.n	80037b6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003756:	f7ff fa5a 	bl	8002c0e <LL_RCC_PLL_GetMainSource>
 800375a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d003      	beq.n	800376a <HAL_RCC_GetSysClockFreq+0xde>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b03      	cmp	r3, #3
 8003766:	d003      	beq.n	8003770 <HAL_RCC_GetSysClockFreq+0xe4>
 8003768:	e00d      	b.n	8003786 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800376a:	4b16      	ldr	r3, [pc, #88]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x138>)
 800376c:	60fb      	str	r3, [r7, #12]
        break;
 800376e:	e00d      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003770:	f7ff f83c 	bl	80027ec <LL_RCC_HSE_IsEnabledDiv2>
 8003774:	4603      	mov	r3, r0
 8003776:	2b01      	cmp	r3, #1
 8003778:	d102      	bne.n	8003780 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800377a:	4b12      	ldr	r3, [pc, #72]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x138>)
 800377c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800377e:	e005      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003780:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003782:	60fb      	str	r3, [r7, #12]
        break;
 8003784:	e002      	b.n	800378c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	60fb      	str	r3, [r7, #12]
        break;
 800378a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800378c:	f7ff fa1d 	bl	8002bca <LL_RCC_PLL_GetN>
 8003790:	4602      	mov	r2, r0
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	fb03 f402 	mul.w	r4, r3, r2
 8003798:	f7ff fa2e 	bl	8002bf8 <LL_RCC_PLL_GetDivider>
 800379c:	4603      	mov	r3, r0
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	3301      	adds	r3, #1
 80037a2:	fbb4 f4f3 	udiv	r4, r4, r3
 80037a6:	f7ff fa1c 	bl	8002be2 <LL_RCC_PLL_GetR>
 80037aa:	4603      	mov	r3, r0
 80037ac:	0f5b      	lsrs	r3, r3, #29
 80037ae:	3301      	adds	r3, #1
 80037b0:	fbb4 f3f3 	udiv	r3, r4, r3
 80037b4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80037b6:	697b      	ldr	r3, [r7, #20]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	371c      	adds	r7, #28
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd90      	pop	{r4, r7, pc}
 80037c0:	08003e54 	.word	0x08003e54
 80037c4:	00f42400 	.word	0x00f42400
 80037c8:	01e84800 	.word	0x01e84800

080037cc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037cc:	b598      	push	{r3, r4, r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80037d0:	f7ff ff5c 	bl	800368c <HAL_RCC_GetSysClockFreq>
 80037d4:	4604      	mov	r4, r0
 80037d6:	f7ff f9b3 	bl	8002b40 <LL_RCC_GetAHBPrescaler>
 80037da:	4603      	mov	r3, r0
 80037dc:	091b      	lsrs	r3, r3, #4
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	4a03      	ldr	r2, [pc, #12]	; (80037f0 <HAL_RCC_GetHCLKFreq+0x24>)
 80037e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	bd98      	pop	{r3, r4, r7, pc}
 80037f0:	08003e14 	.word	0x08003e14

080037f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80037f4:	b590      	push	{r4, r7, lr}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	091b      	lsrs	r3, r3, #4
 8003800:	f003 030f 	and.w	r3, r3, #15
 8003804:	4a10      	ldr	r2, [pc, #64]	; (8003848 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800380a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800380c:	f7ff f9a3 	bl	8002b56 <LL_RCC_GetAHB3Prescaler>
 8003810:	4603      	mov	r3, r0
 8003812:	091b      	lsrs	r3, r3, #4
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	4a0c      	ldr	r2, [pc, #48]	; (800384c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800381a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	fbb2 f3f3 	udiv	r3, r2, r3
 8003824:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	4a09      	ldr	r2, [pc, #36]	; (8003850 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	0c9c      	lsrs	r4, r3, #18
 8003830:	f7fe ff50 	bl	80026d4 <HAL_PWREx_GetVoltageRange>
 8003834:	4603      	mov	r3, r0
 8003836:	4619      	mov	r1, r3
 8003838:	4620      	mov	r0, r4
 800383a:	f000 f80b 	bl	8003854 <RCC_SetFlashLatency>
 800383e:	4603      	mov	r3, r0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	bd90      	pop	{r4, r7, pc}
 8003848:	08003e54 	.word	0x08003e54
 800384c:	08003e14 	.word	0x08003e14
 8003850:	431bde83 	.word	0x431bde83

08003854 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b08e      	sub	sp, #56	; 0x38
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800385e:	4a3c      	ldr	r2, [pc, #240]	; (8003950 <RCC_SetFlashLatency+0xfc>)
 8003860:	f107 0320 	add.w	r3, r7, #32
 8003864:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003868:	6018      	str	r0, [r3, #0]
 800386a:	3304      	adds	r3, #4
 800386c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800386e:	4a39      	ldr	r2, [pc, #228]	; (8003954 <RCC_SetFlashLatency+0x100>)
 8003870:	f107 0318 	add.w	r3, r7, #24
 8003874:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003878:	6018      	str	r0, [r3, #0]
 800387a:	3304      	adds	r3, #4
 800387c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800387e:	4a36      	ldr	r2, [pc, #216]	; (8003958 <RCC_SetFlashLatency+0x104>)
 8003880:	f107 030c 	add.w	r3, r7, #12
 8003884:	ca07      	ldmia	r2, {r0, r1, r2}
 8003886:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800388a:	2300      	movs	r3, #0
 800388c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003894:	d11d      	bne.n	80038d2 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003896:	2300      	movs	r3, #0
 8003898:	633b      	str	r3, [r7, #48]	; 0x30
 800389a:	e016      	b.n	80038ca <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80038a4:	4413      	add	r3, r2
 80038a6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80038aa:	461a      	mov	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d808      	bhi.n	80038c4 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80038b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80038ba:	4413      	add	r3, r2
 80038bc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80038c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038c2:	e023      	b.n	800390c <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c6:	3301      	adds	r3, #1
 80038c8:	633b      	str	r3, [r7, #48]	; 0x30
 80038ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d9e5      	bls.n	800389c <RCC_SetFlashLatency+0x48>
 80038d0:	e01c      	b.n	800390c <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80038d2:	2300      	movs	r3, #0
 80038d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038d6:	e016      	b.n	8003906 <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80038d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80038e0:	4413      	add	r3, r2
 80038e2:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80038e6:	461a      	mov	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d808      	bhi.n	8003900 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80038ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80038f6:	4413      	add	r3, r2
 80038f8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80038fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038fe:	e005      	b.n	800390c <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003902:	3301      	adds	r3, #1
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003908:	2b02      	cmp	r3, #2
 800390a:	d9e5      	bls.n	80038d8 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800390c:	4b13      	ldr	r3, [pc, #76]	; (800395c <RCC_SetFlashLatency+0x108>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f023 0207 	bic.w	r2, r3, #7
 8003914:	4911      	ldr	r1, [pc, #68]	; (800395c <RCC_SetFlashLatency+0x108>)
 8003916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003918:	4313      	orrs	r3, r2
 800391a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800391c:	f7fc ffbc 	bl	8000898 <HAL_GetTick>
 8003920:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003922:	e008      	b.n	8003936 <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003924:	f7fc ffb8 	bl	8000898 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e007      	b.n	8003946 <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003936:	4b09      	ldr	r3, [pc, #36]	; (800395c <RCC_SetFlashLatency+0x108>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003940:	429a      	cmp	r2, r3
 8003942:	d1ef      	bne.n	8003924 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3738      	adds	r7, #56	; 0x38
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	08003df0 	.word	0x08003df0
 8003954:	08003df8 	.word	0x08003df8
 8003958:	08003e00 	.word	0x08003e00
 800395c:	58004000 	.word	0x58004000

08003960 <LL_RCC_LSE_IsReady>:
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b02      	cmp	r3, #2
 8003972:	d101      	bne.n	8003978 <LL_RCC_LSE_IsReady+0x18>
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <LL_RCC_LSE_IsReady+0x1a>
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr

08003982 <LL_RCC_SetUSARTClockSource>:
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800398a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800398e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	0c1b      	lsrs	r3, r3, #16
 8003996:	43db      	mvns	r3, r3
 8003998:	401a      	ands	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	b29b      	uxth	r3, r3
 800399e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr

080039b2 <LL_RCC_SetI2SClockSource>:
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80039ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr

080039dc <LL_RCC_SetLPUARTClockSource>:
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80039e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr

08003a06 <LL_RCC_SetI2CClockSource>:
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a12:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	091b      	lsrs	r3, r3, #4
 8003a1a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	401a      	ands	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr

08003a3e <LL_RCC_SetLPTIMClockSource>:
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	0c1b      	lsrs	r3, r3, #16
 8003a52:	041b      	lsls	r3, r3, #16
 8003a54:	43db      	mvns	r3, r3
 8003a56:	401a      	ands	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	041b      	lsls	r3, r3, #16
 8003a5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr

08003a70 <LL_RCC_SetRNGClockSource>:
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a80:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003a84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr

08003a9a <LL_RCC_SetADCClockSource>:
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003aae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr

08003ac4 <LL_RCC_SetRTCClockSource>:
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ad8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr

08003aee <LL_RCC_GetRTCClockSource>:
{
 8003aee:	b480      	push	{r7}
 8003af0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr

08003b06 <LL_RCC_ForceBackupDomainReset>:
{
 8003b06:	b480      	push	{r7}
 8003b08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b1e:	bf00      	nop
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bc80      	pop	{r7}
 8003b24:	4770      	bx	lr

08003b26 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003b26:	b480      	push	{r7}
 8003b28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b3e:	bf00      	nop
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr
	...

08003b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003b54:	2300      	movs	r3, #0
 8003b56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003b58:	2300      	movs	r3, #0
 8003b5a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d058      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003b68:	f7fe fd8e 	bl	8002688 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b6c:	f7fc fe94 	bl	8000898 <HAL_GetTick>
 8003b70:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003b72:	e009      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b74:	f7fc fe90 	bl	8000898 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d902      	bls.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	74fb      	strb	r3, [r7, #19]
        break;
 8003b86:	e006      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003b88:	4b7b      	ldr	r3, [pc, #492]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b94:	d1ee      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003b96:	7cfb      	ldrb	r3, [r7, #19]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d13c      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003b9c:	f7ff ffa7 	bl	8003aee <LL_RCC_GetRTCClockSource>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d00f      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bb8:	f7ff ffa5 	bl	8003b06 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bbc:	f7ff ffb3 	bl	8003b26 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d014      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7fc fe60 	bl	8000898 <HAL_GetTick>
 8003bd8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003bda:	e00b      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bdc:	f7fc fe5c 	bl	8000898 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d902      	bls.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	74fb      	strb	r3, [r7, #19]
            break;
 8003bf2:	e004      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003bf4:	f7ff feb4 	bl	8003960 <LL_RCC_LSE_IsReady>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d1ee      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003bfe:	7cfb      	ldrb	r3, [r7, #19]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d105      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff ff5b 	bl	8003ac4 <LL_RCC_SetRTCClockSource>
 8003c0e:	e004      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c10:	7cfb      	ldrb	r3, [r7, #19]
 8003c12:	74bb      	strb	r3, [r7, #18]
 8003c14:	e001      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c16:	7cfb      	ldrb	r3, [r7, #19]
 8003c18:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d004      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff fea9 	bl	8003982 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d004      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff fe9e 	bl	8003982 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d004      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7ff fec0 	bl	80039dc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d004      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff fee6 	bl	8003a3e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d004      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff fedb 	bl	8003a3e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d004      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff fed0 	bl	8003a3e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d004      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff fea9 	bl	8003a06 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d004      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff fe9e 	bl	8003a06 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d004      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff fe93 	bl	8003a06 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0310 	and.w	r3, r3, #16
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d011      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fe5e 	bl	80039b2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cfe:	d107      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d0e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d010      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff fea5 	bl	8003a70 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d107      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d3c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d011      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff fea3 	bl	8003a9a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d5c:	d107      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d6c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003d6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	58000400 	.word	0x58000400

08003d7c <__libc_init_array>:
 8003d7c:	b570      	push	{r4, r5, r6, lr}
 8003d7e:	4d0d      	ldr	r5, [pc, #52]	; (8003db4 <__libc_init_array+0x38>)
 8003d80:	4c0d      	ldr	r4, [pc, #52]	; (8003db8 <__libc_init_array+0x3c>)
 8003d82:	1b64      	subs	r4, r4, r5
 8003d84:	10a4      	asrs	r4, r4, #2
 8003d86:	2600      	movs	r6, #0
 8003d88:	42a6      	cmp	r6, r4
 8003d8a:	d109      	bne.n	8003da0 <__libc_init_array+0x24>
 8003d8c:	4d0b      	ldr	r5, [pc, #44]	; (8003dbc <__libc_init_array+0x40>)
 8003d8e:	4c0c      	ldr	r4, [pc, #48]	; (8003dc0 <__libc_init_array+0x44>)
 8003d90:	f000 f820 	bl	8003dd4 <_init>
 8003d94:	1b64      	subs	r4, r4, r5
 8003d96:	10a4      	asrs	r4, r4, #2
 8003d98:	2600      	movs	r6, #0
 8003d9a:	42a6      	cmp	r6, r4
 8003d9c:	d105      	bne.n	8003daa <__libc_init_array+0x2e>
 8003d9e:	bd70      	pop	{r4, r5, r6, pc}
 8003da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da4:	4798      	blx	r3
 8003da6:	3601      	adds	r6, #1
 8003da8:	e7ee      	b.n	8003d88 <__libc_init_array+0xc>
 8003daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dae:	4798      	blx	r3
 8003db0:	3601      	adds	r6, #1
 8003db2:	e7f2      	b.n	8003d9a <__libc_init_array+0x1e>
 8003db4:	08003e98 	.word	0x08003e98
 8003db8:	08003e98 	.word	0x08003e98
 8003dbc:	08003e98 	.word	0x08003e98
 8003dc0:	08003e9c 	.word	0x08003e9c

08003dc4 <memset>:
 8003dc4:	4402      	add	r2, r0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d100      	bne.n	8003dce <memset+0xa>
 8003dcc:	4770      	bx	lr
 8003dce:	f803 1b01 	strb.w	r1, [r3], #1
 8003dd2:	e7f9      	b.n	8003dc8 <memset+0x4>

08003dd4 <_init>:
 8003dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd6:	bf00      	nop
 8003dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dda:	bc08      	pop	{r3}
 8003ddc:	469e      	mov	lr, r3
 8003dde:	4770      	bx	lr

08003de0 <_fini>:
 8003de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de2:	bf00      	nop
 8003de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003de6:	bc08      	pop	{r3}
 8003de8:	469e      	mov	lr, r3
 8003dea:	4770      	bx	lr
 8003dec:	0000      	movs	r0, r0
	...
