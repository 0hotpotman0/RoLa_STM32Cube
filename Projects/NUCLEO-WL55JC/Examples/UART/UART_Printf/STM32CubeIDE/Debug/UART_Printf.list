
UART_Printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040e0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08004220  08004220  00014220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004428  08004428  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08004428  08004428  00014428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004430  08004430  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004430  08004430  00014430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004438  08004438  00014438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000080  080044c0  00020080  2**2
                  ALLOC
 10 RAM1_region   00000000  20000150  20000150  00020080  2**0
                  CONTENTS
 11 RAM2_region   00000000  20008000  20008000  00020080  2**0
                  CONTENTS
 12 ._user_heap_stack 00000600  20000150  20000150  00020150  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 14 .debug_line   0000e003  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00010912  00000000  00000000  0002e0ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002621  00000000  00000000  0003e9bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001040  00000000  00000000  00040fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b16b7  00000000  00000000  00042020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00000f68  00000000  00000000  000f36d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001d321  00000000  00000000  000f4640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00111961  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004a54  00000000  00000000  001119b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	08004208 	.word	0x08004208

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	08004208 	.word	0x08004208

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96c 	b.w	8000510 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	468e      	mov	lr, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	f040 8082 	bne.w	8000366 <__udivmoddi4+0x116>
 8000262:	428a      	cmp	r2, r1
 8000264:	4617      	mov	r7, r2
 8000266:	d946      	bls.n	80002f6 <__udivmoddi4+0xa6>
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x32>
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa05 f302 	lsl.w	r3, r5, r2
 8000276:	fa20 f101 	lsr.w	r1, r0, r1
 800027a:	4097      	lsls	r7, r2
 800027c:	ea41 0e03 	orr.w	lr, r1, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000286:	0c23      	lsrs	r3, r4, #16
 8000288:	fbbe fcf8 	udiv	ip, lr, r8
 800028c:	b2b9      	uxth	r1, r7
 800028e:	fb08 ee1c 	mls	lr, r8, ip, lr
 8000292:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000296:	fb0c f001 	mul.w	r0, ip, r1
 800029a:	4298      	cmp	r0, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f10c 35ff 	add.w	r5, ip, #4294967295
 80002a4:	f080 8116 	bcs.w	80004d4 <__udivmoddi4+0x284>
 80002a8:	4298      	cmp	r0, r3
 80002aa:	f240 8113 	bls.w	80004d4 <__udivmoddi4+0x284>
 80002ae:	f1ac 0c02 	sub.w	ip, ip, #2
 80002b2:	443b      	add	r3, r7
 80002b4:	1a1b      	subs	r3, r3, r0
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f101 	mul.w	r1, r0, r1
 80002c8:	42a1      	cmp	r1, r4
 80002ca:	d909      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002cc:	193c      	adds	r4, r7, r4
 80002ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d2:	f080 8101 	bcs.w	80004d8 <__udivmoddi4+0x288>
 80002d6:	42a1      	cmp	r1, r4
 80002d8:	f240 80fe 	bls.w	80004d8 <__udivmoddi4+0x288>
 80002dc:	3802      	subs	r0, #2
 80002de:	443c      	add	r4, r7
 80002e0:	1a64      	subs	r4, r4, r1
 80002e2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40d4      	lsrs	r4, r2
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xaa>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f282 	clz	r2, r2
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d14f      	bne.n	80003a2 <__udivmoddi4+0x152>
 8000302:	1bcb      	subs	r3, r1, r7
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f f887 	uxth.w	r8, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb0e 331c 	mls	r3, lr, ip, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb08 f30c 	mul.w	r3, r8, ip
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000324:	197d      	adds	r5, r7, r5
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0xe2>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80e7 	bhi.w	8000500 <__udivmoddi4+0x2b0>
 8000332:	4684      	mov	ip, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0fe 	udiv	r0, r5, lr
 800033c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x10c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x10a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80d7 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e7c0      	b.n	80002e8 <__udivmoddi4+0x98>
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80af 	beq.w	80004ce <__udivmoddi4+0x27e>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d14b      	bne.n	800041c <__udivmoddi4+0x1cc>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0x13e>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80b7 	bhi.w	80004fc <__udivmoddi4+0x2ac>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0303 	sbc.w	r3, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	469e      	mov	lr, r3
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0aa      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800039c:	e9c6 4e00 	strd	r4, lr, [r6]
 80003a0:	e7a7      	b.n	80002f2 <__udivmoddi4+0xa2>
 80003a2:	f1c2 0c20 	rsb	ip, r2, #32
 80003a6:	fa01 f302 	lsl.w	r3, r1, r2
 80003aa:	4097      	lsls	r7, r2
 80003ac:	fa20 f00c 	lsr.w	r0, r0, ip
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	fa21 fc0c 	lsr.w	ip, r1, ip
 80003b8:	4318      	orrs	r0, r3
 80003ba:	fbbc f1fe 	udiv	r1, ip, lr
 80003be:	0c05      	lsrs	r5, r0, #16
 80003c0:	fb0e cc11 	mls	ip, lr, r1, ip
 80003c4:	fa1f f887 	uxth.w	r8, r7
 80003c8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003cc:	fb01 f308 	mul.w	r3, r1, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	fa04 f402 	lsl.w	r4, r4, r2
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x19c>
 80003d8:	197d      	adds	r5, r7, r5
 80003da:	f101 3cff 	add.w	ip, r1, #4294967295
 80003de:	f080 808b 	bcs.w	80004f8 <__udivmoddi4+0x2a8>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	f240 8088 	bls.w	80004f8 <__udivmoddi4+0x2a8>
 80003e8:	3902      	subs	r1, #2
 80003ea:	443d      	add	r5, r7
 80003ec:	1aeb      	subs	r3, r5, r3
 80003ee:	b285      	uxth	r5, r0
 80003f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb00 f308 	mul.w	r3, r0, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x1c4>
 8000404:	197d      	adds	r5, r7, r5
 8000406:	f100 3cff 	add.w	ip, r0, #4294967295
 800040a:	d271      	bcs.n	80004f0 <__udivmoddi4+0x2a0>
 800040c:	42ab      	cmp	r3, r5
 800040e:	d96f      	bls.n	80004f0 <__udivmoddi4+0x2a0>
 8000410:	3802      	subs	r0, #2
 8000412:	443d      	add	r5, r7
 8000414:	1aeb      	subs	r3, r5, r3
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	e778      	b.n	800030e <__udivmoddi4+0xbe>
 800041c:	f1c1 0c20 	rsb	ip, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f70c 	lsr.w	r7, r2, ip
 8000426:	431f      	orrs	r7, r3
 8000428:	fa20 f40c 	lsr.w	r4, r0, ip
 800042c:	fa05 f301 	lsl.w	r3, r5, r1
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	fa25 f50c 	lsr.w	r5, r5, ip
 8000438:	431c      	orrs	r4, r3
 800043a:	0c23      	lsrs	r3, r4, #16
 800043c:	fbb5 f9fe 	udiv	r9, r5, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 5519 	mls	r5, lr, r9, r5
 8000448:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 800044c:	fb09 fa08 	mul.w	sl, r9, r8
 8000450:	45aa      	cmp	sl, r5
 8000452:	fa02 f201 	lsl.w	r2, r2, r1
 8000456:	fa00 f301 	lsl.w	r3, r0, r1
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x21e>
 800045c:	197d      	adds	r5, r7, r5
 800045e:	f109 30ff 	add.w	r0, r9, #4294967295
 8000462:	d247      	bcs.n	80004f4 <__udivmoddi4+0x2a4>
 8000464:	45aa      	cmp	sl, r5
 8000466:	d945      	bls.n	80004f4 <__udivmoddi4+0x2a4>
 8000468:	f1a9 0902 	sub.w	r9, r9, #2
 800046c:	443d      	add	r5, r7
 800046e:	eba5 050a 	sub.w	r5, r5, sl
 8000472:	b2a4      	uxth	r4, r4
 8000474:	fbb5 f0fe 	udiv	r0, r5, lr
 8000478:	fb0e 5510 	mls	r5, lr, r0, r5
 800047c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000480:	fb00 f808 	mul.w	r8, r0, r8
 8000484:	45a0      	cmp	r8, r4
 8000486:	d907      	bls.n	8000498 <__udivmoddi4+0x248>
 8000488:	193c      	adds	r4, r7, r4
 800048a:	f100 35ff 	add.w	r5, r0, #4294967295
 800048e:	d22d      	bcs.n	80004ec <__udivmoddi4+0x29c>
 8000490:	45a0      	cmp	r8, r4
 8000492:	d92b      	bls.n	80004ec <__udivmoddi4+0x29c>
 8000494:	3802      	subs	r0, #2
 8000496:	443c      	add	r4, r7
 8000498:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049c:	eba4 0408 	sub.w	r4, r4, r8
 80004a0:	fba0 8902 	umull	r8, r9, r0, r2
 80004a4:	454c      	cmp	r4, r9
 80004a6:	46c6      	mov	lr, r8
 80004a8:	464d      	mov	r5, r9
 80004aa:	d319      	bcc.n	80004e0 <__udivmoddi4+0x290>
 80004ac:	d016      	beq.n	80004dc <__udivmoddi4+0x28c>
 80004ae:	b15e      	cbz	r6, 80004c8 <__udivmoddi4+0x278>
 80004b0:	ebb3 020e 	subs.w	r2, r3, lr
 80004b4:	eb64 0405 	sbc.w	r4, r4, r5
 80004b8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004bc:	40ca      	lsrs	r2, r1
 80004be:	ea4c 0202 	orr.w	r2, ip, r2
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	e9c6 2400 	strd	r2, r4, [r6]
 80004c8:	2100      	movs	r1, #0
 80004ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ce:	4631      	mov	r1, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e70e      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004d4:	46ac      	mov	ip, r5
 80004d6:	e6ed      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d8:	4618      	mov	r0, r3
 80004da:	e701      	b.n	80002e0 <__udivmoddi4+0x90>
 80004dc:	4543      	cmp	r3, r8
 80004de:	d2e6      	bcs.n	80004ae <__udivmoddi4+0x25e>
 80004e0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e4:	eb69 0507 	sbc.w	r5, r9, r7
 80004e8:	3801      	subs	r0, #1
 80004ea:	e7e0      	b.n	80004ae <__udivmoddi4+0x25e>
 80004ec:	4628      	mov	r0, r5
 80004ee:	e7d3      	b.n	8000498 <__udivmoddi4+0x248>
 80004f0:	4660      	mov	r0, ip
 80004f2:	e78f      	b.n	8000414 <__udivmoddi4+0x1c4>
 80004f4:	4681      	mov	r9, r0
 80004f6:	e7ba      	b.n	800046e <__udivmoddi4+0x21e>
 80004f8:	4661      	mov	r1, ip
 80004fa:	e777      	b.n	80003ec <__udivmoddi4+0x19c>
 80004fc:	4608      	mov	r0, r1
 80004fe:	e74b      	b.n	8000398 <__udivmoddi4+0x148>
 8000500:	f1ac 0c02 	sub.w	ip, ip, #2
 8000504:	443d      	add	r5, r7
 8000506:	e715      	b.n	8000334 <__udivmoddi4+0xe4>
 8000508:	3802      	subs	r0, #2
 800050a:	443c      	add	r4, r7
 800050c:	e726      	b.n	800035c <__udivmoddi4+0x10c>
 800050e:	bf00      	nop

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000514:	480d      	ldr	r0, [pc, #52]	; (800054c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000516:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000518:	f000 fad0 	bl	8000abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800051c:	480c      	ldr	r0, [pc, #48]	; (8000550 <LoopForever+0x6>)
  ldr r1, =_edata
 800051e:	490d      	ldr	r1, [pc, #52]	; (8000554 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000520:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <LoopForever+0xe>)
  movs r3, #0
 8000522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000524:	e002      	b.n	800052c <LoopCopyDataInit>

08000526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052a:	3304      	adds	r3, #4

0800052c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800052c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000530:	d3f9      	bcc.n	8000526 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000532:	4a0a      	ldr	r2, [pc, #40]	; (800055c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000534:	4c0a      	ldr	r4, [pc, #40]	; (8000560 <LoopForever+0x16>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000538:	e001      	b.n	800053e <LoopFillZerobss>

0800053a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800053c:	3204      	adds	r2, #4

0800053e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000540:	d3fb      	bcc.n	800053a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000542:	f002 fee3 	bl	800330c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000546:	f000 f827 	bl	8000598 <main>

0800054a <LoopForever>:

LoopForever:
    b LoopForever
 800054a:	e7fe      	b.n	800054a <LoopForever>
  ldr   r0, =_estack
 800054c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000554:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000558:	08004440 	.word	0x08004440
  ldr r2, =_sbss
 800055c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000560:	20000150 	.word	0x20000150

08000564 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000564:	e7fe      	b.n	8000564 <ADC_IRQHandler>

08000566 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000566:	b480      	push	{r7}
 8000568:	b085      	sub	sp, #20
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800056e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000572:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000574:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4313      	orrs	r3, r2
 800057c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800057e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4013      	ands	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800058a:	68fb      	ldr	r3, [r7, #12]
}
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr
	...

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fa94 	bl	8000ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f81c 	bl	80005dc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Initialize BSP Led for LED3 */
  BSP_LED_Init(LED3);
 80005a4:	2002      	movs	r0, #2
 80005a6:	f000 fa35 	bl	8000a14 <BSP_LED_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 f8c5 	bl	8000738 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ae:	f000 f875 	bl	800069c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Output a message on Hyperterminal using printf function */
  printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 80005b2:	4807      	ldr	r0, [pc, #28]	; (80005d0 <main+0x38>)
 80005b4:	f002 fed6 	bl	8003364 <iprintf>
  printf("** Test finished successfully. ** \n\r");
 80005b8:	4806      	ldr	r0, [pc, #24]	; (80005d4 <main+0x3c>)
 80005ba:	f002 fed3 	bl	8003364 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("testing \n\r");
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <main+0x40>)
 80005c0:	f002 fed0 	bl	8003364 <iprintf>
	  HAL_Delay(1000);
 80005c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c8:	f000 faf4 	bl	8000bb4 <HAL_Delay>
	  printf("testing \n\r");
 80005cc:	e7f7      	b.n	80005be <main+0x26>
 80005ce:	bf00      	nop
 80005d0:	08004220 	.word	0x08004220
 80005d4:	08004270 	.word	0x08004270
 80005d8:	08004298 	.word	0x08004298

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b09a      	sub	sp, #104	; 0x68
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2248      	movs	r2, #72	; 0x48
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 feb2 	bl	8003354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]
 80005fe:	615a      	str	r2, [r3, #20]
 8000600:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000602:	4b25      	ldr	r3, [pc, #148]	; (8000698 <SystemClock_Config+0xbc>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800060a:	4a23      	ldr	r2, [pc, #140]	; (8000698 <SystemClock_Config+0xbc>)
 800060c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000610:	6013      	str	r3, [r2, #0]
 8000612:	4b21      	ldr	r3, [pc, #132]	; (8000698 <SystemClock_Config+0xbc>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800061e:	2320      	movs	r3, #32
 8000620:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000622:	2301      	movs	r3, #1
 8000624:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000626:	2300      	movs	r3, #0
 8000628:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 800062a:	2380      	movs	r3, #128	; 0x80
 800062c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000632:	2301      	movs	r3, #1
 8000634:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000636:	2330      	movs	r3, #48	; 0x30
 8000638:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 24;
 800063a:	2318      	movs	r3, #24
 800063c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000642:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000644:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000648:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800064a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800064e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0320 	add.w	r3, r7, #32
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fffd 	bl	8001654 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000660:	f000 f884 	bl	800076c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000664:	234f      	movs	r3, #79	; 0x4f
 8000666:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2303      	movs	r3, #3
 800066a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2102      	movs	r1, #2
 8000680:	4618      	mov	r0, r3
 8000682:	f001 fb81 	bl	8001d88 <HAL_RCC_ClockConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800068c:	f000 f86e 	bl	800076c <Error_Handler>
  }
}
 8000690:	bf00      	nop
 8000692:	3768      	adds	r7, #104	; 0x68
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	58000400 	.word	0x58000400

0800069c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006a2:	4a24      	ldr	r2, [pc, #144]	; (8000734 <MX_USART2_UART_Init+0x98>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006a6:	4b22      	ldr	r3, [pc, #136]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b20      	ldr	r3, [pc, #128]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 80006ba:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006bc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80006c0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c2:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006c4:	220c      	movs	r2, #12
 80006c6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c8:	4b19      	ldr	r3, [pc, #100]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ce:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006dc:	2200      	movs	r2, #0
 80006de:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e6:	4812      	ldr	r0, [pc, #72]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006e8:	f002 f84d 	bl	8002786 <HAL_UART_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80006f2:	f000 f83b 	bl	800076c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f6:	2100      	movs	r1, #0
 80006f8:	480d      	ldr	r0, [pc, #52]	; (8000730 <MX_USART2_UART_Init+0x94>)
 80006fa:	f002 fd1f 	bl	800313c <HAL_UARTEx_SetTxFifoThreshold>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8000704:	f000 f832 	bl	800076c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000708:	2100      	movs	r1, #0
 800070a:	4809      	ldr	r0, [pc, #36]	; (8000730 <MX_USART2_UART_Init+0x94>)
 800070c:	f002 fd54 	bl	80031b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8000716:	f000 f829 	bl	800076c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_USART2_UART_Init+0x94>)
 800071c:	f002 fcd6 	bl	80030cc <HAL_UARTEx_DisableFifoMode>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8000726:	f000 f821 	bl	800076c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200000a8 	.word	0x200000a8
 8000734:	40004400 	.word	0x40004400

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	2001      	movs	r0, #1
 800073e:	f7ff ff12 	bl	8000566 <LL_AHB2_GRP1_EnableClock>

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000750:	1d39      	adds	r1, r7, #4
 8000752:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000756:	2201      	movs	r2, #1
 8000758:	4803      	ldr	r0, [pc, #12]	; (8000768 <__io_putchar+0x20>)
 800075a:	f002 f864 	bl	8002826 <HAL_UART_Transmit>

  return ch;
 800075e:	687b      	ldr	r3, [r7, #4]
}
 8000760:	4618      	mov	r0, r3
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000a8 	.word	0x200000a8

0800076c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* Turn LED3 on */
  BSP_LED_On(LED3);
 8000770:	2002      	movs	r0, #2
 8000772:	f000 f989 	bl	8000a88 <BSP_LED_On>
  while (1);
 8000776:	e7fe      	b.n	8000776 <Error_Handler+0xa>

08000778 <LL_AHB2_GRP1_EnableClock>:
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000784:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000786:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4313      	orrs	r3, r2
 800078e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000794:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4013      	ands	r3, r2
 800079a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800079c:	68fb      	ldr	r3, [r7, #12]
}
 800079e:	bf00      	nop
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80007b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80007b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4313      	orrs	r3, r2
 80007be:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80007c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4013      	ands	r3, r2
 80007ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007cc:	68fb      	ldr	r3, [r7, #12]
}
 80007ce:	bf00      	nop
 80007d0:	3714      	adds	r7, #20
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b096      	sub	sp, #88	; 0x58
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2238      	movs	r2, #56	; 0x38
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f002 fda5 	bl	8003354 <memset>
  if(huart->Instance==USART2)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a17      	ldr	r2, [pc, #92]	; (800086c <HAL_UART_MspInit+0x88>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d126      	bne.n	8000862 <HAL_UART_MspInit+0x7e>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000814:	2302      	movs	r3, #2
 8000816:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000818:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800081c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	4618      	mov	r0, r3
 8000824:	f001 fe74 	bl	8002510 <HAL_RCCEx_PeriphCLKConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800082e:	f7ff ff9d 	bl	800076c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000832:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000836:	f7ff ffb7 	bl	80007a8 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2001      	movs	r0, #1
 800083c:	f7ff ff9c 	bl	8000778 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8000840:	230c      	movs	r3, #12
 8000842:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000848:	2301      	movs	r3, #1
 800084a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000850:	2307      	movs	r3, #7
 8000852:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000858:	4619      	mov	r1, r3
 800085a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085e:	f000 faaf 	bl	8000dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000862:	bf00      	nop
 8000864:	3758      	adds	r7, #88	; 0x58
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40004400 	.word	0x40004400

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <HardFault_Handler+0x4>

08000882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr

0800088e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089e:	f000 f96d 	bl	8000b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b086      	sub	sp, #24
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	60f8      	str	r0, [r7, #12]
 80008ae:	60b9      	str	r1, [r7, #8]
 80008b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	e00a      	b.n	80008ce <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008b8:	f3af 8000 	nop.w
 80008bc:	4601      	mov	r1, r0
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	1c5a      	adds	r2, r3, #1
 80008c2:	60ba      	str	r2, [r7, #8]
 80008c4:	b2ca      	uxtb	r2, r1
 80008c6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	3301      	adds	r3, #1
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	697a      	ldr	r2, [r7, #20]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	dbf0      	blt.n	80008b8 <_read+0x12>
	}

return len;
 80008d6:	687b      	ldr	r3, [r7, #4]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	e009      	b.n	8000906 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	1c5a      	adds	r2, r3, #1
 80008f6:	60ba      	str	r2, [r7, #8]
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ff24 	bl	8000748 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	3301      	adds	r3, #1
 8000904:	617b      	str	r3, [r7, #20]
 8000906:	697a      	ldr	r2, [r7, #20]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	429a      	cmp	r2, r3
 800090c:	dbf1      	blt.n	80008f2 <_write+0x12>
	}
	return len;
 800090e:	687b      	ldr	r3, [r7, #4]
}
 8000910:	4618      	mov	r0, r3
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <_close>:

int _close(int file)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	return -1;
 8000920:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000924:	4618      	mov	r0, r3
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr

0800092e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
 8000936:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800093e:	605a      	str	r2, [r3, #4]
	return 0;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <_isatty>:

int _isatty(int file)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	return 1;
 8000954:	2301      	movs	r3, #1
}
 8000956:	4618      	mov	r0, r3
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr

08000960 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
	return 0;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3714      	adds	r7, #20
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000980:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <_sbrk+0x5c>)
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <_sbrk+0x60>)
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize  heap end at first call */
  if (NULL == __sbrk_heap_end)
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <_sbrk+0x64>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d102      	bne.n	800099a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <_sbrk+0x64>)
 8000996:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <_sbrk+0x68>)
 8000998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <_sbrk+0x64>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d207      	bcs.n	80009b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a8:	f002 fcaa 	bl	8003300 <__errno>
 80009ac:	4603      	mov	r3, r0
 80009ae:	220c      	movs	r2, #12
 80009b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	e009      	b.n	80009cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <_sbrk+0x64>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009be:	4b07      	ldr	r3, [pc, #28]	; (80009dc <_sbrk+0x64>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <_sbrk+0x64>)
 80009c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ca:	68fb      	ldr	r3, [r7, #12]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20008000 	.word	0x20008000
 80009d8:	00000400 	.word	0x00000400
 80009dc:	2000009c 	.word	0x2000009c
 80009e0:	20000150 	.word	0x20000150

080009e4 <LL_AHB2_GRP1_EnableClock>:
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4013      	ands	r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a08:	68fb      	ldr	r3, [r7, #12]
}
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr

08000a14 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000a2e:	2002      	movs	r0, #2
 8000a30:	f7ff ffd8 	bl	80009e4 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <BSP_LED_Init+0x6c>)
 8000a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a3c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	; (8000a84 <BSP_LED_Init+0x70>)
 8000a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a52:	f107 020c 	add.w	r2, r7, #12
 8000a56:	4611      	mov	r1, r2
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f000 f9b1 	bl	8000dc0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <BSP_LED_Init+0x70>)
 8000a62:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <BSP_LED_Init+0x6c>)
 8000a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	4619      	mov	r1, r3
 8000a72:	f000 fb05 	bl	8001080 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000a76:	2300      	movs	r3, #0
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3720      	adds	r7, #32
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	080042d0 	.word	0x080042d0
 8000a84:	20000000 	.word	0x20000000

08000a88 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <BSP_LED_On+0x2c>)
 8000a96:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	4a06      	ldr	r2, [pc, #24]	; (8000ab8 <BSP_LED_On+0x30>)
 8000a9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f000 faeb 	bl	8001080 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000aaa:	2300      	movs	r3, #0
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	080042d0 	.word	0x080042d0

08000abc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad2:	2003      	movs	r0, #3
 8000ad4:	f000 f942 	bl	8000d5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000ad8:	f001 fb38 	bl	800214c <HAL_RCC_GetHCLKFreq>
 8000adc:	4603      	mov	r3, r0
 8000ade:	4a09      	ldr	r2, [pc, #36]	; (8000b04 <HAL_Init+0x3c>)
 8000ae0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae2:	200f      	movs	r0, #15
 8000ae4:	f000 f810 	bl	8000b08 <HAL_InitTick>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d002      	beq.n	8000af4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	71fb      	strb	r3, [r7, #7]
 8000af2:	e001      	b.n	8000af8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000af4:	f7ff fe70 	bl	80007d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000af8:	79fb      	ldrb	r3, [r7, #7]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	2000000c 	.word	0x2000000c

08000b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b10:	2300      	movs	r3, #0
 8000b12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <HAL_InitTick+0x6c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d024      	beq.n	8000b66 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b1c:	f001 fb16 	bl	800214c <HAL_RCC_GetHCLKFreq>
 8000b20:	4602      	mov	r2, r0
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_InitTick+0x6c>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	4619      	mov	r1, r3
 8000b28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 f936 	bl	8000da6 <HAL_SYSTICK_Config>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d10f      	bne.n	8000b60 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b0f      	cmp	r3, #15
 8000b44:	d809      	bhi.n	8000b5a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b46:	2200      	movs	r2, #0
 8000b48:	6879      	ldr	r1, [r7, #4]
 8000b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4e:	f000 f910 	bl	8000d72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b52:	4a09      	ldr	r2, [pc, #36]	; (8000b78 <HAL_InitTick+0x70>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6013      	str	r3, [r2, #0]
 8000b58:	e007      	b.n	8000b6a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	73fb      	strb	r3, [r7, #15]
 8000b5e:	e004      	b.n	8000b6a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
 8000b64:	e001      	b.n	8000b6a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000014 	.word	0x20000014
 8000b78:	20000010 	.word	0x20000010

08000b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_IncTick+0x1c>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_IncTick+0x20>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a03      	ldr	r2, [pc, #12]	; (8000b9c <HAL_IncTick+0x20>)
 8000b8e:	6013      	str	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr
 8000b98:	20000014 	.word	0x20000014
 8000b9c:	20000138 	.word	0x20000138

08000ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba4:	4b02      	ldr	r3, [pc, #8]	; (8000bb0 <HAL_GetTick+0x10>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	20000138 	.word	0x20000138

08000bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bbc:	f7ff fff0 	bl	8000ba0 <HAL_GetTick>
 8000bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bcc:	d005      	beq.n	8000bda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_Delay+0x44>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bda:	bf00      	nop
 8000bdc:	f7ff ffe0 	bl	8000ba0 <HAL_GetTick>
 8000be0:	4602      	mov	r2, r0
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d8f7      	bhi.n	8000bdc <HAL_Delay+0x28>
  {
  }
}
 8000bec:	bf00      	nop
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000014 	.word	0x20000014

08000bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2e:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	60d3      	str	r3, [r2, #12]
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <__NVIC_GetPriorityGrouping+0x18>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	f003 0307 	and.w	r3, r3, #7
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	db0a      	blt.n	8000c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	490c      	ldr	r1, [pc, #48]	; (8000cac <__NVIC_SetPriority+0x4c>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	0112      	lsls	r2, r2, #4
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	440b      	add	r3, r1
 8000c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c88:	e00a      	b.n	8000ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4908      	ldr	r1, [pc, #32]	; (8000cb0 <__NVIC_SetPriority+0x50>)
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	f003 030f 	and.w	r3, r3, #15
 8000c96:	3b04      	subs	r3, #4
 8000c98:	0112      	lsls	r2, r2, #4
 8000c9a:	b2d2      	uxtb	r2, r2
 8000c9c:	440b      	add	r3, r1
 8000c9e:	761a      	strb	r2, [r3, #24]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bc80      	pop	{r7}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000e100 	.word	0xe000e100
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b089      	sub	sp, #36	; 0x24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f1c3 0307 	rsb	r3, r3, #7
 8000cce:	2b04      	cmp	r3, #4
 8000cd0:	bf28      	it	cs
 8000cd2:	2304      	movcs	r3, #4
 8000cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3304      	adds	r3, #4
 8000cda:	2b06      	cmp	r3, #6
 8000cdc:	d902      	bls.n	8000ce4 <NVIC_EncodePriority+0x30>
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3b03      	subs	r3, #3
 8000ce2:	e000      	b.n	8000ce6 <NVIC_EncodePriority+0x32>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa01 f303 	lsl.w	r3, r1, r3
 8000d06:	43d9      	mvns	r1, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	4313      	orrs	r3, r2
         );
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3724      	adds	r7, #36	; 0x24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d28:	d301      	bcc.n	8000d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00f      	b.n	8000d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <SysTick_Config+0x40>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d36:	210f      	movs	r1, #15
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	f7ff ff90 	bl	8000c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <SysTick_Config+0x40>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d46:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <SysTick_Config+0x40>)
 8000d48:	2207      	movs	r2, #7
 8000d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	e000e010 	.word	0xe000e010

08000d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff ff49 	bl	8000bfc <__NVIC_SetPriorityGrouping>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b086      	sub	sp, #24
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	4603      	mov	r3, r0
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
 8000d7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d80:	f7ff ff60 	bl	8000c44 <__NVIC_GetPriorityGrouping>
 8000d84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	f7ff ff92 	bl	8000cb4 <NVIC_EncodePriority>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff61 	bl	8000c60 <__NVIC_SetPriority>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ffb2 	bl	8000d18 <SysTick_Config>
 8000db4:	4603      	mov	r3, r0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dce:	e140      	b.n	8001052 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 8132 	beq.w	800104c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d00b      	beq.n	8000e08 <HAL_GPIO_Init+0x48>
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d007      	beq.n	8000e08 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dfc:	2b11      	cmp	r3, #17
 8000dfe:	d003      	beq.n	8000e08 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b12      	cmp	r3, #18
 8000e06:	d130      	bne.n	8000e6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2203      	movs	r2, #3
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	68da      	ldr	r2, [r3, #12]
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e3e:	2201      	movs	r2, #1
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	091b      	lsrs	r3, r3, #4
 8000e54:	f003 0201 	and.w	r2, r3, #1
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d003      	beq.n	8000eaa <HAL_GPIO_Init+0xea>
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2b12      	cmp	r3, #18
 8000ea8:	d123      	bne.n	8000ef2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	08da      	lsrs	r2, r3, #3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3208      	adds	r2, #8
 8000eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	220f      	movs	r2, #15
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	691a      	ldr	r2, [r3, #16]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	f003 0307 	and.w	r3, r3, #7
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	08da      	lsrs	r2, r3, #3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3208      	adds	r2, #8
 8000eec:	6939      	ldr	r1, [r7, #16]
 8000eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	2203      	movs	r2, #3
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0203 	and.w	r2, r3, #3
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 808c 	beq.w	800104c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000f34:	4a4e      	ldr	r2, [pc, #312]	; (8001070 <HAL_GPIO_Init+0x2b0>)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	089b      	lsrs	r3, r3, #2
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	2207      	movs	r2, #7
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f5e:	d00d      	beq.n	8000f7c <HAL_GPIO_Init+0x1bc>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a44      	ldr	r2, [pc, #272]	; (8001074 <HAL_GPIO_Init+0x2b4>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d007      	beq.n	8000f78 <HAL_GPIO_Init+0x1b8>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a43      	ldr	r2, [pc, #268]	; (8001078 <HAL_GPIO_Init+0x2b8>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d101      	bne.n	8000f74 <HAL_GPIO_Init+0x1b4>
 8000f70:	2302      	movs	r3, #2
 8000f72:	e004      	b.n	8000f7e <HAL_GPIO_Init+0x1be>
 8000f74:	2307      	movs	r3, #7
 8000f76:	e002      	b.n	8000f7e <HAL_GPIO_Init+0x1be>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e000      	b.n	8000f7e <HAL_GPIO_Init+0x1be>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	f002 0203 	and.w	r2, r2, #3
 8000f84:	0092      	lsls	r2, r2, #2
 8000f86:	4093      	lsls	r3, r2
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f8e:	4938      	ldr	r1, [pc, #224]	; (8001070 <HAL_GPIO_Init+0x2b0>)
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	3302      	adds	r3, #2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000f9c:	4b37      	ldr	r3, [pc, #220]	; (800107c <HAL_GPIO_Init+0x2bc>)
 8000f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fa2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000fc2:	4a2e      	ldr	r2, [pc, #184]	; (800107c <HAL_GPIO_Init+0x2bc>)
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000fca:	4b2c      	ldr	r3, [pc, #176]	; (800107c <HAL_GPIO_Init+0x2bc>)
 8000fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000fd0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000ff0:	4a22      	ldr	r2, [pc, #136]	; (800107c <HAL_GPIO_Init+0x2bc>)
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ff8:	4b20      	ldr	r3, [pc, #128]	; (800107c <HAL_GPIO_Init+0x2bc>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800101c:	4a17      	ldr	r2, [pc, #92]	; (800107c <HAL_GPIO_Init+0x2bc>)
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <HAL_GPIO_Init+0x2bc>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001046:	4a0d      	ldr	r2, [pc, #52]	; (800107c <HAL_GPIO_Init+0x2bc>)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	3301      	adds	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	fa22 f303 	lsr.w	r3, r2, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	f47f aeb7 	bne.w	8000dd0 <HAL_GPIO_Init+0x10>
  }
}
 8001062:	bf00      	nop
 8001064:	bf00      	nop
 8001066:	371c      	adds	r7, #28
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40010000 	.word	0x40010000
 8001074:	48000400 	.word	0x48000400
 8001078:	48000800 	.word	0x48000800
 800107c:	58000800 	.word	0x58000800

08001080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	807b      	strh	r3, [r7, #2]
 800108c:	4613      	mov	r3, r2
 800108e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001090:	787b      	ldrb	r3, [r7, #1]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800109c:	e002      	b.n	80010a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800109e:	887a      	ldrh	r2, [r7, #2]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
	...

080010b0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a03      	ldr	r2, [pc, #12]	; (80010c8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80010ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010be:	6013      	str	r3, [r2, #0]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	58000400 	.word	0x58000400

080010cc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <HAL_PWREx_GetVoltageRange+0x14>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	58000400 	.word	0x58000400

080010e4 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010f4:	d101      	bne.n	80010fa <LL_PWR_IsEnabledBkUpAccess+0x16>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <LL_PWR_IsEnabledBkUpAccess+0x18>
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	58000400 	.word	0x58000400

08001108 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800110c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001116:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001132:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001136:	6013      	str	r3, [r2, #0]
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800114e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001152:	d101      	bne.n	8001158 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001174:	6013      	str	r3, [r2, #0]
}
 8001176:	bf00      	nop
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr

0800117e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800118c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001190:	6013      	str	r3, [r2, #0]
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800119e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011ac:	d101      	bne.n	80011b2 <LL_RCC_HSE_IsReady+0x18>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <LL_RCC_HSE_IsReady+0x1a>
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80011c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80011dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80011f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001206:	d101      	bne.n	800120c <LL_RCC_HSI_IsReady+0x18>
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <LL_RCC_HSI_IsReady+0x1a>
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr

08001216 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800121e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	061b      	lsls	r3, r3, #24
 800122c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001230:	4313      	orrs	r3, r2
 8001232:	604b      	str	r3, [r1, #4]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr

0800123e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b02      	cmp	r3, #2
 8001250:	d101      	bne.n	8001256 <LL_RCC_LSE_IsReady+0x18>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <LL_RCC_LSE_IsReady+0x1a>
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800126c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800128c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001290:	f023 0301 	bic.w	r3, r3, #1
 8001294:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80012a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d101      	bne.n	80012b8 <LL_RCC_LSI_IsReady+0x18>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <LL_RCC_LSI_IsReady+0x1a>
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr

080012c2 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80012c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6013      	str	r3, [r2, #0]
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80012e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012ec:	f023 0301 	bic.w	r3, r3, #1
 80012f0:	6013      	str	r3, [r2, #0]
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr

080012fa <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80012fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b02      	cmp	r3, #2
 800130a:	d101      	bne.n	8001310 <LL_RCC_MSI_IsReady+0x16>
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <LL_RCC_MSI_IsReady+0x18>
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr

0800131a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800131e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0308 	and.w	r3, r3, #8
 8001328:	2b08      	cmp	r3, #8
 800132a:	d101      	bne.n	8001330 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800132c:	2301      	movs	r3, #1
 800132e:	e000      	b.n	8001332 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr

0800133a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800133e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800135c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr

08001368 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001382:	4313      	orrs	r3, r2
 8001384:	604b      	str	r3, [r1, #4]
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f023 0203 	bic.w	r2, r3, #3
 80013a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	608b      	str	r3, [r1, #8]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr

080013b6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80013ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f003 030c 	and.w	r3, r3, #12
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80013d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	608b      	str	r3, [r1, #8]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr

080013f2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80013fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001402:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001406:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4313      	orrs	r3, r2
 800140e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001428:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800142c:	f023 020f 	bic.w	r2, r3, #15
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001438:	4313      	orrs	r3, r2
 800143a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800145a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4313      	orrs	r3, r2
 8001462:	608b      	str	r3, [r1, #8]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr

0800146e <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001480:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4313      	orrs	r3, r2
 8001488:	608b      	str	r3, [r1, #8]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80014ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80014b6:	011b      	lsls	r3, r3, #4
 80014b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80014c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr

080014da <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80014de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80014f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001502:	6013      	str	r3, [r2, #0]
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800151a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800151e:	6013      	str	r3, [r2, #0]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800152c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001536:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800153a:	d101      	bne.n	8001540 <LL_RCC_PLL_IsReady+0x18>
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <LL_RCC_PLL_IsReady+0x1a>
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800154e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	0a1b      	lsrs	r3, r3, #8
 8001556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800155a:	4618      	mov	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr

08001562 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800157c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001586:	4618      	mov	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	f003 0303 	and.w	r3, r3, #3
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80015a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b6:	d101      	bne.n	80015bc <LL_RCC_IsActiveFlag_HPRE+0x18>
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr

080015c6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80015ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015da:	d101      	bne.n	80015e0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr

080015ea <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80015ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80015f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fe:	d101      	bne.n	8001604 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr

0800160e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001620:	d101      	bne.n	8001626 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001622:	2301      	movs	r3, #1
 8001624:	e000      	b.n	8001628 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800163e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001642:	d101      	bne.n	8001648 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr
	...

08001654 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e38a      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001666:	f7ff fea6 	bl	80013b6 <LL_RCC_GetSysClkSource>
 800166a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800166c:	f7ff ff8f 	bl	800158e <LL_RCC_PLL_GetMainSource>
 8001670:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0320 	and.w	r3, r3, #32
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 80c9 	beq.w	8001812 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d005      	beq.n	8001692 <HAL_RCC_OscConfig+0x3e>
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	2b0c      	cmp	r3, #12
 800168a:	d17b      	bne.n	8001784 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d178      	bne.n	8001784 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001692:	f7ff fe32 	bl	80012fa <LL_RCC_MSI_IsReady>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_OscConfig+0x54>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e369      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d005      	beq.n	80016c6 <HAL_RCC_OscConfig+0x72>
 80016ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016c4:	e006      	b.n	80016d4 <HAL_RCC_OscConfig+0x80>
 80016c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ce:	091b      	lsrs	r3, r3, #4
 80016d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d222      	bcs.n	800171e <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 fd6d 	bl	80021bc <RCC_SetFlashLatencyFromMSIRange>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e347      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016f6:	f043 0308 	orr.w	r3, r3, #8
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fe26 	bl	8001368 <LL_RCC_MSI_SetCalibTrimming>
 800171c:	e021      	b.n	8001762 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800171e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001728:	f043 0308 	orr.w	r3, r3, #8
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001740:	4313      	orrs	r3, r2
 8001742:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff fe0d 	bl	8001368 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001752:	4618      	mov	r0, r3
 8001754:	f000 fd32 	bl	80021bc <RCC_SetFlashLatencyFromMSIRange>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e30c      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001762:	f000 fcf3 	bl	800214c <HAL_RCC_GetHCLKFreq>
 8001766:	4603      	mov	r3, r0
 8001768:	4ab4      	ldr	r2, [pc, #720]	; (8001a3c <HAL_RCC_OscConfig+0x3e8>)
 800176a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800176c:	4bb4      	ldr	r3, [pc, #720]	; (8001a40 <HAL_RCC_OscConfig+0x3ec>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff f9c9 	bl	8000b08 <HAL_InitTick>
 8001776:	4603      	mov	r3, r0
 8001778:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800177a:	7cfb      	ldrb	r3, [r7, #19]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d047      	beq.n	8001810 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8001780:	7cfb      	ldrb	r3, [r7, #19]
 8001782:	e2fb      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d02c      	beq.n	80017e6 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800178c:	f7ff fd99 	bl	80012c2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001790:	f7ff fa06 	bl	8000ba0 <HAL_GetTick>
 8001794:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001798:	f7ff fa02 	bl	8000ba0 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e2e8      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 80017aa:	f7ff fda6 	bl	80012fa <LL_RCC_MSI_IsReady>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0f1      	beq.n	8001798 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017be:	f043 0308 	orr.w	r3, r3, #8
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017d6:	4313      	orrs	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fdc2 	bl	8001368 <LL_RCC_MSI_SetCalibTrimming>
 80017e4:	e015      	b.n	8001812 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017e6:	f7ff fd7a 	bl	80012de <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017ea:	f7ff f9d9 	bl	8000ba0 <HAL_GetTick>
 80017ee:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017f2:	f7ff f9d5 	bl	8000ba0 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e2bb      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001804:	f7ff fd79 	bl	80012fa <LL_RCC_MSI_IsReady>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f1      	bne.n	80017f2 <HAL_RCC_OscConfig+0x19e>
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001810:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d05f      	beq.n	80018de <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	2b08      	cmp	r3, #8
 8001822:	d005      	beq.n	8001830 <HAL_RCC_OscConfig+0x1dc>
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	2b0c      	cmp	r3, #12
 8001828:	d10d      	bne.n	8001846 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	2b03      	cmp	r3, #3
 800182e:	d10a      	bne.n	8001846 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	f7ff fcb3 	bl	800119a <LL_RCC_HSE_IsReady>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d050      	beq.n	80018dc <HAL_RCC_OscConfig+0x288>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d14c      	bne.n	80018dc <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e29a      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001858:	4313      	orrs	r3, r2
 800185a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001864:	d102      	bne.n	800186c <HAL_RCC_OscConfig+0x218>
 8001866:	f7ff fc7c 	bl	8001162 <LL_RCC_HSE_Enable>
 800186a:	e00d      	b.n	8001888 <HAL_RCC_OscConfig+0x234>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001874:	d104      	bne.n	8001880 <HAL_RCC_OscConfig+0x22c>
 8001876:	f7ff fc47 	bl	8001108 <LL_RCC_HSE_EnableTcxo>
 800187a:	f7ff fc72 	bl	8001162 <LL_RCC_HSE_Enable>
 800187e:	e003      	b.n	8001888 <HAL_RCC_OscConfig+0x234>
 8001880:	f7ff fc7d 	bl	800117e <LL_RCC_HSE_Disable>
 8001884:	f7ff fc4e 	bl	8001124 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d012      	beq.n	80018b6 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001890:	f7ff f986 	bl	8000ba0 <HAL_GetTick>
 8001894:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001898:	f7ff f982 	bl	8000ba0 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b64      	cmp	r3, #100	; 0x64
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e268      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 80018aa:	f7ff fc76 	bl	800119a <LL_RCC_HSE_IsReady>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f1      	beq.n	8001898 <HAL_RCC_OscConfig+0x244>
 80018b4:	e013      	b.n	80018de <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b6:	f7ff f973 	bl	8000ba0 <HAL_GetTick>
 80018ba:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018be:	f7ff f96f 	bl	8000ba0 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b64      	cmp	r3, #100	; 0x64
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e255      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 80018d0:	f7ff fc63 	bl	800119a <LL_RCC_HSE_IsReady>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f1      	bne.n	80018be <HAL_RCC_OscConfig+0x26a>
 80018da:	e000      	b.n	80018de <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018dc:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d04b      	beq.n	8001982 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	d005      	beq.n	80018fc <HAL_RCC_OscConfig+0x2a8>
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	2b0c      	cmp	r3, #12
 80018f4:	d113      	bne.n	800191e <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d110      	bne.n	800191e <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018fc:	f7ff fc7a 	bl	80011f4 <LL_RCC_HSI_IsReady>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <HAL_RCC_OscConfig+0x2be>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e234      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fc7d 	bl	8001216 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800191c:	e031      	b.n	8001982 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d019      	beq.n	800195a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001926:	f7ff fc49 	bl	80011bc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192a:	f7ff f939 	bl	8000ba0 <HAL_GetTick>
 800192e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001932:	f7ff f935 	bl	8000ba0 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e21b      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001944:	f7ff fc56 	bl	80011f4 <LL_RCC_HSI_IsReady>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f1      	beq.n	8001932 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fc5f 	bl	8001216 <LL_RCC_HSI_SetCalibTrimming>
 8001958:	e013      	b.n	8001982 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800195a:	f7ff fc3d 	bl	80011d8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195e:	f7ff f91f 	bl	8000ba0 <HAL_GetTick>
 8001962:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001966:	f7ff f91b 	bl	8000ba0 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e201      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001978:	f7ff fc3c 	bl	80011f4 <LL_RCC_HSI_IsReady>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f1      	bne.n	8001966 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	2b00      	cmp	r3, #0
 800198c:	d06e      	beq.n	8001a6c <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d056      	beq.n	8001a44 <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8001996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800199a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199e:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69da      	ldr	r2, [r3, #28]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 0310 	and.w	r3, r3, #16
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d031      	beq.n	8001a12 <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e1da      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d013      	beq.n	80019f8 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 80019d0:	f7ff fc56 	bl	8001280 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019d4:	f7ff f8e4 	bl	8000ba0 <HAL_GetTick>
 80019d8:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019dc:	f7ff f8e0 	bl	8000ba0 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b11      	cmp	r3, #17
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e1c6      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 80019ee:	f7ff fc57 	bl	80012a0 <LL_RCC_LSI_IsReady>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f1      	bne.n	80019dc <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80019f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a00:	f023 0210 	bic.w	r2, r3, #16
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a12:	f7ff fc25 	bl	8001260 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a16:	f7ff f8c3 	bl	8000ba0 <HAL_GetTick>
 8001a1a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a1e:	f7ff f8bf 	bl	8000ba0 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b11      	cmp	r3, #17
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e1a5      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001a30:	f7ff fc36 	bl	80012a0 <LL_RCC_LSI_IsReady>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f1      	beq.n	8001a1e <HAL_RCC_OscConfig+0x3ca>
 8001a3a:	e017      	b.n	8001a6c <HAL_RCC_OscConfig+0x418>
 8001a3c:	2000000c 	.word	0x2000000c
 8001a40:	20000010 	.word	0x20000010
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a44:	f7ff fc1c 	bl	8001280 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a48:	f7ff f8aa 	bl	8000ba0 <HAL_GetTick>
 8001a4c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a50:	f7ff f8a6 	bl	8000ba0 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b11      	cmp	r3, #17
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e18c      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001a62:	f7ff fc1d 	bl	80012a0 <LL_RCC_LSI_IsReady>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f1      	bne.n	8001a50 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 80d8 	beq.w	8001c2a <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001a7a:	f7ff fb33 	bl	80010e4 <LL_PWR_IsEnabledBkUpAccess>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d113      	bne.n	8001aac <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001a84:	f7ff fb14 	bl	80010b0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a88:	f7ff f88a 	bl	8000ba0 <HAL_GetTick>
 8001a8c:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a90:	f7ff f886 	bl	8000ba0 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e16c      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001aa2:	f7ff fb1f 	bl	80010e4 <LL_PWR_IsEnabledBkUpAccess>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f1      	beq.n	8001a90 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d07b      	beq.n	8001bac <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	2b85      	cmp	r3, #133	; 0x85
 8001aba:	d003      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b05      	cmp	r3, #5
 8001ac2:	d109      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001acc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad8:	f7ff f862 	bl	8000ba0 <HAL_GetTick>
 8001adc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001af2:	e00a      	b.n	8001b0a <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af4:	f7ff f854 	bl	8000ba0 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e138      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001b0a:	f7ff fb98 	bl	800123e <LL_RCC_LSE_IsReady>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0ef      	beq.n	8001af4 <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b81      	cmp	r3, #129	; 0x81
 8001b1a:	d003      	beq.n	8001b24 <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b85      	cmp	r3, #133	; 0x85
 8001b22:	d121      	bne.n	8001b68 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff f83c 	bl	8000ba0 <HAL_GetTick>
 8001b28:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b40:	f7ff f82e 	bl	8000ba0 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e112      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0ec      	beq.n	8001b40 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001b66:	e060      	b.n	8001c2a <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff f81a 	bl	8000ba0 <HAL_GetTick>
 8001b6c:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b82:	e00a      	b.n	8001b9a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b84:	f7ff f80c 	bl	8000ba0 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e0f0      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1ec      	bne.n	8001b84 <HAL_RCC_OscConfig+0x530>
 8001baa:	e03e      	b.n	8001c2a <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7fe fff8 	bl	8000ba0 <HAL_GetTick>
 8001bb0:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc8:	f7fe ffea 	bl	8000ba0 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e0ce      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1ec      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bee:	f7fe ffd7 	bl	8000ba0 <HAL_GetTick>
 8001bf2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001c08:	e00a      	b.n	8001c20 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0a:	f7fe ffc9 	bl	8000ba0 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e0ad      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001c20:	f7ff fb0d 	bl	800123e <LL_RCC_LSE_IsReady>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1ef      	bne.n	8001c0a <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 80a3 	beq.w	8001d7a <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	2b0c      	cmp	r3, #12
 8001c38:	d076      	beq.n	8001d28 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d14b      	bne.n	8001cda <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c42:	f7ff fc63 	bl	800150c <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c46:	f7fe ffab 	bl	8000ba0 <HAL_GetTick>
 8001c4a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4e:	f7fe ffa7 	bl	8000ba0 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b0a      	cmp	r3, #10
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e08d      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001c60:	f7ff fc62 	bl	8001528 <LL_RCC_PLL_IsReady>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f1      	bne.n	8001c4e <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	4b44      	ldr	r3, [pc, #272]	; (8001d84 <HAL_RCC_OscConfig+0x730>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c7c:	4311      	orrs	r1, r2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c82:	0212      	lsls	r2, r2, #8
 8001c84:	4311      	orrs	r1, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c8a:	4311      	orrs	r1, r2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c90:	4311      	orrs	r1, r2
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c96:	430a      	orrs	r2, r1
 8001c98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca0:	f7ff fc26 	bl	80014f0 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7fe ff74 	bl	8000ba0 <HAL_GetTick>
 8001cb8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbc:	f7fe ff70 	bl	8000ba0 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b0a      	cmp	r3, #10
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e056      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001cce:	f7ff fc2b 	bl	8001528 <LL_RCC_PLL_IsReady>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0f1      	beq.n	8001cbc <HAL_RCC_OscConfig+0x668>
 8001cd8:	e04f      	b.n	8001d7a <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cda:	f7ff fc17 	bl	800150c <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ce8:	f023 0303 	bic.w	r3, r3, #3
 8001cec:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8001cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cf8:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d00:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d02:	f7fe ff4d 	bl	8000ba0 <HAL_GetTick>
 8001d06:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0a:	f7fe ff49 	bl	8000ba0 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b0a      	cmp	r3, #10
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e02f      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001d1c:	f7ff fc04 	bl	8001528 <LL_RCC_PLL_IsReady>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f1      	bne.n	8001d0a <HAL_RCC_OscConfig+0x6b6>
 8001d26:	e028      	b.n	8001d7a <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e023      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	f003 0203 	and.w	r2, r3, #3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d115      	bne.n	8001d76 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d10e      	bne.n	8001d76 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d001      	beq.n	8001d7a <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3720      	adds	r7, #32
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	11c1808c 	.word	0x11c1808c

08001d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e12c      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b98      	ldr	r3, [pc, #608]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d91b      	bls.n	8001de2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b95      	ldr	r3, [pc, #596]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 0207 	bic.w	r2, r3, #7
 8001db2:	4993      	ldr	r1, [pc, #588]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dba:	f7fe fef1 	bl	8000ba0 <HAL_GetTick>
 8001dbe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001dc2:	f7fe feed 	bl	8000ba0 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e110      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd4:	4b8a      	ldr	r3, [pc, #552]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d1ef      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d016      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff faea 	bl	80013cc <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001df8:	f7fe fed2 	bl	8000ba0 <HAL_GetTick>
 8001dfc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e00:	f7fe fece 	bl	8000ba0 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e0f1      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001e12:	f7ff fbc7 	bl	80015a4 <LL_RCC_IsActiveFlag_HPRE>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0f1      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0320 	and.w	r3, r3, #32
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d016      	beq.n	8001e56 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fae0 	bl	80013f2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e32:	f7fe feb5 	bl	8000ba0 <HAL_GetTick>
 8001e36:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e3a:	f7fe feb1 	bl	8000ba0 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e0d4      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001e4c:	f7ff fbbb 	bl	80015c6 <LL_RCC_IsActiveFlag_C2HPRE>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f1      	beq.n	8001e3a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d016      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fad8 	bl	800141c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001e6c:	f7fe fe98 	bl	8000ba0 <HAL_GetTick>
 8001e70:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001e74:	f7fe fe94 	bl	8000ba0 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e0b7      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001e86:	f7ff fbb0 	bl	80015ea <LL_RCC_IsActiveFlag_SHDHPRE>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f1      	beq.n	8001e74 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d016      	beq.n	8001eca <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fad1 	bl	8001448 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ea6:	f7fe fe7b 	bl	8000ba0 <HAL_GetTick>
 8001eaa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001eae:	f7fe fe77 	bl	8000ba0 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e09a      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001ec0:	f7ff fba5 	bl	800160e <LL_RCC_IsActiveFlag_PPRE1>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f1      	beq.n	8001eae <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d017      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff fac6 	bl	800146e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001ee2:	f7fe fe5d 	bl	8000ba0 <HAL_GetTick>
 8001ee6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001eea:	f7fe fe59 	bl	8000ba0 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e07c      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001efc:	f7ff fb98 	bl	8001630 <LL_RCC_IsActiveFlag_PPRE2>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f1      	beq.n	8001eea <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d043      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d106      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001f1a:	f7ff f93e 	bl	800119a <LL_RCC_HSE_IsReady>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d11e      	bne.n	8001f62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e066      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001f30:	f7ff fafa 	bl	8001528 <LL_RCC_PLL_IsReady>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d113      	bne.n	8001f62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e05b      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d106      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001f46:	f7ff f9d8 	bl	80012fa <LL_RCC_MSI_IsReady>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d108      	bne.n	8001f62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e050      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001f54:	f7ff f94e 	bl	80011f4 <LL_RCC_HSI_IsReady>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e049      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fa12 	bl	8001390 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f6c:	f7fe fe18 	bl	8000ba0 <HAL_GetTick>
 8001f70:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f74:	f7fe fe14 	bl	8000ba0 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e035      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	f7ff fa14 	bl	80013b6 <LL_RCC_GetSysClkSource>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d1ec      	bne.n	8001f74 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f9a:	4b19      	ldr	r3, [pc, #100]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d21b      	bcs.n	8001fe0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa8:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f023 0207 	bic.w	r2, r3, #7
 8001fb0:	4913      	ldr	r1, [pc, #76]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fb8:	f7fe fdf2 	bl	8000ba0 <HAL_GetTick>
 8001fbc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001fc0:	f7fe fdee 	bl	8000ba0 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e011      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d1ef      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001fe0:	f000 f8b4 	bl	800214c <HAL_RCC_GetHCLKFreq>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4a07      	ldr	r2, [pc, #28]	; (8002004 <HAL_RCC_ClockConfig+0x27c>)
 8001fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fea:	4b07      	ldr	r3, [pc, #28]	; (8002008 <HAL_RCC_ClockConfig+0x280>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fd8a 	bl	8000b08 <HAL_InitTick>
 8001ff4:	4603      	mov	r3, r0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	58004000 	.word	0x58004000
 8002004:	2000000c 	.word	0x2000000c
 8002008:	20000010 	.word	0x20000010

0800200c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800201a:	f7ff f9cc 	bl	80013b6 <LL_RCC_GetSysClkSource>
 800201e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002020:	f7ff fab5 	bl	800158e <LL_RCC_PLL_GetMainSource>
 8002024:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_RCC_GetSysClockFreq+0x2c>
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	2b0c      	cmp	r3, #12
 8002030:	d139      	bne.n	80020a6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d136      	bne.n	80020a6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002038:	f7ff f96f 	bl	800131a <LL_RCC_MSI_IsEnabledRangeSelect>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d115      	bne.n	800206e <HAL_RCC_GetSysClockFreq+0x62>
 8002042:	f7ff f96a 	bl	800131a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002046:	4603      	mov	r3, r0
 8002048:	2b01      	cmp	r3, #1
 800204a:	d106      	bne.n	800205a <HAL_RCC_GetSysClockFreq+0x4e>
 800204c:	f7ff f975 	bl	800133a <LL_RCC_MSI_GetRange>
 8002050:	4603      	mov	r3, r0
 8002052:	0a1b      	lsrs	r3, r3, #8
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	e005      	b.n	8002066 <HAL_RCC_GetSysClockFreq+0x5a>
 800205a:	f7ff f979 	bl	8001350 <LL_RCC_MSI_GetRangeAfterStandby>
 800205e:	4603      	mov	r3, r0
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	4a36      	ldr	r2, [pc, #216]	; (8002140 <HAL_RCC_GetSysClockFreq+0x134>)
 8002068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206c:	e014      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x8c>
 800206e:	f7ff f954 	bl	800131a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002072:	4603      	mov	r3, r0
 8002074:	2b01      	cmp	r3, #1
 8002076:	d106      	bne.n	8002086 <HAL_RCC_GetSysClockFreq+0x7a>
 8002078:	f7ff f95f 	bl	800133a <LL_RCC_MSI_GetRange>
 800207c:	4603      	mov	r3, r0
 800207e:	091b      	lsrs	r3, r3, #4
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	e005      	b.n	8002092 <HAL_RCC_GetSysClockFreq+0x86>
 8002086:	f7ff f963 	bl	8001350 <LL_RCC_MSI_GetRangeAfterStandby>
 800208a:	4603      	mov	r3, r0
 800208c:	091b      	lsrs	r3, r3, #4
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	4a2b      	ldr	r2, [pc, #172]	; (8002140 <HAL_RCC_GetSysClockFreq+0x134>)
 8002094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002098:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d115      	bne.n	80020cc <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80020a4:	e012      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d102      	bne.n	80020b2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020ac:	4b25      	ldr	r3, [pc, #148]	; (8002144 <HAL_RCC_GetSysClockFreq+0x138>)
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	e00c      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d109      	bne.n	80020cc <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80020b8:	f7ff f842 	bl	8001140 <LL_RCC_HSE_IsEnabledDiv2>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d102      	bne.n	80020c8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <HAL_RCC_GetSysClockFreq+0x138>)
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	e001      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80020c8:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <HAL_RCC_GetSysClockFreq+0x13c>)
 80020ca:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020cc:	f7ff f973 	bl	80013b6 <LL_RCC_GetSysClkSource>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b0c      	cmp	r3, #12
 80020d4:	d12f      	bne.n	8002136 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80020d6:	f7ff fa5a 	bl	800158e <LL_RCC_PLL_GetMainSource>
 80020da:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d003      	beq.n	80020ea <HAL_RCC_GetSysClockFreq+0xde>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d003      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0xe4>
 80020e8:	e00d      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <HAL_RCC_GetSysClockFreq+0x138>)
 80020ec:	60fb      	str	r3, [r7, #12]
        break;
 80020ee:	e00d      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80020f0:	f7ff f826 	bl	8001140 <LL_RCC_HSE_IsEnabledDiv2>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d102      	bne.n	8002100 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_RCC_GetSysClockFreq+0x138>)
 80020fc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80020fe:	e005      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002102:	60fb      	str	r3, [r7, #12]
        break;
 8002104:	e002      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	60fb      	str	r3, [r7, #12]
        break;
 800210a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800210c:	f7ff fa1d 	bl	800154a <LL_RCC_PLL_GetN>
 8002110:	4602      	mov	r2, r0
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	fb03 f402 	mul.w	r4, r3, r2
 8002118:	f7ff fa2e 	bl	8001578 <LL_RCC_PLL_GetDivider>
 800211c:	4603      	mov	r3, r0
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	3301      	adds	r3, #1
 8002122:	fbb4 f4f3 	udiv	r4, r4, r3
 8002126:	f7ff fa1c 	bl	8001562 <LL_RCC_PLL_GetR>
 800212a:	4603      	mov	r3, r0
 800212c:	0f5b      	lsrs	r3, r3, #29
 800212e:	3301      	adds	r3, #1
 8002130:	fbb4 f3f3 	udiv	r3, r4, r3
 8002134:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002136:	697b      	ldr	r3, [r7, #20]
}
 8002138:	4618      	mov	r0, r3
 800213a:	371c      	adds	r7, #28
 800213c:	46bd      	mov	sp, r7
 800213e:	bd90      	pop	{r4, r7, pc}
 8002140:	08004338 	.word	0x08004338
 8002144:	00f42400 	.word	0x00f42400
 8002148:	01e84800 	.word	0x01e84800

0800214c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800214c:	b598      	push	{r3, r4, r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002150:	f7ff ff5c 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8002154:	4604      	mov	r4, r0
 8002156:	f7ff f99d 	bl	8001494 <LL_RCC_GetAHBPrescaler>
 800215a:	4603      	mov	r3, r0
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	4a03      	ldr	r2, [pc, #12]	; (8002170 <HAL_RCC_GetHCLKFreq+0x24>)
 8002164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002168:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800216c:	4618      	mov	r0, r3
 800216e:	bd98      	pop	{r3, r4, r7, pc}
 8002170:	080042d8 	.word	0x080042d8

08002174 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002174:	b598      	push	{r3, r4, r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002178:	f7ff ffe8 	bl	800214c <HAL_RCC_GetHCLKFreq>
 800217c:	4604      	mov	r4, r0
 800217e:	f7ff f9a1 	bl	80014c4 <LL_RCC_GetAPB1Prescaler>
 8002182:	4603      	mov	r3, r0
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	4a03      	ldr	r2, [pc, #12]	; (8002194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002190:	4618      	mov	r0, r3
 8002192:	bd98      	pop	{r3, r4, r7, pc}
 8002194:	08004318 	.word	0x08004318

08002198 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002198:	b598      	push	{r3, r4, r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800219c:	f7ff ffd6 	bl	800214c <HAL_RCC_GetHCLKFreq>
 80021a0:	4604      	mov	r4, r0
 80021a2:	f7ff f99a 	bl	80014da <LL_RCC_GetAPB2Prescaler>
 80021a6:	4603      	mov	r3, r0
 80021a8:	0adb      	lsrs	r3, r3, #11
 80021aa:	4a03      	ldr	r2, [pc, #12]	; (80021b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	bd98      	pop	{r3, r4, r7, pc}
 80021b8:	08004318 	.word	0x08004318

080021bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	091b      	lsrs	r3, r3, #4
 80021c8:	f003 030f 	and.w	r3, r3, #15
 80021cc:	4a10      	ldr	r2, [pc, #64]	; (8002210 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80021ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80021d4:	f7ff f969 	bl	80014aa <LL_RCC_GetAHB3Prescaler>
 80021d8:	4603      	mov	r3, r0
 80021da:	091b      	lsrs	r3, r3, #4
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	4a0c      	ldr	r2, [pc, #48]	; (8002214 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80021e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ec:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	4a09      	ldr	r2, [pc, #36]	; (8002218 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	0c9c      	lsrs	r4, r3, #18
 80021f8:	f7fe ff68 	bl	80010cc <HAL_PWREx_GetVoltageRange>
 80021fc:	4603      	mov	r3, r0
 80021fe:	4619      	mov	r1, r3
 8002200:	4620      	mov	r0, r4
 8002202:	f000 f80b 	bl	800221c <RCC_SetFlashLatency>
 8002206:	4603      	mov	r3, r0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	bd90      	pop	{r4, r7, pc}
 8002210:	08004338 	.word	0x08004338
 8002214:	080042d8 	.word	0x080042d8
 8002218:	431bde83 	.word	0x431bde83

0800221c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08e      	sub	sp, #56	; 0x38
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002226:	4a3c      	ldr	r2, [pc, #240]	; (8002318 <RCC_SetFlashLatency+0xfc>)
 8002228:	f107 0320 	add.w	r3, r7, #32
 800222c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002230:	6018      	str	r0, [r3, #0]
 8002232:	3304      	adds	r3, #4
 8002234:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002236:	4a39      	ldr	r2, [pc, #228]	; (800231c <RCC_SetFlashLatency+0x100>)
 8002238:	f107 0318 	add.w	r3, r7, #24
 800223c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002240:	6018      	str	r0, [r3, #0]
 8002242:	3304      	adds	r3, #4
 8002244:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002246:	4a36      	ldr	r2, [pc, #216]	; (8002320 <RCC_SetFlashLatency+0x104>)
 8002248:	f107 030c 	add.w	r3, r7, #12
 800224c:	ca07      	ldmia	r2, {r0, r1, r2}
 800224e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002252:	2300      	movs	r3, #0
 8002254:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800225c:	d11d      	bne.n	800229a <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800225e:	2300      	movs	r3, #0
 8002260:	633b      	str	r3, [r7, #48]	; 0x30
 8002262:	e016      	b.n	8002292 <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800226c:	4413      	add	r3, r2
 800226e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002272:	461a      	mov	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4293      	cmp	r3, r2
 8002278:	d808      	bhi.n	800228c <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800227a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002282:	4413      	add	r3, r2
 8002284:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002288:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800228a:	e023      	b.n	80022d4 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800228c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228e:	3301      	adds	r3, #1
 8002290:	633b      	str	r3, [r7, #48]	; 0x30
 8002292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002294:	2b02      	cmp	r3, #2
 8002296:	d9e5      	bls.n	8002264 <RCC_SetFlashLatency+0x48>
 8002298:	e01c      	b.n	80022d4 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800229a:	2300      	movs	r3, #0
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800229e:	e016      	b.n	80022ce <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80022a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022a8:	4413      	add	r3, r2
 80022aa:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80022ae:	461a      	mov	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d808      	bhi.n	80022c8 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022be:	4413      	add	r3, r2
 80022c0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80022c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80022c6:	e005      	b.n	80022d4 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80022c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ca:	3301      	adds	r3, #1
 80022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d9e5      	bls.n	80022a0 <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022d4:	4b13      	ldr	r3, [pc, #76]	; (8002324 <RCC_SetFlashLatency+0x108>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f023 0207 	bic.w	r2, r3, #7
 80022dc:	4911      	ldr	r1, [pc, #68]	; (8002324 <RCC_SetFlashLatency+0x108>)
 80022de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e0:	4313      	orrs	r3, r2
 80022e2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80022e4:	f7fe fc5c 	bl	8000ba0 <HAL_GetTick>
 80022e8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80022ea:	e008      	b.n	80022fe <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80022ec:	f7fe fc58 	bl	8000ba0 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e007      	b.n	800230e <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <RCC_SetFlashLatency+0x108>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002308:	429a      	cmp	r2, r3
 800230a:	d1ef      	bne.n	80022ec <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3738      	adds	r7, #56	; 0x38
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	080042a4 	.word	0x080042a4
 800231c:	080042ac 	.word	0x080042ac
 8002320:	080042b4 	.word	0x080042b4
 8002324:	58004000 	.word	0x58004000

08002328 <LL_RCC_LSE_IsReady>:
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800232c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b02      	cmp	r3, #2
 800233a:	d101      	bne.n	8002340 <LL_RCC_LSE_IsReady+0x18>
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <LL_RCC_LSE_IsReady+0x1a>
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <LL_RCC_SetUSARTClockSource>:
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002356:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	0c1b      	lsrs	r3, r3, #16
 800235e:	43db      	mvns	r3, r3
 8002360:	401a      	ands	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	b29b      	uxth	r3, r3
 8002366:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr

0800237a <LL_RCC_SetI2SClockSource>:
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800238e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <LL_RCC_SetLPUARTClockSource>:
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80023ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <LL_RCC_SetI2CClockSource>:
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80023d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	091b      	lsrs	r3, r3, #4
 80023e2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80023e6:	43db      	mvns	r3, r3
 80023e8:	401a      	ands	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80023f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr

08002406 <LL_RCC_SetLPTIMClockSource>:
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800240e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002412:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	0c1b      	lsrs	r3, r3, #16
 800241a:	041b      	lsls	r3, r3, #16
 800241c:	43db      	mvns	r3, r3
 800241e:	401a      	ands	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	041b      	lsls	r3, r3, #16
 8002424:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002428:	4313      	orrs	r3, r2
 800242a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <LL_RCC_SetRNGClockSource>:
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002448:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800244c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr

08002462 <LL_RCC_SetADCClockSource>:
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800246a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002472:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002476:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <LL_RCC_SetRTCClockSource>:
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <LL_RCC_GetRTCClockSource>:
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80024ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <LL_RCC_ForceBackupDomainReset>:
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80024d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80024e6:	bf00      	nop
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr

080024ee <LL_RCC_ReleaseBackupDomainReset>:
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80024f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002502:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002506:	bf00      	nop
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr
	...

08002510 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800251c:	2300      	movs	r3, #0
 800251e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002520:	2300      	movs	r3, #0
 8002522:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d058      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002530:	f7fe fdbe 	bl	80010b0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002534:	f7fe fb34 	bl	8000ba0 <HAL_GetTick>
 8002538:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800253a:	e009      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800253c:	f7fe fb30 	bl	8000ba0 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d902      	bls.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	74fb      	strb	r3, [r7, #19]
        break;
 800254e:	e006      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002550:	4b7b      	ldr	r3, [pc, #492]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800255c:	d1ee      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800255e:	7cfb      	ldrb	r3, [r7, #19]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d13c      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002564:	f7ff ffa7 	bl	80024b6 <LL_RCC_GetRTCClockSource>
 8002568:	4602      	mov	r2, r0
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256e:	429a      	cmp	r2, r3
 8002570:	d00f      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800257e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002580:	f7ff ffa5 	bl	80024ce <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002584:	f7ff ffb3 	bl	80024ee <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002588:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d014      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7fe fb00 	bl	8000ba0 <HAL_GetTick>
 80025a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80025a2:	e00b      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a4:	f7fe fafc 	bl	8000ba0 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d902      	bls.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	74fb      	strb	r3, [r7, #19]
            break;
 80025ba:	e004      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80025bc:	f7ff feb4 	bl	8002328 <LL_RCC_LSE_IsReady>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d1ee      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80025c6:	7cfb      	ldrb	r3, [r7, #19]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d105      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff5b 	bl	800248c <LL_RCC_SetRTCClockSource>
 80025d6:	e004      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025d8:	7cfb      	ldrb	r3, [r7, #19]
 80025da:	74bb      	strb	r3, [r7, #18]
 80025dc:	e001      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025de:	7cfb      	ldrb	r3, [r7, #19]
 80025e0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d004      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fea9 	bl	800234a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d004      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fe9e 	bl	800234a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0320 	and.w	r3, r3, #32
 8002616:	2b00      	cmp	r3, #0
 8002618:	d004      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff fec0 	bl	80023a4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800262c:	2b00      	cmp	r3, #0
 800262e:	d004      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fee6 	bl	8002406 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002642:	2b00      	cmp	r3, #0
 8002644:	d004      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fedb 	bl	8002406 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002658:	2b00      	cmp	r3, #0
 800265a:	d004      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff fed0 	bl	8002406 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266e:	2b00      	cmp	r3, #0
 8002670:	d004      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fea9 	bl	80023ce <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002684:	2b00      	cmp	r3, #0
 8002686:	d004      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fe9e 	bl	80023ce <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d004      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff fe93 	bl	80023ce <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d011      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fe5e 	bl	800237a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c6:	d107      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80026c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d010      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fea5 	bl	8002438 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d107      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80026f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002700:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002704:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d011      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fea3 	bl	8002462 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002724:	d107      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002734:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002736:	7cbb      	ldrb	r3, [r7, #18]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	58000400 	.word	0x58000400

08002744 <LL_RCC_GetUSARTClockSource>:
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800274c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002750:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	401a      	ands	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	041b      	lsls	r3, r3, #16
 800275c:	4313      	orrs	r3, r2
}
 800275e:	4618      	mov	r0, r3
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <LL_RCC_GetLPUARTClockSource>:
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002774:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4013      	ands	r3, r2
}
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr

08002786 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e042      	b.n	800281e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fe f81a 	bl	80007e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2224      	movs	r2, #36	; 0x24
 80027b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0201 	bic.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f8c3 	bl	8002954 <UART_SetConfig>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e022      	b.n	800281e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 fb07 	bl	8002df4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002804:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0201 	orr.w	r2, r2, #1
 8002814:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fb8d 	bl	8002f36 <UART_CheckIdleState>
 800281c:	4603      	mov	r3, r0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b08a      	sub	sp, #40	; 0x28
 800282a:	af02      	add	r7, sp, #8
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	603b      	str	r3, [r7, #0]
 8002832:	4613      	mov	r3, r2
 8002834:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800283c:	2b20      	cmp	r3, #32
 800283e:	f040 8083 	bne.w	8002948 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <HAL_UART_Transmit+0x28>
 8002848:	88fb      	ldrh	r3, [r7, #6]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e07b      	b.n	800294a <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_UART_Transmit+0x3a>
 800285c:	2302      	movs	r3, #2
 800285e:	e074      	b.n	800294a <HAL_UART_Transmit+0x124>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2221      	movs	r2, #33	; 0x21
 8002874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002878:	f7fe f992 	bl	8000ba0 <HAL_GetTick>
 800287c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	88fa      	ldrh	r2, [r7, #6]
 8002882:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	88fa      	ldrh	r2, [r7, #6]
 800288a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002896:	d108      	bne.n	80028aa <HAL_UART_Transmit+0x84>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d104      	bne.n	80028aa <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	61bb      	str	r3, [r7, #24]
 80028a8:	e003      	b.n	80028b2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80028ba:	e02c      	b.n	8002916 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2200      	movs	r2, #0
 80028c4:	2180      	movs	r1, #128	; 0x80
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 fb80 	bl	8002fcc <UART_WaitOnFlagUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e039      	b.n	800294a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10b      	bne.n	80028f4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	3302      	adds	r3, #2
 80028f0:	61bb      	str	r3, [r7, #24]
 80028f2:	e007      	b.n	8002904 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	781a      	ldrb	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3301      	adds	r3, #1
 8002902:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800291c:	b29b      	uxth	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1cc      	bne.n	80028bc <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2200      	movs	r2, #0
 800292a:	2140      	movs	r1, #64	; 0x40
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 fb4d 	bl	8002fcc <UART_WaitOnFlagUntilTimeout>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e006      	b.n	800294a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002944:	2300      	movs	r3, #0
 8002946:	e000      	b.n	800294a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002948:	2302      	movs	r3, #2
  }
}
 800294a:	4618      	mov	r0, r3
 800294c:	3720      	adds	r7, #32
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002954:	b5b0      	push	{r4, r5, r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	4313      	orrs	r3, r2
 8002976:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	4bab      	ldr	r3, [pc, #684]	; (8002c2c <UART_SetConfig+0x2d8>)
 8002980:	4013      	ands	r3, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	69f9      	ldr	r1, [r7, #28]
 8002988:	430b      	orrs	r3, r1
 800298a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4aa0      	ldr	r2, [pc, #640]	; (8002c30 <UART_SetConfig+0x2dc>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d004      	beq.n	80029bc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	69fa      	ldr	r2, [r7, #28]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80029c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	69f9      	ldr	r1, [r7, #28]
 80029d0:	430b      	orrs	r3, r1
 80029d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029da:	f023 010f 	bic.w	r1, r3, #15
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a91      	ldr	r2, [pc, #580]	; (8002c34 <UART_SetConfig+0x2e0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d122      	bne.n	8002a3a <UART_SetConfig+0xe6>
 80029f4:	2003      	movs	r0, #3
 80029f6:	f7ff fea5 	bl	8002744 <LL_RCC_GetUSARTClockSource>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d817      	bhi.n	8002a34 <UART_SetConfig+0xe0>
 8002a04:	a201      	add	r2, pc, #4	; (adr r2, 8002a0c <UART_SetConfig+0xb8>)
 8002a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0a:	bf00      	nop
 8002a0c:	08002a1d 	.word	0x08002a1d
 8002a10:	08002a29 	.word	0x08002a29
 8002a14:	08002a23 	.word	0x08002a23
 8002a18:	08002a2f 	.word	0x08002a2f
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	76fb      	strb	r3, [r7, #27]
 8002a20:	e072      	b.n	8002b08 <UART_SetConfig+0x1b4>
 8002a22:	2302      	movs	r3, #2
 8002a24:	76fb      	strb	r3, [r7, #27]
 8002a26:	e06f      	b.n	8002b08 <UART_SetConfig+0x1b4>
 8002a28:	2304      	movs	r3, #4
 8002a2a:	76fb      	strb	r3, [r7, #27]
 8002a2c:	e06c      	b.n	8002b08 <UART_SetConfig+0x1b4>
 8002a2e:	2308      	movs	r3, #8
 8002a30:	76fb      	strb	r3, [r7, #27]
 8002a32:	e069      	b.n	8002b08 <UART_SetConfig+0x1b4>
 8002a34:	2310      	movs	r3, #16
 8002a36:	76fb      	strb	r3, [r7, #27]
 8002a38:	e066      	b.n	8002b08 <UART_SetConfig+0x1b4>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a7e      	ldr	r2, [pc, #504]	; (8002c38 <UART_SetConfig+0x2e4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d134      	bne.n	8002aae <UART_SetConfig+0x15a>
 8002a44:	200c      	movs	r0, #12
 8002a46:	f7ff fe7d 	bl	8002744 <LL_RCC_GetUSARTClockSource>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8002a50:	2b0c      	cmp	r3, #12
 8002a52:	d829      	bhi.n	8002aa8 <UART_SetConfig+0x154>
 8002a54:	a201      	add	r2, pc, #4	; (adr r2, 8002a5c <UART_SetConfig+0x108>)
 8002a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5a:	bf00      	nop
 8002a5c:	08002a91 	.word	0x08002a91
 8002a60:	08002aa9 	.word	0x08002aa9
 8002a64:	08002aa9 	.word	0x08002aa9
 8002a68:	08002aa9 	.word	0x08002aa9
 8002a6c:	08002a9d 	.word	0x08002a9d
 8002a70:	08002aa9 	.word	0x08002aa9
 8002a74:	08002aa9 	.word	0x08002aa9
 8002a78:	08002aa9 	.word	0x08002aa9
 8002a7c:	08002a97 	.word	0x08002a97
 8002a80:	08002aa9 	.word	0x08002aa9
 8002a84:	08002aa9 	.word	0x08002aa9
 8002a88:	08002aa9 	.word	0x08002aa9
 8002a8c:	08002aa3 	.word	0x08002aa3
 8002a90:	2300      	movs	r3, #0
 8002a92:	76fb      	strb	r3, [r7, #27]
 8002a94:	e038      	b.n	8002b08 <UART_SetConfig+0x1b4>
 8002a96:	2302      	movs	r3, #2
 8002a98:	76fb      	strb	r3, [r7, #27]
 8002a9a:	e035      	b.n	8002b08 <UART_SetConfig+0x1b4>
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	76fb      	strb	r3, [r7, #27]
 8002aa0:	e032      	b.n	8002b08 <UART_SetConfig+0x1b4>
 8002aa2:	2308      	movs	r3, #8
 8002aa4:	76fb      	strb	r3, [r7, #27]
 8002aa6:	e02f      	b.n	8002b08 <UART_SetConfig+0x1b4>
 8002aa8:	2310      	movs	r3, #16
 8002aaa:	76fb      	strb	r3, [r7, #27]
 8002aac:	e02c      	b.n	8002b08 <UART_SetConfig+0x1b4>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a5f      	ldr	r2, [pc, #380]	; (8002c30 <UART_SetConfig+0x2dc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d125      	bne.n	8002b04 <UART_SetConfig+0x1b0>
 8002ab8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8002abc:	f7ff fe54 	bl	8002768 <LL_RCC_GetLPUARTClockSource>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ac6:	d017      	beq.n	8002af8 <UART_SetConfig+0x1a4>
 8002ac8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002acc:	d817      	bhi.n	8002afe <UART_SetConfig+0x1aa>
 8002ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ad2:	d00b      	beq.n	8002aec <UART_SetConfig+0x198>
 8002ad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ad8:	d811      	bhi.n	8002afe <UART_SetConfig+0x1aa>
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <UART_SetConfig+0x192>
 8002ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae2:	d006      	beq.n	8002af2 <UART_SetConfig+0x19e>
 8002ae4:	e00b      	b.n	8002afe <UART_SetConfig+0x1aa>
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	76fb      	strb	r3, [r7, #27]
 8002aea:	e00d      	b.n	8002b08 <UART_SetConfig+0x1b4>
 8002aec:	2302      	movs	r3, #2
 8002aee:	76fb      	strb	r3, [r7, #27]
 8002af0:	e00a      	b.n	8002b08 <UART_SetConfig+0x1b4>
 8002af2:	2304      	movs	r3, #4
 8002af4:	76fb      	strb	r3, [r7, #27]
 8002af6:	e007      	b.n	8002b08 <UART_SetConfig+0x1b4>
 8002af8:	2308      	movs	r3, #8
 8002afa:	76fb      	strb	r3, [r7, #27]
 8002afc:	e004      	b.n	8002b08 <UART_SetConfig+0x1b4>
 8002afe:	2310      	movs	r3, #16
 8002b00:	76fb      	strb	r3, [r7, #27]
 8002b02:	e001      	b.n	8002b08 <UART_SetConfig+0x1b4>
 8002b04:	2310      	movs	r3, #16
 8002b06:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a48      	ldr	r2, [pc, #288]	; (8002c30 <UART_SetConfig+0x2dc>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	f040 8098 	bne.w	8002c44 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b14:	7efb      	ldrb	r3, [r7, #27]
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d823      	bhi.n	8002b62 <UART_SetConfig+0x20e>
 8002b1a:	a201      	add	r2, pc, #4	; (adr r2, 8002b20 <UART_SetConfig+0x1cc>)
 8002b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b20:	08002b45 	.word	0x08002b45
 8002b24:	08002b63 	.word	0x08002b63
 8002b28:	08002b4d 	.word	0x08002b4d
 8002b2c:	08002b63 	.word	0x08002b63
 8002b30:	08002b53 	.word	0x08002b53
 8002b34:	08002b63 	.word	0x08002b63
 8002b38:	08002b63 	.word	0x08002b63
 8002b3c:	08002b63 	.word	0x08002b63
 8002b40:	08002b5b 	.word	0x08002b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b44:	f7ff fb16 	bl	8002174 <HAL_RCC_GetPCLK1Freq>
 8002b48:	6178      	str	r0, [r7, #20]
        break;
 8002b4a:	e00f      	b.n	8002b6c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b4c:	4b3b      	ldr	r3, [pc, #236]	; (8002c3c <UART_SetConfig+0x2e8>)
 8002b4e:	617b      	str	r3, [r7, #20]
        break;
 8002b50:	e00c      	b.n	8002b6c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b52:	f7ff fa5b 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8002b56:	6178      	str	r0, [r7, #20]
        break;
 8002b58:	e008      	b.n	8002b6c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b5e:	617b      	str	r3, [r7, #20]
        break;
 8002b60:	e004      	b.n	8002b6c <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	76bb      	strb	r3, [r7, #26]
        break;
 8002b6a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 8128 	beq.w	8002dc4 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	4a31      	ldr	r2, [pc, #196]	; (8002c40 <UART_SetConfig+0x2ec>)
 8002b7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b86:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	4413      	add	r3, r2
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d305      	bcc.n	8002ba4 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d902      	bls.n	8002baa <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	76bb      	strb	r3, [r7, #26]
 8002ba8:	e10c      	b.n	8002dc4 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f04f 0100 	mov.w	r1, #0
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	4a22      	ldr	r2, [pc, #136]	; (8002c40 <UART_SetConfig+0x2ec>)
 8002bb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	f7fd fb2d 	bl	8000220 <__aeabi_uldivmod>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4610      	mov	r0, r2
 8002bcc:	4619      	mov	r1, r3
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	020b      	lsls	r3, r1, #8
 8002bd8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002bdc:	0202      	lsls	r2, r0, #8
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	6849      	ldr	r1, [r1, #4]
 8002be2:	0849      	lsrs	r1, r1, #1
 8002be4:	4608      	mov	r0, r1
 8002be6:	f04f 0100 	mov.w	r1, #0
 8002bea:	1814      	adds	r4, r2, r0
 8002bec:	eb43 0501 	adc.w	r5, r3, r1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	4620      	mov	r0, r4
 8002bfc:	4629      	mov	r1, r5
 8002bfe:	f7fd fb0f 	bl	8000220 <__aeabi_uldivmod>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4613      	mov	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c10:	d308      	bcc.n	8002c24 <UART_SetConfig+0x2d0>
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c18:	d204      	bcs.n	8002c24 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	e0cf      	b.n	8002dc4 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	76bb      	strb	r3, [r7, #26]
 8002c28:	e0cc      	b.n	8002dc4 <UART_SetConfig+0x470>
 8002c2a:	bf00      	nop
 8002c2c:	cfff69f3 	.word	0xcfff69f3
 8002c30:	40008000 	.word	0x40008000
 8002c34:	40013800 	.word	0x40013800
 8002c38:	40004400 	.word	0x40004400
 8002c3c:	00f42400 	.word	0x00f42400
 8002c40:	08004378 	.word	0x08004378
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c4c:	d165      	bne.n	8002d1a <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 8002c4e:	7efb      	ldrb	r3, [r7, #27]
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d828      	bhi.n	8002ca6 <UART_SetConfig+0x352>
 8002c54:	a201      	add	r2, pc, #4	; (adr r2, 8002c5c <UART_SetConfig+0x308>)
 8002c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5a:	bf00      	nop
 8002c5c:	08002c81 	.word	0x08002c81
 8002c60:	08002c89 	.word	0x08002c89
 8002c64:	08002c91 	.word	0x08002c91
 8002c68:	08002ca7 	.word	0x08002ca7
 8002c6c:	08002c97 	.word	0x08002c97
 8002c70:	08002ca7 	.word	0x08002ca7
 8002c74:	08002ca7 	.word	0x08002ca7
 8002c78:	08002ca7 	.word	0x08002ca7
 8002c7c:	08002c9f 	.word	0x08002c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c80:	f7ff fa78 	bl	8002174 <HAL_RCC_GetPCLK1Freq>
 8002c84:	6178      	str	r0, [r7, #20]
        break;
 8002c86:	e013      	b.n	8002cb0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c88:	f7ff fa86 	bl	8002198 <HAL_RCC_GetPCLK2Freq>
 8002c8c:	6178      	str	r0, [r7, #20]
        break;
 8002c8e:	e00f      	b.n	8002cb0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c90:	4b56      	ldr	r3, [pc, #344]	; (8002dec <UART_SetConfig+0x498>)
 8002c92:	617b      	str	r3, [r7, #20]
        break;
 8002c94:	e00c      	b.n	8002cb0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c96:	f7ff f9b9 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8002c9a:	6178      	str	r0, [r7, #20]
        break;
 8002c9c:	e008      	b.n	8002cb0 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ca2:	617b      	str	r3, [r7, #20]
        break;
 8002ca4:	e004      	b.n	8002cb0 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	76bb      	strb	r3, [r7, #26]
        break;
 8002cae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 8086 	beq.w	8002dc4 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	4a4c      	ldr	r2, [pc, #304]	; (8002df0 <UART_SetConfig+0x49c>)
 8002cbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cca:	005a      	lsls	r2, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	085b      	lsrs	r3, r3, #1
 8002cd2:	441a      	add	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	2b0f      	cmp	r3, #15
 8002ce4:	d916      	bls.n	8002d14 <UART_SetConfig+0x3c0>
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cec:	d212      	bcs.n	8002d14 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	f023 030f 	bic.w	r3, r3, #15
 8002cf6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	085b      	lsrs	r3, r3, #1
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	89fb      	ldrh	r3, [r7, #14]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	89fa      	ldrh	r2, [r7, #14]
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	e057      	b.n	8002dc4 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	76bb      	strb	r3, [r7, #26]
 8002d18:	e054      	b.n	8002dc4 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d1a:	7efb      	ldrb	r3, [r7, #27]
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d828      	bhi.n	8002d72 <UART_SetConfig+0x41e>
 8002d20:	a201      	add	r2, pc, #4	; (adr r2, 8002d28 <UART_SetConfig+0x3d4>)
 8002d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d26:	bf00      	nop
 8002d28:	08002d4d 	.word	0x08002d4d
 8002d2c:	08002d55 	.word	0x08002d55
 8002d30:	08002d5d 	.word	0x08002d5d
 8002d34:	08002d73 	.word	0x08002d73
 8002d38:	08002d63 	.word	0x08002d63
 8002d3c:	08002d73 	.word	0x08002d73
 8002d40:	08002d73 	.word	0x08002d73
 8002d44:	08002d73 	.word	0x08002d73
 8002d48:	08002d6b 	.word	0x08002d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d4c:	f7ff fa12 	bl	8002174 <HAL_RCC_GetPCLK1Freq>
 8002d50:	6178      	str	r0, [r7, #20]
        break;
 8002d52:	e013      	b.n	8002d7c <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d54:	f7ff fa20 	bl	8002198 <HAL_RCC_GetPCLK2Freq>
 8002d58:	6178      	str	r0, [r7, #20]
        break;
 8002d5a:	e00f      	b.n	8002d7c <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d5c:	4b23      	ldr	r3, [pc, #140]	; (8002dec <UART_SetConfig+0x498>)
 8002d5e:	617b      	str	r3, [r7, #20]
        break;
 8002d60:	e00c      	b.n	8002d7c <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d62:	f7ff f953 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8002d66:	6178      	str	r0, [r7, #20]
        break;
 8002d68:	e008      	b.n	8002d7c <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d6e:	617b      	str	r3, [r7, #20]
        break;
 8002d70:	e004      	b.n	8002d7c <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	76bb      	strb	r3, [r7, #26]
        break;
 8002d7a:	bf00      	nop
    }

    if (pclk != 0U)
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d020      	beq.n	8002dc4 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	4a1a      	ldr	r2, [pc, #104]	; (8002df0 <UART_SetConfig+0x49c>)
 8002d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	fbb3 f2f2 	udiv	r2, r3, r2
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	085b      	lsrs	r3, r3, #1
 8002d9a:	441a      	add	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	2b0f      	cmp	r3, #15
 8002dac:	d908      	bls.n	8002dc0 <UART_SetConfig+0x46c>
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db4:	d204      	bcs.n	8002dc0 <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	e001      	b.n	8002dc4 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002de0:	7ebb      	ldrb	r3, [r7, #26]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3720      	adds	r7, #32
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bdb0      	pop	{r4, r5, r7, pc}
 8002dea:	bf00      	nop
 8002dec:	00f42400 	.word	0x00f42400
 8002df0:	08004378 	.word	0x08004378

08002df4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00a      	beq.n	8002e1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00a      	beq.n	8002e40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00a      	beq.n	8002e62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00a      	beq.n	8002e84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00a      	beq.n	8002ea6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eaa:	f003 0320 	and.w	r3, r3, #32
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00a      	beq.n	8002ec8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d01a      	beq.n	8002f0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ef2:	d10a      	bne.n	8002f0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	605a      	str	r2, [r3, #4]
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr

08002f36 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b086      	sub	sp, #24
 8002f3a:	af02      	add	r7, sp, #8
 8002f3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f46:	f7fd fe2b 	bl	8000ba0 <HAL_GetTick>
 8002f4a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d10e      	bne.n	8002f78 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f82f 	bl	8002fcc <UART_WaitOnFlagUntilTimeout>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e025      	b.n	8002fc4 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d10e      	bne.n	8002fa4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f819 	bl	8002fcc <UART_WaitOnFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e00f      	b.n	8002fc4 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fdc:	e062      	b.n	80030a4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe4:	d05e      	beq.n	80030a4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe6:	f7fd fddb 	bl	8000ba0 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d302      	bcc.n	8002ffc <UART_WaitOnFlagUntilTimeout+0x30>
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d11d      	bne.n	8003038 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800300a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0201 	bic.w	r2, r2, #1
 800301a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2220      	movs	r2, #32
 8003020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2220      	movs	r2, #32
 8003028:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e045      	b.n	80030c4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b00      	cmp	r3, #0
 8003044:	d02e      	beq.n	80030a4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003050:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003054:	d126      	bne.n	80030a4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800305e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800306e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0201 	bic.w	r2, r2, #1
 800307e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2220      	movs	r2, #32
 8003094:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e00f      	b.n	80030c4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	69da      	ldr	r2, [r3, #28]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	4013      	ands	r3, r2
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	bf0c      	ite	eq
 80030b4:	2301      	moveq	r3, #1
 80030b6:	2300      	movne	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	79fb      	ldrb	r3, [r7, #7]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d08d      	beq.n	8002fde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d101      	bne.n	80030e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80030de:	2302      	movs	r3, #2
 80030e0:	e027      	b.n	8003132 <HAL_UARTEx_DisableFifoMode+0x66>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2224      	movs	r2, #36	; 0x24
 80030ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0201 	bic.w	r2, r2, #1
 8003108:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003110:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003150:	2302      	movs	r3, #2
 8003152:	e02d      	b.n	80031b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2224      	movs	r2, #36	; 0x24
 8003160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0201 	bic.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f84f 	bl	8003234 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e02d      	b.n	800322c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2224      	movs	r2, #36	; 0x24
 80031dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f811 	bl	8003234 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2220      	movs	r2, #32
 800321e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003234:	b480      	push	{r7}
 8003236:	b089      	sub	sp, #36	; 0x24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800323c:	4a2e      	ldr	r2, [pc, #184]	; (80032f8 <UARTEx_SetNbDataToProcess+0xc4>)
 800323e:	f107 0314 	add.w	r3, r7, #20
 8003242:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003246:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800324a:	4a2c      	ldr	r2, [pc, #176]	; (80032fc <UARTEx_SetNbDataToProcess+0xc8>)
 800324c:	f107 030c 	add.w	r3, r7, #12
 8003250:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003254:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800325c:	2b00      	cmp	r3, #0
 800325e:	d108      	bne.n	8003272 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003270:	e03d      	b.n	80032ee <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003272:	2308      	movs	r3, #8
 8003274:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003276:	2308      	movs	r3, #8
 8003278:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	0e5b      	lsrs	r3, r3, #25
 8003282:	b2db      	uxtb	r3, r3
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	0f5b      	lsrs	r3, r3, #29
 8003292:	b2db      	uxtb	r3, r3
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800329a:	7fbb      	ldrb	r3, [r7, #30]
 800329c:	7f3a      	ldrb	r2, [r7, #28]
 800329e:	f107 0120 	add.w	r1, r7, #32
 80032a2:	440a      	add	r2, r1
 80032a4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80032a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80032ac:	7f3a      	ldrb	r2, [r7, #28]
 80032ae:	f107 0120 	add.w	r1, r7, #32
 80032b2:	440a      	add	r2, r1
 80032b4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80032b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80032bc:	b29a      	uxth	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80032c4:	7ffb      	ldrb	r3, [r7, #31]
 80032c6:	7f7a      	ldrb	r2, [r7, #29]
 80032c8:	f107 0120 	add.w	r1, r7, #32
 80032cc:	440a      	add	r2, r1
 80032ce:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80032d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80032d6:	7f7a      	ldrb	r2, [r7, #29]
 80032d8:	f107 0120 	add.w	r1, r7, #32
 80032dc:	440a      	add	r2, r1
 80032de:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80032e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80032ee:	bf00      	nop
 80032f0:	3724      	adds	r7, #36	; 0x24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr
 80032f8:	080042c0 	.word	0x080042c0
 80032fc:	080042c8 	.word	0x080042c8

08003300 <__errno>:
 8003300:	4b01      	ldr	r3, [pc, #4]	; (8003308 <__errno+0x8>)
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	20000018 	.word	0x20000018

0800330c <__libc_init_array>:
 800330c:	b570      	push	{r4, r5, r6, lr}
 800330e:	4d0d      	ldr	r5, [pc, #52]	; (8003344 <__libc_init_array+0x38>)
 8003310:	4c0d      	ldr	r4, [pc, #52]	; (8003348 <__libc_init_array+0x3c>)
 8003312:	1b64      	subs	r4, r4, r5
 8003314:	10a4      	asrs	r4, r4, #2
 8003316:	2600      	movs	r6, #0
 8003318:	42a6      	cmp	r6, r4
 800331a:	d109      	bne.n	8003330 <__libc_init_array+0x24>
 800331c:	4d0b      	ldr	r5, [pc, #44]	; (800334c <__libc_init_array+0x40>)
 800331e:	4c0c      	ldr	r4, [pc, #48]	; (8003350 <__libc_init_array+0x44>)
 8003320:	f000 ff72 	bl	8004208 <_init>
 8003324:	1b64      	subs	r4, r4, r5
 8003326:	10a4      	asrs	r4, r4, #2
 8003328:	2600      	movs	r6, #0
 800332a:	42a6      	cmp	r6, r4
 800332c:	d105      	bne.n	800333a <__libc_init_array+0x2e>
 800332e:	bd70      	pop	{r4, r5, r6, pc}
 8003330:	f855 3b04 	ldr.w	r3, [r5], #4
 8003334:	4798      	blx	r3
 8003336:	3601      	adds	r6, #1
 8003338:	e7ee      	b.n	8003318 <__libc_init_array+0xc>
 800333a:	f855 3b04 	ldr.w	r3, [r5], #4
 800333e:	4798      	blx	r3
 8003340:	3601      	adds	r6, #1
 8003342:	e7f2      	b.n	800332a <__libc_init_array+0x1e>
 8003344:	08004430 	.word	0x08004430
 8003348:	08004430 	.word	0x08004430
 800334c:	08004430 	.word	0x08004430
 8003350:	08004434 	.word	0x08004434

08003354 <memset>:
 8003354:	4402      	add	r2, r0
 8003356:	4603      	mov	r3, r0
 8003358:	4293      	cmp	r3, r2
 800335a:	d100      	bne.n	800335e <memset+0xa>
 800335c:	4770      	bx	lr
 800335e:	f803 1b01 	strb.w	r1, [r3], #1
 8003362:	e7f9      	b.n	8003358 <memset+0x4>

08003364 <iprintf>:
 8003364:	b40f      	push	{r0, r1, r2, r3}
 8003366:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <iprintf+0x2c>)
 8003368:	b513      	push	{r0, r1, r4, lr}
 800336a:	681c      	ldr	r4, [r3, #0]
 800336c:	b124      	cbz	r4, 8003378 <iprintf+0x14>
 800336e:	69a3      	ldr	r3, [r4, #24]
 8003370:	b913      	cbnz	r3, 8003378 <iprintf+0x14>
 8003372:	4620      	mov	r0, r4
 8003374:	f000 f866 	bl	8003444 <__sinit>
 8003378:	ab05      	add	r3, sp, #20
 800337a:	9a04      	ldr	r2, [sp, #16]
 800337c:	68a1      	ldr	r1, [r4, #8]
 800337e:	9301      	str	r3, [sp, #4]
 8003380:	4620      	mov	r0, r4
 8003382:	f000 f981 	bl	8003688 <_vfiprintf_r>
 8003386:	b002      	add	sp, #8
 8003388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800338c:	b004      	add	sp, #16
 800338e:	4770      	bx	lr
 8003390:	20000018 	.word	0x20000018

08003394 <std>:
 8003394:	2300      	movs	r3, #0
 8003396:	b510      	push	{r4, lr}
 8003398:	4604      	mov	r4, r0
 800339a:	e9c0 3300 	strd	r3, r3, [r0]
 800339e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033a2:	6083      	str	r3, [r0, #8]
 80033a4:	8181      	strh	r1, [r0, #12]
 80033a6:	6643      	str	r3, [r0, #100]	; 0x64
 80033a8:	81c2      	strh	r2, [r0, #14]
 80033aa:	6183      	str	r3, [r0, #24]
 80033ac:	4619      	mov	r1, r3
 80033ae:	2208      	movs	r2, #8
 80033b0:	305c      	adds	r0, #92	; 0x5c
 80033b2:	f7ff ffcf 	bl	8003354 <memset>
 80033b6:	4b05      	ldr	r3, [pc, #20]	; (80033cc <std+0x38>)
 80033b8:	6263      	str	r3, [r4, #36]	; 0x24
 80033ba:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <std+0x3c>)
 80033bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <std+0x40>)
 80033c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033c2:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <std+0x44>)
 80033c4:	6224      	str	r4, [r4, #32]
 80033c6:	6323      	str	r3, [r4, #48]	; 0x30
 80033c8:	bd10      	pop	{r4, pc}
 80033ca:	bf00      	nop
 80033cc:	08003c31 	.word	0x08003c31
 80033d0:	08003c53 	.word	0x08003c53
 80033d4:	08003c8b 	.word	0x08003c8b
 80033d8:	08003caf 	.word	0x08003caf

080033dc <_cleanup_r>:
 80033dc:	4901      	ldr	r1, [pc, #4]	; (80033e4 <_cleanup_r+0x8>)
 80033de:	f000 b8af 	b.w	8003540 <_fwalk_reent>
 80033e2:	bf00      	nop
 80033e4:	08003f89 	.word	0x08003f89

080033e8 <__sfmoreglue>:
 80033e8:	b570      	push	{r4, r5, r6, lr}
 80033ea:	1e4a      	subs	r2, r1, #1
 80033ec:	2568      	movs	r5, #104	; 0x68
 80033ee:	4355      	muls	r5, r2
 80033f0:	460e      	mov	r6, r1
 80033f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80033f6:	f000 f8c5 	bl	8003584 <_malloc_r>
 80033fa:	4604      	mov	r4, r0
 80033fc:	b140      	cbz	r0, 8003410 <__sfmoreglue+0x28>
 80033fe:	2100      	movs	r1, #0
 8003400:	e9c0 1600 	strd	r1, r6, [r0]
 8003404:	300c      	adds	r0, #12
 8003406:	60a0      	str	r0, [r4, #8]
 8003408:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800340c:	f7ff ffa2 	bl	8003354 <memset>
 8003410:	4620      	mov	r0, r4
 8003412:	bd70      	pop	{r4, r5, r6, pc}

08003414 <__sfp_lock_acquire>:
 8003414:	4801      	ldr	r0, [pc, #4]	; (800341c <__sfp_lock_acquire+0x8>)
 8003416:	f000 b8b3 	b.w	8003580 <__retarget_lock_acquire_recursive>
 800341a:	bf00      	nop
 800341c:	20000144 	.word	0x20000144

08003420 <__sfp_lock_release>:
 8003420:	4801      	ldr	r0, [pc, #4]	; (8003428 <__sfp_lock_release+0x8>)
 8003422:	f000 b8ae 	b.w	8003582 <__retarget_lock_release_recursive>
 8003426:	bf00      	nop
 8003428:	20000144 	.word	0x20000144

0800342c <__sinit_lock_acquire>:
 800342c:	4801      	ldr	r0, [pc, #4]	; (8003434 <__sinit_lock_acquire+0x8>)
 800342e:	f000 b8a7 	b.w	8003580 <__retarget_lock_acquire_recursive>
 8003432:	bf00      	nop
 8003434:	2000013f 	.word	0x2000013f

08003438 <__sinit_lock_release>:
 8003438:	4801      	ldr	r0, [pc, #4]	; (8003440 <__sinit_lock_release+0x8>)
 800343a:	f000 b8a2 	b.w	8003582 <__retarget_lock_release_recursive>
 800343e:	bf00      	nop
 8003440:	2000013f 	.word	0x2000013f

08003444 <__sinit>:
 8003444:	b510      	push	{r4, lr}
 8003446:	4604      	mov	r4, r0
 8003448:	f7ff fff0 	bl	800342c <__sinit_lock_acquire>
 800344c:	69a3      	ldr	r3, [r4, #24]
 800344e:	b11b      	cbz	r3, 8003458 <__sinit+0x14>
 8003450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003454:	f7ff bff0 	b.w	8003438 <__sinit_lock_release>
 8003458:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800345c:	6523      	str	r3, [r4, #80]	; 0x50
 800345e:	4b13      	ldr	r3, [pc, #76]	; (80034ac <__sinit+0x68>)
 8003460:	4a13      	ldr	r2, [pc, #76]	; (80034b0 <__sinit+0x6c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	62a2      	str	r2, [r4, #40]	; 0x28
 8003466:	42a3      	cmp	r3, r4
 8003468:	bf04      	itt	eq
 800346a:	2301      	moveq	r3, #1
 800346c:	61a3      	streq	r3, [r4, #24]
 800346e:	4620      	mov	r0, r4
 8003470:	f000 f820 	bl	80034b4 <__sfp>
 8003474:	6060      	str	r0, [r4, #4]
 8003476:	4620      	mov	r0, r4
 8003478:	f000 f81c 	bl	80034b4 <__sfp>
 800347c:	60a0      	str	r0, [r4, #8]
 800347e:	4620      	mov	r0, r4
 8003480:	f000 f818 	bl	80034b4 <__sfp>
 8003484:	2200      	movs	r2, #0
 8003486:	60e0      	str	r0, [r4, #12]
 8003488:	2104      	movs	r1, #4
 800348a:	6860      	ldr	r0, [r4, #4]
 800348c:	f7ff ff82 	bl	8003394 <std>
 8003490:	68a0      	ldr	r0, [r4, #8]
 8003492:	2201      	movs	r2, #1
 8003494:	2109      	movs	r1, #9
 8003496:	f7ff ff7d 	bl	8003394 <std>
 800349a:	68e0      	ldr	r0, [r4, #12]
 800349c:	2202      	movs	r2, #2
 800349e:	2112      	movs	r1, #18
 80034a0:	f7ff ff78 	bl	8003394 <std>
 80034a4:	2301      	movs	r3, #1
 80034a6:	61a3      	str	r3, [r4, #24]
 80034a8:	e7d2      	b.n	8003450 <__sinit+0xc>
 80034aa:	bf00      	nop
 80034ac:	08004390 	.word	0x08004390
 80034b0:	080033dd 	.word	0x080033dd

080034b4 <__sfp>:
 80034b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b6:	4607      	mov	r7, r0
 80034b8:	f7ff ffac 	bl	8003414 <__sfp_lock_acquire>
 80034bc:	4b1e      	ldr	r3, [pc, #120]	; (8003538 <__sfp+0x84>)
 80034be:	681e      	ldr	r6, [r3, #0]
 80034c0:	69b3      	ldr	r3, [r6, #24]
 80034c2:	b913      	cbnz	r3, 80034ca <__sfp+0x16>
 80034c4:	4630      	mov	r0, r6
 80034c6:	f7ff ffbd 	bl	8003444 <__sinit>
 80034ca:	3648      	adds	r6, #72	; 0x48
 80034cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80034d0:	3b01      	subs	r3, #1
 80034d2:	d503      	bpl.n	80034dc <__sfp+0x28>
 80034d4:	6833      	ldr	r3, [r6, #0]
 80034d6:	b30b      	cbz	r3, 800351c <__sfp+0x68>
 80034d8:	6836      	ldr	r6, [r6, #0]
 80034da:	e7f7      	b.n	80034cc <__sfp+0x18>
 80034dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80034e0:	b9d5      	cbnz	r5, 8003518 <__sfp+0x64>
 80034e2:	4b16      	ldr	r3, [pc, #88]	; (800353c <__sfp+0x88>)
 80034e4:	60e3      	str	r3, [r4, #12]
 80034e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80034ea:	6665      	str	r5, [r4, #100]	; 0x64
 80034ec:	f000 f847 	bl	800357e <__retarget_lock_init_recursive>
 80034f0:	f7ff ff96 	bl	8003420 <__sfp_lock_release>
 80034f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80034f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80034fc:	6025      	str	r5, [r4, #0]
 80034fe:	61a5      	str	r5, [r4, #24]
 8003500:	2208      	movs	r2, #8
 8003502:	4629      	mov	r1, r5
 8003504:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003508:	f7ff ff24 	bl	8003354 <memset>
 800350c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003510:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003514:	4620      	mov	r0, r4
 8003516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003518:	3468      	adds	r4, #104	; 0x68
 800351a:	e7d9      	b.n	80034d0 <__sfp+0x1c>
 800351c:	2104      	movs	r1, #4
 800351e:	4638      	mov	r0, r7
 8003520:	f7ff ff62 	bl	80033e8 <__sfmoreglue>
 8003524:	4604      	mov	r4, r0
 8003526:	6030      	str	r0, [r6, #0]
 8003528:	2800      	cmp	r0, #0
 800352a:	d1d5      	bne.n	80034d8 <__sfp+0x24>
 800352c:	f7ff ff78 	bl	8003420 <__sfp_lock_release>
 8003530:	230c      	movs	r3, #12
 8003532:	603b      	str	r3, [r7, #0]
 8003534:	e7ee      	b.n	8003514 <__sfp+0x60>
 8003536:	bf00      	nop
 8003538:	08004390 	.word	0x08004390
 800353c:	ffff0001 	.word	0xffff0001

08003540 <_fwalk_reent>:
 8003540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003544:	4606      	mov	r6, r0
 8003546:	4688      	mov	r8, r1
 8003548:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800354c:	2700      	movs	r7, #0
 800354e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003552:	f1b9 0901 	subs.w	r9, r9, #1
 8003556:	d505      	bpl.n	8003564 <_fwalk_reent+0x24>
 8003558:	6824      	ldr	r4, [r4, #0]
 800355a:	2c00      	cmp	r4, #0
 800355c:	d1f7      	bne.n	800354e <_fwalk_reent+0xe>
 800355e:	4638      	mov	r0, r7
 8003560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003564:	89ab      	ldrh	r3, [r5, #12]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d907      	bls.n	800357a <_fwalk_reent+0x3a>
 800356a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800356e:	3301      	adds	r3, #1
 8003570:	d003      	beq.n	800357a <_fwalk_reent+0x3a>
 8003572:	4629      	mov	r1, r5
 8003574:	4630      	mov	r0, r6
 8003576:	47c0      	blx	r8
 8003578:	4307      	orrs	r7, r0
 800357a:	3568      	adds	r5, #104	; 0x68
 800357c:	e7e9      	b.n	8003552 <_fwalk_reent+0x12>

0800357e <__retarget_lock_init_recursive>:
 800357e:	4770      	bx	lr

08003580 <__retarget_lock_acquire_recursive>:
 8003580:	4770      	bx	lr

08003582 <__retarget_lock_release_recursive>:
 8003582:	4770      	bx	lr

08003584 <_malloc_r>:
 8003584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003586:	1ccd      	adds	r5, r1, #3
 8003588:	f025 0503 	bic.w	r5, r5, #3
 800358c:	3508      	adds	r5, #8
 800358e:	2d0c      	cmp	r5, #12
 8003590:	bf38      	it	cc
 8003592:	250c      	movcc	r5, #12
 8003594:	2d00      	cmp	r5, #0
 8003596:	4606      	mov	r6, r0
 8003598:	db01      	blt.n	800359e <_malloc_r+0x1a>
 800359a:	42a9      	cmp	r1, r5
 800359c:	d903      	bls.n	80035a6 <_malloc_r+0x22>
 800359e:	230c      	movs	r3, #12
 80035a0:	6033      	str	r3, [r6, #0]
 80035a2:	2000      	movs	r0, #0
 80035a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035a6:	f000 fda1 	bl	80040ec <__malloc_lock>
 80035aa:	4921      	ldr	r1, [pc, #132]	; (8003630 <_malloc_r+0xac>)
 80035ac:	680a      	ldr	r2, [r1, #0]
 80035ae:	4614      	mov	r4, r2
 80035b0:	b99c      	cbnz	r4, 80035da <_malloc_r+0x56>
 80035b2:	4f20      	ldr	r7, [pc, #128]	; (8003634 <_malloc_r+0xb0>)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	b923      	cbnz	r3, 80035c2 <_malloc_r+0x3e>
 80035b8:	4621      	mov	r1, r4
 80035ba:	4630      	mov	r0, r6
 80035bc:	f000 fb28 	bl	8003c10 <_sbrk_r>
 80035c0:	6038      	str	r0, [r7, #0]
 80035c2:	4629      	mov	r1, r5
 80035c4:	4630      	mov	r0, r6
 80035c6:	f000 fb23 	bl	8003c10 <_sbrk_r>
 80035ca:	1c43      	adds	r3, r0, #1
 80035cc:	d123      	bne.n	8003616 <_malloc_r+0x92>
 80035ce:	230c      	movs	r3, #12
 80035d0:	6033      	str	r3, [r6, #0]
 80035d2:	4630      	mov	r0, r6
 80035d4:	f000 fd90 	bl	80040f8 <__malloc_unlock>
 80035d8:	e7e3      	b.n	80035a2 <_malloc_r+0x1e>
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	1b5b      	subs	r3, r3, r5
 80035de:	d417      	bmi.n	8003610 <_malloc_r+0x8c>
 80035e0:	2b0b      	cmp	r3, #11
 80035e2:	d903      	bls.n	80035ec <_malloc_r+0x68>
 80035e4:	6023      	str	r3, [r4, #0]
 80035e6:	441c      	add	r4, r3
 80035e8:	6025      	str	r5, [r4, #0]
 80035ea:	e004      	b.n	80035f6 <_malloc_r+0x72>
 80035ec:	6863      	ldr	r3, [r4, #4]
 80035ee:	42a2      	cmp	r2, r4
 80035f0:	bf0c      	ite	eq
 80035f2:	600b      	streq	r3, [r1, #0]
 80035f4:	6053      	strne	r3, [r2, #4]
 80035f6:	4630      	mov	r0, r6
 80035f8:	f000 fd7e 	bl	80040f8 <__malloc_unlock>
 80035fc:	f104 000b 	add.w	r0, r4, #11
 8003600:	1d23      	adds	r3, r4, #4
 8003602:	f020 0007 	bic.w	r0, r0, #7
 8003606:	1ac2      	subs	r2, r0, r3
 8003608:	d0cc      	beq.n	80035a4 <_malloc_r+0x20>
 800360a:	1a1b      	subs	r3, r3, r0
 800360c:	50a3      	str	r3, [r4, r2]
 800360e:	e7c9      	b.n	80035a4 <_malloc_r+0x20>
 8003610:	4622      	mov	r2, r4
 8003612:	6864      	ldr	r4, [r4, #4]
 8003614:	e7cc      	b.n	80035b0 <_malloc_r+0x2c>
 8003616:	1cc4      	adds	r4, r0, #3
 8003618:	f024 0403 	bic.w	r4, r4, #3
 800361c:	42a0      	cmp	r0, r4
 800361e:	d0e3      	beq.n	80035e8 <_malloc_r+0x64>
 8003620:	1a21      	subs	r1, r4, r0
 8003622:	4630      	mov	r0, r6
 8003624:	f000 faf4 	bl	8003c10 <_sbrk_r>
 8003628:	3001      	adds	r0, #1
 800362a:	d1dd      	bne.n	80035e8 <_malloc_r+0x64>
 800362c:	e7cf      	b.n	80035ce <_malloc_r+0x4a>
 800362e:	bf00      	nop
 8003630:	200000a0 	.word	0x200000a0
 8003634:	200000a4 	.word	0x200000a4

08003638 <__sfputc_r>:
 8003638:	6893      	ldr	r3, [r2, #8]
 800363a:	3b01      	subs	r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	b410      	push	{r4}
 8003640:	6093      	str	r3, [r2, #8]
 8003642:	da07      	bge.n	8003654 <__sfputc_r+0x1c>
 8003644:	6994      	ldr	r4, [r2, #24]
 8003646:	42a3      	cmp	r3, r4
 8003648:	db01      	blt.n	800364e <__sfputc_r+0x16>
 800364a:	290a      	cmp	r1, #10
 800364c:	d102      	bne.n	8003654 <__sfputc_r+0x1c>
 800364e:	bc10      	pop	{r4}
 8003650:	f000 bb32 	b.w	8003cb8 <__swbuf_r>
 8003654:	6813      	ldr	r3, [r2, #0]
 8003656:	1c58      	adds	r0, r3, #1
 8003658:	6010      	str	r0, [r2, #0]
 800365a:	7019      	strb	r1, [r3, #0]
 800365c:	4608      	mov	r0, r1
 800365e:	bc10      	pop	{r4}
 8003660:	4770      	bx	lr

08003662 <__sfputs_r>:
 8003662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003664:	4606      	mov	r6, r0
 8003666:	460f      	mov	r7, r1
 8003668:	4614      	mov	r4, r2
 800366a:	18d5      	adds	r5, r2, r3
 800366c:	42ac      	cmp	r4, r5
 800366e:	d101      	bne.n	8003674 <__sfputs_r+0x12>
 8003670:	2000      	movs	r0, #0
 8003672:	e007      	b.n	8003684 <__sfputs_r+0x22>
 8003674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003678:	463a      	mov	r2, r7
 800367a:	4630      	mov	r0, r6
 800367c:	f7ff ffdc 	bl	8003638 <__sfputc_r>
 8003680:	1c43      	adds	r3, r0, #1
 8003682:	d1f3      	bne.n	800366c <__sfputs_r+0xa>
 8003684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003688 <_vfiprintf_r>:
 8003688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800368c:	460d      	mov	r5, r1
 800368e:	b09d      	sub	sp, #116	; 0x74
 8003690:	4614      	mov	r4, r2
 8003692:	4698      	mov	r8, r3
 8003694:	4606      	mov	r6, r0
 8003696:	b118      	cbz	r0, 80036a0 <_vfiprintf_r+0x18>
 8003698:	6983      	ldr	r3, [r0, #24]
 800369a:	b90b      	cbnz	r3, 80036a0 <_vfiprintf_r+0x18>
 800369c:	f7ff fed2 	bl	8003444 <__sinit>
 80036a0:	4b89      	ldr	r3, [pc, #548]	; (80038c8 <_vfiprintf_r+0x240>)
 80036a2:	429d      	cmp	r5, r3
 80036a4:	d11b      	bne.n	80036de <_vfiprintf_r+0x56>
 80036a6:	6875      	ldr	r5, [r6, #4]
 80036a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036aa:	07d9      	lsls	r1, r3, #31
 80036ac:	d405      	bmi.n	80036ba <_vfiprintf_r+0x32>
 80036ae:	89ab      	ldrh	r3, [r5, #12]
 80036b0:	059a      	lsls	r2, r3, #22
 80036b2:	d402      	bmi.n	80036ba <_vfiprintf_r+0x32>
 80036b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036b6:	f7ff ff63 	bl	8003580 <__retarget_lock_acquire_recursive>
 80036ba:	89ab      	ldrh	r3, [r5, #12]
 80036bc:	071b      	lsls	r3, r3, #28
 80036be:	d501      	bpl.n	80036c4 <_vfiprintf_r+0x3c>
 80036c0:	692b      	ldr	r3, [r5, #16]
 80036c2:	b9eb      	cbnz	r3, 8003700 <_vfiprintf_r+0x78>
 80036c4:	4629      	mov	r1, r5
 80036c6:	4630      	mov	r0, r6
 80036c8:	f000 fb5a 	bl	8003d80 <__swsetup_r>
 80036cc:	b1c0      	cbz	r0, 8003700 <_vfiprintf_r+0x78>
 80036ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036d0:	07dc      	lsls	r4, r3, #31
 80036d2:	d50e      	bpl.n	80036f2 <_vfiprintf_r+0x6a>
 80036d4:	f04f 30ff 	mov.w	r0, #4294967295
 80036d8:	b01d      	add	sp, #116	; 0x74
 80036da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036de:	4b7b      	ldr	r3, [pc, #492]	; (80038cc <_vfiprintf_r+0x244>)
 80036e0:	429d      	cmp	r5, r3
 80036e2:	d101      	bne.n	80036e8 <_vfiprintf_r+0x60>
 80036e4:	68b5      	ldr	r5, [r6, #8]
 80036e6:	e7df      	b.n	80036a8 <_vfiprintf_r+0x20>
 80036e8:	4b79      	ldr	r3, [pc, #484]	; (80038d0 <_vfiprintf_r+0x248>)
 80036ea:	429d      	cmp	r5, r3
 80036ec:	bf08      	it	eq
 80036ee:	68f5      	ldreq	r5, [r6, #12]
 80036f0:	e7da      	b.n	80036a8 <_vfiprintf_r+0x20>
 80036f2:	89ab      	ldrh	r3, [r5, #12]
 80036f4:	0598      	lsls	r0, r3, #22
 80036f6:	d4ed      	bmi.n	80036d4 <_vfiprintf_r+0x4c>
 80036f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036fa:	f7ff ff42 	bl	8003582 <__retarget_lock_release_recursive>
 80036fe:	e7e9      	b.n	80036d4 <_vfiprintf_r+0x4c>
 8003700:	2300      	movs	r3, #0
 8003702:	9309      	str	r3, [sp, #36]	; 0x24
 8003704:	2320      	movs	r3, #32
 8003706:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800370a:	f8cd 800c 	str.w	r8, [sp, #12]
 800370e:	2330      	movs	r3, #48	; 0x30
 8003710:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80038d4 <_vfiprintf_r+0x24c>
 8003714:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003718:	f04f 0901 	mov.w	r9, #1
 800371c:	4623      	mov	r3, r4
 800371e:	469a      	mov	sl, r3
 8003720:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003724:	b10a      	cbz	r2, 800372a <_vfiprintf_r+0xa2>
 8003726:	2a25      	cmp	r2, #37	; 0x25
 8003728:	d1f9      	bne.n	800371e <_vfiprintf_r+0x96>
 800372a:	ebba 0b04 	subs.w	fp, sl, r4
 800372e:	d00b      	beq.n	8003748 <_vfiprintf_r+0xc0>
 8003730:	465b      	mov	r3, fp
 8003732:	4622      	mov	r2, r4
 8003734:	4629      	mov	r1, r5
 8003736:	4630      	mov	r0, r6
 8003738:	f7ff ff93 	bl	8003662 <__sfputs_r>
 800373c:	3001      	adds	r0, #1
 800373e:	f000 80aa 	beq.w	8003896 <_vfiprintf_r+0x20e>
 8003742:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003744:	445a      	add	r2, fp
 8003746:	9209      	str	r2, [sp, #36]	; 0x24
 8003748:	f89a 3000 	ldrb.w	r3, [sl]
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 80a2 	beq.w	8003896 <_vfiprintf_r+0x20e>
 8003752:	2300      	movs	r3, #0
 8003754:	f04f 32ff 	mov.w	r2, #4294967295
 8003758:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800375c:	f10a 0a01 	add.w	sl, sl, #1
 8003760:	9304      	str	r3, [sp, #16]
 8003762:	9307      	str	r3, [sp, #28]
 8003764:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003768:	931a      	str	r3, [sp, #104]	; 0x68
 800376a:	4654      	mov	r4, sl
 800376c:	2205      	movs	r2, #5
 800376e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003772:	4858      	ldr	r0, [pc, #352]	; (80038d4 <_vfiprintf_r+0x24c>)
 8003774:	f7fc fd04 	bl	8000180 <memchr>
 8003778:	9a04      	ldr	r2, [sp, #16]
 800377a:	b9d8      	cbnz	r0, 80037b4 <_vfiprintf_r+0x12c>
 800377c:	06d1      	lsls	r1, r2, #27
 800377e:	bf44      	itt	mi
 8003780:	2320      	movmi	r3, #32
 8003782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003786:	0713      	lsls	r3, r2, #28
 8003788:	bf44      	itt	mi
 800378a:	232b      	movmi	r3, #43	; 0x2b
 800378c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003790:	f89a 3000 	ldrb.w	r3, [sl]
 8003794:	2b2a      	cmp	r3, #42	; 0x2a
 8003796:	d015      	beq.n	80037c4 <_vfiprintf_r+0x13c>
 8003798:	9a07      	ldr	r2, [sp, #28]
 800379a:	4654      	mov	r4, sl
 800379c:	2000      	movs	r0, #0
 800379e:	f04f 0c0a 	mov.w	ip, #10
 80037a2:	4621      	mov	r1, r4
 80037a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037a8:	3b30      	subs	r3, #48	; 0x30
 80037aa:	2b09      	cmp	r3, #9
 80037ac:	d94e      	bls.n	800384c <_vfiprintf_r+0x1c4>
 80037ae:	b1b0      	cbz	r0, 80037de <_vfiprintf_r+0x156>
 80037b0:	9207      	str	r2, [sp, #28]
 80037b2:	e014      	b.n	80037de <_vfiprintf_r+0x156>
 80037b4:	eba0 0308 	sub.w	r3, r0, r8
 80037b8:	fa09 f303 	lsl.w	r3, r9, r3
 80037bc:	4313      	orrs	r3, r2
 80037be:	9304      	str	r3, [sp, #16]
 80037c0:	46a2      	mov	sl, r4
 80037c2:	e7d2      	b.n	800376a <_vfiprintf_r+0xe2>
 80037c4:	9b03      	ldr	r3, [sp, #12]
 80037c6:	1d19      	adds	r1, r3, #4
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	9103      	str	r1, [sp, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bfbb      	ittet	lt
 80037d0:	425b      	neglt	r3, r3
 80037d2:	f042 0202 	orrlt.w	r2, r2, #2
 80037d6:	9307      	strge	r3, [sp, #28]
 80037d8:	9307      	strlt	r3, [sp, #28]
 80037da:	bfb8      	it	lt
 80037dc:	9204      	strlt	r2, [sp, #16]
 80037de:	7823      	ldrb	r3, [r4, #0]
 80037e0:	2b2e      	cmp	r3, #46	; 0x2e
 80037e2:	d10c      	bne.n	80037fe <_vfiprintf_r+0x176>
 80037e4:	7863      	ldrb	r3, [r4, #1]
 80037e6:	2b2a      	cmp	r3, #42	; 0x2a
 80037e8:	d135      	bne.n	8003856 <_vfiprintf_r+0x1ce>
 80037ea:	9b03      	ldr	r3, [sp, #12]
 80037ec:	1d1a      	adds	r2, r3, #4
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	9203      	str	r2, [sp, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	bfb8      	it	lt
 80037f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80037fa:	3402      	adds	r4, #2
 80037fc:	9305      	str	r3, [sp, #20]
 80037fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80038e4 <_vfiprintf_r+0x25c>
 8003802:	7821      	ldrb	r1, [r4, #0]
 8003804:	2203      	movs	r2, #3
 8003806:	4650      	mov	r0, sl
 8003808:	f7fc fcba 	bl	8000180 <memchr>
 800380c:	b140      	cbz	r0, 8003820 <_vfiprintf_r+0x198>
 800380e:	2340      	movs	r3, #64	; 0x40
 8003810:	eba0 000a 	sub.w	r0, r0, sl
 8003814:	fa03 f000 	lsl.w	r0, r3, r0
 8003818:	9b04      	ldr	r3, [sp, #16]
 800381a:	4303      	orrs	r3, r0
 800381c:	3401      	adds	r4, #1
 800381e:	9304      	str	r3, [sp, #16]
 8003820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003824:	482c      	ldr	r0, [pc, #176]	; (80038d8 <_vfiprintf_r+0x250>)
 8003826:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800382a:	2206      	movs	r2, #6
 800382c:	f7fc fca8 	bl	8000180 <memchr>
 8003830:	2800      	cmp	r0, #0
 8003832:	d03f      	beq.n	80038b4 <_vfiprintf_r+0x22c>
 8003834:	4b29      	ldr	r3, [pc, #164]	; (80038dc <_vfiprintf_r+0x254>)
 8003836:	bb1b      	cbnz	r3, 8003880 <_vfiprintf_r+0x1f8>
 8003838:	9b03      	ldr	r3, [sp, #12]
 800383a:	3307      	adds	r3, #7
 800383c:	f023 0307 	bic.w	r3, r3, #7
 8003840:	3308      	adds	r3, #8
 8003842:	9303      	str	r3, [sp, #12]
 8003844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003846:	443b      	add	r3, r7
 8003848:	9309      	str	r3, [sp, #36]	; 0x24
 800384a:	e767      	b.n	800371c <_vfiprintf_r+0x94>
 800384c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003850:	460c      	mov	r4, r1
 8003852:	2001      	movs	r0, #1
 8003854:	e7a5      	b.n	80037a2 <_vfiprintf_r+0x11a>
 8003856:	2300      	movs	r3, #0
 8003858:	3401      	adds	r4, #1
 800385a:	9305      	str	r3, [sp, #20]
 800385c:	4619      	mov	r1, r3
 800385e:	f04f 0c0a 	mov.w	ip, #10
 8003862:	4620      	mov	r0, r4
 8003864:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003868:	3a30      	subs	r2, #48	; 0x30
 800386a:	2a09      	cmp	r2, #9
 800386c:	d903      	bls.n	8003876 <_vfiprintf_r+0x1ee>
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0c5      	beq.n	80037fe <_vfiprintf_r+0x176>
 8003872:	9105      	str	r1, [sp, #20]
 8003874:	e7c3      	b.n	80037fe <_vfiprintf_r+0x176>
 8003876:	fb0c 2101 	mla	r1, ip, r1, r2
 800387a:	4604      	mov	r4, r0
 800387c:	2301      	movs	r3, #1
 800387e:	e7f0      	b.n	8003862 <_vfiprintf_r+0x1da>
 8003880:	ab03      	add	r3, sp, #12
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	462a      	mov	r2, r5
 8003886:	4b16      	ldr	r3, [pc, #88]	; (80038e0 <_vfiprintf_r+0x258>)
 8003888:	a904      	add	r1, sp, #16
 800388a:	4630      	mov	r0, r6
 800388c:	f3af 8000 	nop.w
 8003890:	4607      	mov	r7, r0
 8003892:	1c78      	adds	r0, r7, #1
 8003894:	d1d6      	bne.n	8003844 <_vfiprintf_r+0x1bc>
 8003896:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003898:	07d9      	lsls	r1, r3, #31
 800389a:	d405      	bmi.n	80038a8 <_vfiprintf_r+0x220>
 800389c:	89ab      	ldrh	r3, [r5, #12]
 800389e:	059a      	lsls	r2, r3, #22
 80038a0:	d402      	bmi.n	80038a8 <_vfiprintf_r+0x220>
 80038a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038a4:	f7ff fe6d 	bl	8003582 <__retarget_lock_release_recursive>
 80038a8:	89ab      	ldrh	r3, [r5, #12]
 80038aa:	065b      	lsls	r3, r3, #25
 80038ac:	f53f af12 	bmi.w	80036d4 <_vfiprintf_r+0x4c>
 80038b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038b2:	e711      	b.n	80036d8 <_vfiprintf_r+0x50>
 80038b4:	ab03      	add	r3, sp, #12
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	462a      	mov	r2, r5
 80038ba:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <_vfiprintf_r+0x258>)
 80038bc:	a904      	add	r1, sp, #16
 80038be:	4630      	mov	r0, r6
 80038c0:	f000 f880 	bl	80039c4 <_printf_i>
 80038c4:	e7e4      	b.n	8003890 <_vfiprintf_r+0x208>
 80038c6:	bf00      	nop
 80038c8:	080043b4 	.word	0x080043b4
 80038cc:	080043d4 	.word	0x080043d4
 80038d0:	08004394 	.word	0x08004394
 80038d4:	080043f4 	.word	0x080043f4
 80038d8:	080043fe 	.word	0x080043fe
 80038dc:	00000000 	.word	0x00000000
 80038e0:	08003663 	.word	0x08003663
 80038e4:	080043fa 	.word	0x080043fa

080038e8 <_printf_common>:
 80038e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038ec:	4616      	mov	r6, r2
 80038ee:	4699      	mov	r9, r3
 80038f0:	688a      	ldr	r2, [r1, #8]
 80038f2:	690b      	ldr	r3, [r1, #16]
 80038f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038f8:	4293      	cmp	r3, r2
 80038fa:	bfb8      	it	lt
 80038fc:	4613      	movlt	r3, r2
 80038fe:	6033      	str	r3, [r6, #0]
 8003900:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003904:	4607      	mov	r7, r0
 8003906:	460c      	mov	r4, r1
 8003908:	b10a      	cbz	r2, 800390e <_printf_common+0x26>
 800390a:	3301      	adds	r3, #1
 800390c:	6033      	str	r3, [r6, #0]
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	0699      	lsls	r1, r3, #26
 8003912:	bf42      	ittt	mi
 8003914:	6833      	ldrmi	r3, [r6, #0]
 8003916:	3302      	addmi	r3, #2
 8003918:	6033      	strmi	r3, [r6, #0]
 800391a:	6825      	ldr	r5, [r4, #0]
 800391c:	f015 0506 	ands.w	r5, r5, #6
 8003920:	d106      	bne.n	8003930 <_printf_common+0x48>
 8003922:	f104 0a19 	add.w	sl, r4, #25
 8003926:	68e3      	ldr	r3, [r4, #12]
 8003928:	6832      	ldr	r2, [r6, #0]
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	42ab      	cmp	r3, r5
 800392e:	dc26      	bgt.n	800397e <_printf_common+0x96>
 8003930:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003934:	1e13      	subs	r3, r2, #0
 8003936:	6822      	ldr	r2, [r4, #0]
 8003938:	bf18      	it	ne
 800393a:	2301      	movne	r3, #1
 800393c:	0692      	lsls	r2, r2, #26
 800393e:	d42b      	bmi.n	8003998 <_printf_common+0xb0>
 8003940:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003944:	4649      	mov	r1, r9
 8003946:	4638      	mov	r0, r7
 8003948:	47c0      	blx	r8
 800394a:	3001      	adds	r0, #1
 800394c:	d01e      	beq.n	800398c <_printf_common+0xa4>
 800394e:	6823      	ldr	r3, [r4, #0]
 8003950:	68e5      	ldr	r5, [r4, #12]
 8003952:	6832      	ldr	r2, [r6, #0]
 8003954:	f003 0306 	and.w	r3, r3, #6
 8003958:	2b04      	cmp	r3, #4
 800395a:	bf08      	it	eq
 800395c:	1aad      	subeq	r5, r5, r2
 800395e:	68a3      	ldr	r3, [r4, #8]
 8003960:	6922      	ldr	r2, [r4, #16]
 8003962:	bf0c      	ite	eq
 8003964:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003968:	2500      	movne	r5, #0
 800396a:	4293      	cmp	r3, r2
 800396c:	bfc4      	itt	gt
 800396e:	1a9b      	subgt	r3, r3, r2
 8003970:	18ed      	addgt	r5, r5, r3
 8003972:	2600      	movs	r6, #0
 8003974:	341a      	adds	r4, #26
 8003976:	42b5      	cmp	r5, r6
 8003978:	d11a      	bne.n	80039b0 <_printf_common+0xc8>
 800397a:	2000      	movs	r0, #0
 800397c:	e008      	b.n	8003990 <_printf_common+0xa8>
 800397e:	2301      	movs	r3, #1
 8003980:	4652      	mov	r2, sl
 8003982:	4649      	mov	r1, r9
 8003984:	4638      	mov	r0, r7
 8003986:	47c0      	blx	r8
 8003988:	3001      	adds	r0, #1
 800398a:	d103      	bne.n	8003994 <_printf_common+0xac>
 800398c:	f04f 30ff 	mov.w	r0, #4294967295
 8003990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003994:	3501      	adds	r5, #1
 8003996:	e7c6      	b.n	8003926 <_printf_common+0x3e>
 8003998:	18e1      	adds	r1, r4, r3
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	2030      	movs	r0, #48	; 0x30
 800399e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039a2:	4422      	add	r2, r4
 80039a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039ac:	3302      	adds	r3, #2
 80039ae:	e7c7      	b.n	8003940 <_printf_common+0x58>
 80039b0:	2301      	movs	r3, #1
 80039b2:	4622      	mov	r2, r4
 80039b4:	4649      	mov	r1, r9
 80039b6:	4638      	mov	r0, r7
 80039b8:	47c0      	blx	r8
 80039ba:	3001      	adds	r0, #1
 80039bc:	d0e6      	beq.n	800398c <_printf_common+0xa4>
 80039be:	3601      	adds	r6, #1
 80039c0:	e7d9      	b.n	8003976 <_printf_common+0x8e>
	...

080039c4 <_printf_i>:
 80039c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039c8:	460c      	mov	r4, r1
 80039ca:	4691      	mov	r9, r2
 80039cc:	7e27      	ldrb	r7, [r4, #24]
 80039ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80039d0:	2f78      	cmp	r7, #120	; 0x78
 80039d2:	4680      	mov	r8, r0
 80039d4:	469a      	mov	sl, r3
 80039d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039da:	d807      	bhi.n	80039ec <_printf_i+0x28>
 80039dc:	2f62      	cmp	r7, #98	; 0x62
 80039de:	d80a      	bhi.n	80039f6 <_printf_i+0x32>
 80039e0:	2f00      	cmp	r7, #0
 80039e2:	f000 80d8 	beq.w	8003b96 <_printf_i+0x1d2>
 80039e6:	2f58      	cmp	r7, #88	; 0x58
 80039e8:	f000 80a3 	beq.w	8003b32 <_printf_i+0x16e>
 80039ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80039f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039f4:	e03a      	b.n	8003a6c <_printf_i+0xa8>
 80039f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039fa:	2b15      	cmp	r3, #21
 80039fc:	d8f6      	bhi.n	80039ec <_printf_i+0x28>
 80039fe:	a001      	add	r0, pc, #4	; (adr r0, 8003a04 <_printf_i+0x40>)
 8003a00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003a04:	08003a5d 	.word	0x08003a5d
 8003a08:	08003a71 	.word	0x08003a71
 8003a0c:	080039ed 	.word	0x080039ed
 8003a10:	080039ed 	.word	0x080039ed
 8003a14:	080039ed 	.word	0x080039ed
 8003a18:	080039ed 	.word	0x080039ed
 8003a1c:	08003a71 	.word	0x08003a71
 8003a20:	080039ed 	.word	0x080039ed
 8003a24:	080039ed 	.word	0x080039ed
 8003a28:	080039ed 	.word	0x080039ed
 8003a2c:	080039ed 	.word	0x080039ed
 8003a30:	08003b7d 	.word	0x08003b7d
 8003a34:	08003aa1 	.word	0x08003aa1
 8003a38:	08003b5f 	.word	0x08003b5f
 8003a3c:	080039ed 	.word	0x080039ed
 8003a40:	080039ed 	.word	0x080039ed
 8003a44:	08003b9f 	.word	0x08003b9f
 8003a48:	080039ed 	.word	0x080039ed
 8003a4c:	08003aa1 	.word	0x08003aa1
 8003a50:	080039ed 	.word	0x080039ed
 8003a54:	080039ed 	.word	0x080039ed
 8003a58:	08003b67 	.word	0x08003b67
 8003a5c:	680b      	ldr	r3, [r1, #0]
 8003a5e:	1d1a      	adds	r2, r3, #4
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	600a      	str	r2, [r1, #0]
 8003a64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e0a3      	b.n	8003bb8 <_printf_i+0x1f4>
 8003a70:	6825      	ldr	r5, [r4, #0]
 8003a72:	6808      	ldr	r0, [r1, #0]
 8003a74:	062e      	lsls	r6, r5, #24
 8003a76:	f100 0304 	add.w	r3, r0, #4
 8003a7a:	d50a      	bpl.n	8003a92 <_printf_i+0xce>
 8003a7c:	6805      	ldr	r5, [r0, #0]
 8003a7e:	600b      	str	r3, [r1, #0]
 8003a80:	2d00      	cmp	r5, #0
 8003a82:	da03      	bge.n	8003a8c <_printf_i+0xc8>
 8003a84:	232d      	movs	r3, #45	; 0x2d
 8003a86:	426d      	negs	r5, r5
 8003a88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a8c:	485e      	ldr	r0, [pc, #376]	; (8003c08 <_printf_i+0x244>)
 8003a8e:	230a      	movs	r3, #10
 8003a90:	e019      	b.n	8003ac6 <_printf_i+0x102>
 8003a92:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003a96:	6805      	ldr	r5, [r0, #0]
 8003a98:	600b      	str	r3, [r1, #0]
 8003a9a:	bf18      	it	ne
 8003a9c:	b22d      	sxthne	r5, r5
 8003a9e:	e7ef      	b.n	8003a80 <_printf_i+0xbc>
 8003aa0:	680b      	ldr	r3, [r1, #0]
 8003aa2:	6825      	ldr	r5, [r4, #0]
 8003aa4:	1d18      	adds	r0, r3, #4
 8003aa6:	6008      	str	r0, [r1, #0]
 8003aa8:	0628      	lsls	r0, r5, #24
 8003aaa:	d501      	bpl.n	8003ab0 <_printf_i+0xec>
 8003aac:	681d      	ldr	r5, [r3, #0]
 8003aae:	e002      	b.n	8003ab6 <_printf_i+0xf2>
 8003ab0:	0669      	lsls	r1, r5, #25
 8003ab2:	d5fb      	bpl.n	8003aac <_printf_i+0xe8>
 8003ab4:	881d      	ldrh	r5, [r3, #0]
 8003ab6:	4854      	ldr	r0, [pc, #336]	; (8003c08 <_printf_i+0x244>)
 8003ab8:	2f6f      	cmp	r7, #111	; 0x6f
 8003aba:	bf0c      	ite	eq
 8003abc:	2308      	moveq	r3, #8
 8003abe:	230a      	movne	r3, #10
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ac6:	6866      	ldr	r6, [r4, #4]
 8003ac8:	60a6      	str	r6, [r4, #8]
 8003aca:	2e00      	cmp	r6, #0
 8003acc:	bfa2      	ittt	ge
 8003ace:	6821      	ldrge	r1, [r4, #0]
 8003ad0:	f021 0104 	bicge.w	r1, r1, #4
 8003ad4:	6021      	strge	r1, [r4, #0]
 8003ad6:	b90d      	cbnz	r5, 8003adc <_printf_i+0x118>
 8003ad8:	2e00      	cmp	r6, #0
 8003ada:	d04d      	beq.n	8003b78 <_printf_i+0x1b4>
 8003adc:	4616      	mov	r6, r2
 8003ade:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ae2:	fb03 5711 	mls	r7, r3, r1, r5
 8003ae6:	5dc7      	ldrb	r7, [r0, r7]
 8003ae8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003aec:	462f      	mov	r7, r5
 8003aee:	42bb      	cmp	r3, r7
 8003af0:	460d      	mov	r5, r1
 8003af2:	d9f4      	bls.n	8003ade <_printf_i+0x11a>
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d10b      	bne.n	8003b10 <_printf_i+0x14c>
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	07df      	lsls	r7, r3, #31
 8003afc:	d508      	bpl.n	8003b10 <_printf_i+0x14c>
 8003afe:	6923      	ldr	r3, [r4, #16]
 8003b00:	6861      	ldr	r1, [r4, #4]
 8003b02:	4299      	cmp	r1, r3
 8003b04:	bfde      	ittt	le
 8003b06:	2330      	movle	r3, #48	; 0x30
 8003b08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b10:	1b92      	subs	r2, r2, r6
 8003b12:	6122      	str	r2, [r4, #16]
 8003b14:	f8cd a000 	str.w	sl, [sp]
 8003b18:	464b      	mov	r3, r9
 8003b1a:	aa03      	add	r2, sp, #12
 8003b1c:	4621      	mov	r1, r4
 8003b1e:	4640      	mov	r0, r8
 8003b20:	f7ff fee2 	bl	80038e8 <_printf_common>
 8003b24:	3001      	adds	r0, #1
 8003b26:	d14c      	bne.n	8003bc2 <_printf_i+0x1fe>
 8003b28:	f04f 30ff 	mov.w	r0, #4294967295
 8003b2c:	b004      	add	sp, #16
 8003b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b32:	4835      	ldr	r0, [pc, #212]	; (8003c08 <_printf_i+0x244>)
 8003b34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	680e      	ldr	r6, [r1, #0]
 8003b3c:	061f      	lsls	r7, r3, #24
 8003b3e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003b42:	600e      	str	r6, [r1, #0]
 8003b44:	d514      	bpl.n	8003b70 <_printf_i+0x1ac>
 8003b46:	07d9      	lsls	r1, r3, #31
 8003b48:	bf44      	itt	mi
 8003b4a:	f043 0320 	orrmi.w	r3, r3, #32
 8003b4e:	6023      	strmi	r3, [r4, #0]
 8003b50:	b91d      	cbnz	r5, 8003b5a <_printf_i+0x196>
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	f023 0320 	bic.w	r3, r3, #32
 8003b58:	6023      	str	r3, [r4, #0]
 8003b5a:	2310      	movs	r3, #16
 8003b5c:	e7b0      	b.n	8003ac0 <_printf_i+0xfc>
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	f043 0320 	orr.w	r3, r3, #32
 8003b64:	6023      	str	r3, [r4, #0]
 8003b66:	2378      	movs	r3, #120	; 0x78
 8003b68:	4828      	ldr	r0, [pc, #160]	; (8003c0c <_printf_i+0x248>)
 8003b6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b6e:	e7e3      	b.n	8003b38 <_printf_i+0x174>
 8003b70:	065e      	lsls	r6, r3, #25
 8003b72:	bf48      	it	mi
 8003b74:	b2ad      	uxthmi	r5, r5
 8003b76:	e7e6      	b.n	8003b46 <_printf_i+0x182>
 8003b78:	4616      	mov	r6, r2
 8003b7a:	e7bb      	b.n	8003af4 <_printf_i+0x130>
 8003b7c:	680b      	ldr	r3, [r1, #0]
 8003b7e:	6826      	ldr	r6, [r4, #0]
 8003b80:	6960      	ldr	r0, [r4, #20]
 8003b82:	1d1d      	adds	r5, r3, #4
 8003b84:	600d      	str	r5, [r1, #0]
 8003b86:	0635      	lsls	r5, r6, #24
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	d501      	bpl.n	8003b90 <_printf_i+0x1cc>
 8003b8c:	6018      	str	r0, [r3, #0]
 8003b8e:	e002      	b.n	8003b96 <_printf_i+0x1d2>
 8003b90:	0671      	lsls	r1, r6, #25
 8003b92:	d5fb      	bpl.n	8003b8c <_printf_i+0x1c8>
 8003b94:	8018      	strh	r0, [r3, #0]
 8003b96:	2300      	movs	r3, #0
 8003b98:	6123      	str	r3, [r4, #16]
 8003b9a:	4616      	mov	r6, r2
 8003b9c:	e7ba      	b.n	8003b14 <_printf_i+0x150>
 8003b9e:	680b      	ldr	r3, [r1, #0]
 8003ba0:	1d1a      	adds	r2, r3, #4
 8003ba2:	600a      	str	r2, [r1, #0]
 8003ba4:	681e      	ldr	r6, [r3, #0]
 8003ba6:	6862      	ldr	r2, [r4, #4]
 8003ba8:	2100      	movs	r1, #0
 8003baa:	4630      	mov	r0, r6
 8003bac:	f7fc fae8 	bl	8000180 <memchr>
 8003bb0:	b108      	cbz	r0, 8003bb6 <_printf_i+0x1f2>
 8003bb2:	1b80      	subs	r0, r0, r6
 8003bb4:	6060      	str	r0, [r4, #4]
 8003bb6:	6863      	ldr	r3, [r4, #4]
 8003bb8:	6123      	str	r3, [r4, #16]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bc0:	e7a8      	b.n	8003b14 <_printf_i+0x150>
 8003bc2:	6923      	ldr	r3, [r4, #16]
 8003bc4:	4632      	mov	r2, r6
 8003bc6:	4649      	mov	r1, r9
 8003bc8:	4640      	mov	r0, r8
 8003bca:	47d0      	blx	sl
 8003bcc:	3001      	adds	r0, #1
 8003bce:	d0ab      	beq.n	8003b28 <_printf_i+0x164>
 8003bd0:	6823      	ldr	r3, [r4, #0]
 8003bd2:	079b      	lsls	r3, r3, #30
 8003bd4:	d413      	bmi.n	8003bfe <_printf_i+0x23a>
 8003bd6:	68e0      	ldr	r0, [r4, #12]
 8003bd8:	9b03      	ldr	r3, [sp, #12]
 8003bda:	4298      	cmp	r0, r3
 8003bdc:	bfb8      	it	lt
 8003bde:	4618      	movlt	r0, r3
 8003be0:	e7a4      	b.n	8003b2c <_printf_i+0x168>
 8003be2:	2301      	movs	r3, #1
 8003be4:	4632      	mov	r2, r6
 8003be6:	4649      	mov	r1, r9
 8003be8:	4640      	mov	r0, r8
 8003bea:	47d0      	blx	sl
 8003bec:	3001      	adds	r0, #1
 8003bee:	d09b      	beq.n	8003b28 <_printf_i+0x164>
 8003bf0:	3501      	adds	r5, #1
 8003bf2:	68e3      	ldr	r3, [r4, #12]
 8003bf4:	9903      	ldr	r1, [sp, #12]
 8003bf6:	1a5b      	subs	r3, r3, r1
 8003bf8:	42ab      	cmp	r3, r5
 8003bfa:	dcf2      	bgt.n	8003be2 <_printf_i+0x21e>
 8003bfc:	e7eb      	b.n	8003bd6 <_printf_i+0x212>
 8003bfe:	2500      	movs	r5, #0
 8003c00:	f104 0619 	add.w	r6, r4, #25
 8003c04:	e7f5      	b.n	8003bf2 <_printf_i+0x22e>
 8003c06:	bf00      	nop
 8003c08:	08004405 	.word	0x08004405
 8003c0c:	08004416 	.word	0x08004416

08003c10 <_sbrk_r>:
 8003c10:	b538      	push	{r3, r4, r5, lr}
 8003c12:	4d06      	ldr	r5, [pc, #24]	; (8003c2c <_sbrk_r+0x1c>)
 8003c14:	2300      	movs	r3, #0
 8003c16:	4604      	mov	r4, r0
 8003c18:	4608      	mov	r0, r1
 8003c1a:	602b      	str	r3, [r5, #0]
 8003c1c:	f7fc feac 	bl	8000978 <_sbrk>
 8003c20:	1c43      	adds	r3, r0, #1
 8003c22:	d102      	bne.n	8003c2a <_sbrk_r+0x1a>
 8003c24:	682b      	ldr	r3, [r5, #0]
 8003c26:	b103      	cbz	r3, 8003c2a <_sbrk_r+0x1a>
 8003c28:	6023      	str	r3, [r4, #0]
 8003c2a:	bd38      	pop	{r3, r4, r5, pc}
 8003c2c:	20000148 	.word	0x20000148

08003c30 <__sread>:
 8003c30:	b510      	push	{r4, lr}
 8003c32:	460c      	mov	r4, r1
 8003c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c38:	f000 fab2 	bl	80041a0 <_read_r>
 8003c3c:	2800      	cmp	r0, #0
 8003c3e:	bfab      	itete	ge
 8003c40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c42:	89a3      	ldrhlt	r3, [r4, #12]
 8003c44:	181b      	addge	r3, r3, r0
 8003c46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c4a:	bfac      	ite	ge
 8003c4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c4e:	81a3      	strhlt	r3, [r4, #12]
 8003c50:	bd10      	pop	{r4, pc}

08003c52 <__swrite>:
 8003c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c56:	461f      	mov	r7, r3
 8003c58:	898b      	ldrh	r3, [r1, #12]
 8003c5a:	05db      	lsls	r3, r3, #23
 8003c5c:	4605      	mov	r5, r0
 8003c5e:	460c      	mov	r4, r1
 8003c60:	4616      	mov	r6, r2
 8003c62:	d505      	bpl.n	8003c70 <__swrite+0x1e>
 8003c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c68:	2302      	movs	r3, #2
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f000 f9c8 	bl	8004000 <_lseek_r>
 8003c70:	89a3      	ldrh	r3, [r4, #12]
 8003c72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c7a:	81a3      	strh	r3, [r4, #12]
 8003c7c:	4632      	mov	r2, r6
 8003c7e:	463b      	mov	r3, r7
 8003c80:	4628      	mov	r0, r5
 8003c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c86:	f000 b869 	b.w	8003d5c <_write_r>

08003c8a <__sseek>:
 8003c8a:	b510      	push	{r4, lr}
 8003c8c:	460c      	mov	r4, r1
 8003c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c92:	f000 f9b5 	bl	8004000 <_lseek_r>
 8003c96:	1c43      	adds	r3, r0, #1
 8003c98:	89a3      	ldrh	r3, [r4, #12]
 8003c9a:	bf15      	itete	ne
 8003c9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ca2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ca6:	81a3      	strheq	r3, [r4, #12]
 8003ca8:	bf18      	it	ne
 8003caa:	81a3      	strhne	r3, [r4, #12]
 8003cac:	bd10      	pop	{r4, pc}

08003cae <__sclose>:
 8003cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb2:	f000 b8d3 	b.w	8003e5c <_close_r>
	...

08003cb8 <__swbuf_r>:
 8003cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cba:	460e      	mov	r6, r1
 8003cbc:	4614      	mov	r4, r2
 8003cbe:	4605      	mov	r5, r0
 8003cc0:	b118      	cbz	r0, 8003cca <__swbuf_r+0x12>
 8003cc2:	6983      	ldr	r3, [r0, #24]
 8003cc4:	b90b      	cbnz	r3, 8003cca <__swbuf_r+0x12>
 8003cc6:	f7ff fbbd 	bl	8003444 <__sinit>
 8003cca:	4b21      	ldr	r3, [pc, #132]	; (8003d50 <__swbuf_r+0x98>)
 8003ccc:	429c      	cmp	r4, r3
 8003cce:	d12b      	bne.n	8003d28 <__swbuf_r+0x70>
 8003cd0:	686c      	ldr	r4, [r5, #4]
 8003cd2:	69a3      	ldr	r3, [r4, #24]
 8003cd4:	60a3      	str	r3, [r4, #8]
 8003cd6:	89a3      	ldrh	r3, [r4, #12]
 8003cd8:	071a      	lsls	r2, r3, #28
 8003cda:	d52f      	bpl.n	8003d3c <__swbuf_r+0x84>
 8003cdc:	6923      	ldr	r3, [r4, #16]
 8003cde:	b36b      	cbz	r3, 8003d3c <__swbuf_r+0x84>
 8003ce0:	6923      	ldr	r3, [r4, #16]
 8003ce2:	6820      	ldr	r0, [r4, #0]
 8003ce4:	1ac0      	subs	r0, r0, r3
 8003ce6:	6963      	ldr	r3, [r4, #20]
 8003ce8:	b2f6      	uxtb	r6, r6
 8003cea:	4283      	cmp	r3, r0
 8003cec:	4637      	mov	r7, r6
 8003cee:	dc04      	bgt.n	8003cfa <__swbuf_r+0x42>
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	f000 f948 	bl	8003f88 <_fflush_r>
 8003cf8:	bb30      	cbnz	r0, 8003d48 <__swbuf_r+0x90>
 8003cfa:	68a3      	ldr	r3, [r4, #8]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	60a3      	str	r3, [r4, #8]
 8003d00:	6823      	ldr	r3, [r4, #0]
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	6022      	str	r2, [r4, #0]
 8003d06:	701e      	strb	r6, [r3, #0]
 8003d08:	6963      	ldr	r3, [r4, #20]
 8003d0a:	3001      	adds	r0, #1
 8003d0c:	4283      	cmp	r3, r0
 8003d0e:	d004      	beq.n	8003d1a <__swbuf_r+0x62>
 8003d10:	89a3      	ldrh	r3, [r4, #12]
 8003d12:	07db      	lsls	r3, r3, #31
 8003d14:	d506      	bpl.n	8003d24 <__swbuf_r+0x6c>
 8003d16:	2e0a      	cmp	r6, #10
 8003d18:	d104      	bne.n	8003d24 <__swbuf_r+0x6c>
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	f000 f933 	bl	8003f88 <_fflush_r>
 8003d22:	b988      	cbnz	r0, 8003d48 <__swbuf_r+0x90>
 8003d24:	4638      	mov	r0, r7
 8003d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d28:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <__swbuf_r+0x9c>)
 8003d2a:	429c      	cmp	r4, r3
 8003d2c:	d101      	bne.n	8003d32 <__swbuf_r+0x7a>
 8003d2e:	68ac      	ldr	r4, [r5, #8]
 8003d30:	e7cf      	b.n	8003cd2 <__swbuf_r+0x1a>
 8003d32:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <__swbuf_r+0xa0>)
 8003d34:	429c      	cmp	r4, r3
 8003d36:	bf08      	it	eq
 8003d38:	68ec      	ldreq	r4, [r5, #12]
 8003d3a:	e7ca      	b.n	8003cd2 <__swbuf_r+0x1a>
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	4628      	mov	r0, r5
 8003d40:	f000 f81e 	bl	8003d80 <__swsetup_r>
 8003d44:	2800      	cmp	r0, #0
 8003d46:	d0cb      	beq.n	8003ce0 <__swbuf_r+0x28>
 8003d48:	f04f 37ff 	mov.w	r7, #4294967295
 8003d4c:	e7ea      	b.n	8003d24 <__swbuf_r+0x6c>
 8003d4e:	bf00      	nop
 8003d50:	080043b4 	.word	0x080043b4
 8003d54:	080043d4 	.word	0x080043d4
 8003d58:	08004394 	.word	0x08004394

08003d5c <_write_r>:
 8003d5c:	b538      	push	{r3, r4, r5, lr}
 8003d5e:	4d07      	ldr	r5, [pc, #28]	; (8003d7c <_write_r+0x20>)
 8003d60:	4604      	mov	r4, r0
 8003d62:	4608      	mov	r0, r1
 8003d64:	4611      	mov	r1, r2
 8003d66:	2200      	movs	r2, #0
 8003d68:	602a      	str	r2, [r5, #0]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f7fc fdb8 	bl	80008e0 <_write>
 8003d70:	1c43      	adds	r3, r0, #1
 8003d72:	d102      	bne.n	8003d7a <_write_r+0x1e>
 8003d74:	682b      	ldr	r3, [r5, #0]
 8003d76:	b103      	cbz	r3, 8003d7a <_write_r+0x1e>
 8003d78:	6023      	str	r3, [r4, #0]
 8003d7a:	bd38      	pop	{r3, r4, r5, pc}
 8003d7c:	20000148 	.word	0x20000148

08003d80 <__swsetup_r>:
 8003d80:	4b32      	ldr	r3, [pc, #200]	; (8003e4c <__swsetup_r+0xcc>)
 8003d82:	b570      	push	{r4, r5, r6, lr}
 8003d84:	681d      	ldr	r5, [r3, #0]
 8003d86:	4606      	mov	r6, r0
 8003d88:	460c      	mov	r4, r1
 8003d8a:	b125      	cbz	r5, 8003d96 <__swsetup_r+0x16>
 8003d8c:	69ab      	ldr	r3, [r5, #24]
 8003d8e:	b913      	cbnz	r3, 8003d96 <__swsetup_r+0x16>
 8003d90:	4628      	mov	r0, r5
 8003d92:	f7ff fb57 	bl	8003444 <__sinit>
 8003d96:	4b2e      	ldr	r3, [pc, #184]	; (8003e50 <__swsetup_r+0xd0>)
 8003d98:	429c      	cmp	r4, r3
 8003d9a:	d10f      	bne.n	8003dbc <__swsetup_r+0x3c>
 8003d9c:	686c      	ldr	r4, [r5, #4]
 8003d9e:	89a3      	ldrh	r3, [r4, #12]
 8003da0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003da4:	0719      	lsls	r1, r3, #28
 8003da6:	d42c      	bmi.n	8003e02 <__swsetup_r+0x82>
 8003da8:	06dd      	lsls	r5, r3, #27
 8003daa:	d411      	bmi.n	8003dd0 <__swsetup_r+0x50>
 8003dac:	2309      	movs	r3, #9
 8003dae:	6033      	str	r3, [r6, #0]
 8003db0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003db4:	81a3      	strh	r3, [r4, #12]
 8003db6:	f04f 30ff 	mov.w	r0, #4294967295
 8003dba:	e03e      	b.n	8003e3a <__swsetup_r+0xba>
 8003dbc:	4b25      	ldr	r3, [pc, #148]	; (8003e54 <__swsetup_r+0xd4>)
 8003dbe:	429c      	cmp	r4, r3
 8003dc0:	d101      	bne.n	8003dc6 <__swsetup_r+0x46>
 8003dc2:	68ac      	ldr	r4, [r5, #8]
 8003dc4:	e7eb      	b.n	8003d9e <__swsetup_r+0x1e>
 8003dc6:	4b24      	ldr	r3, [pc, #144]	; (8003e58 <__swsetup_r+0xd8>)
 8003dc8:	429c      	cmp	r4, r3
 8003dca:	bf08      	it	eq
 8003dcc:	68ec      	ldreq	r4, [r5, #12]
 8003dce:	e7e6      	b.n	8003d9e <__swsetup_r+0x1e>
 8003dd0:	0758      	lsls	r0, r3, #29
 8003dd2:	d512      	bpl.n	8003dfa <__swsetup_r+0x7a>
 8003dd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dd6:	b141      	cbz	r1, 8003dea <__swsetup_r+0x6a>
 8003dd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ddc:	4299      	cmp	r1, r3
 8003dde:	d002      	beq.n	8003de6 <__swsetup_r+0x66>
 8003de0:	4630      	mov	r0, r6
 8003de2:	f000 f98f 	bl	8004104 <_free_r>
 8003de6:	2300      	movs	r3, #0
 8003de8:	6363      	str	r3, [r4, #52]	; 0x34
 8003dea:	89a3      	ldrh	r3, [r4, #12]
 8003dec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003df0:	81a3      	strh	r3, [r4, #12]
 8003df2:	2300      	movs	r3, #0
 8003df4:	6063      	str	r3, [r4, #4]
 8003df6:	6923      	ldr	r3, [r4, #16]
 8003df8:	6023      	str	r3, [r4, #0]
 8003dfa:	89a3      	ldrh	r3, [r4, #12]
 8003dfc:	f043 0308 	orr.w	r3, r3, #8
 8003e00:	81a3      	strh	r3, [r4, #12]
 8003e02:	6923      	ldr	r3, [r4, #16]
 8003e04:	b94b      	cbnz	r3, 8003e1a <__swsetup_r+0x9a>
 8003e06:	89a3      	ldrh	r3, [r4, #12]
 8003e08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e10:	d003      	beq.n	8003e1a <__swsetup_r+0x9a>
 8003e12:	4621      	mov	r1, r4
 8003e14:	4630      	mov	r0, r6
 8003e16:	f000 f929 	bl	800406c <__smakebuf_r>
 8003e1a:	89a0      	ldrh	r0, [r4, #12]
 8003e1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e20:	f010 0301 	ands.w	r3, r0, #1
 8003e24:	d00a      	beq.n	8003e3c <__swsetup_r+0xbc>
 8003e26:	2300      	movs	r3, #0
 8003e28:	60a3      	str	r3, [r4, #8]
 8003e2a:	6963      	ldr	r3, [r4, #20]
 8003e2c:	425b      	negs	r3, r3
 8003e2e:	61a3      	str	r3, [r4, #24]
 8003e30:	6923      	ldr	r3, [r4, #16]
 8003e32:	b943      	cbnz	r3, 8003e46 <__swsetup_r+0xc6>
 8003e34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e38:	d1ba      	bne.n	8003db0 <__swsetup_r+0x30>
 8003e3a:	bd70      	pop	{r4, r5, r6, pc}
 8003e3c:	0781      	lsls	r1, r0, #30
 8003e3e:	bf58      	it	pl
 8003e40:	6963      	ldrpl	r3, [r4, #20]
 8003e42:	60a3      	str	r3, [r4, #8]
 8003e44:	e7f4      	b.n	8003e30 <__swsetup_r+0xb0>
 8003e46:	2000      	movs	r0, #0
 8003e48:	e7f7      	b.n	8003e3a <__swsetup_r+0xba>
 8003e4a:	bf00      	nop
 8003e4c:	20000018 	.word	0x20000018
 8003e50:	080043b4 	.word	0x080043b4
 8003e54:	080043d4 	.word	0x080043d4
 8003e58:	08004394 	.word	0x08004394

08003e5c <_close_r>:
 8003e5c:	b538      	push	{r3, r4, r5, lr}
 8003e5e:	4d06      	ldr	r5, [pc, #24]	; (8003e78 <_close_r+0x1c>)
 8003e60:	2300      	movs	r3, #0
 8003e62:	4604      	mov	r4, r0
 8003e64:	4608      	mov	r0, r1
 8003e66:	602b      	str	r3, [r5, #0]
 8003e68:	f7fc fd56 	bl	8000918 <_close>
 8003e6c:	1c43      	adds	r3, r0, #1
 8003e6e:	d102      	bne.n	8003e76 <_close_r+0x1a>
 8003e70:	682b      	ldr	r3, [r5, #0]
 8003e72:	b103      	cbz	r3, 8003e76 <_close_r+0x1a>
 8003e74:	6023      	str	r3, [r4, #0]
 8003e76:	bd38      	pop	{r3, r4, r5, pc}
 8003e78:	20000148 	.word	0x20000148

08003e7c <__sflush_r>:
 8003e7c:	898a      	ldrh	r2, [r1, #12]
 8003e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e82:	4605      	mov	r5, r0
 8003e84:	0710      	lsls	r0, r2, #28
 8003e86:	460c      	mov	r4, r1
 8003e88:	d458      	bmi.n	8003f3c <__sflush_r+0xc0>
 8003e8a:	684b      	ldr	r3, [r1, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	dc05      	bgt.n	8003e9c <__sflush_r+0x20>
 8003e90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	dc02      	bgt.n	8003e9c <__sflush_r+0x20>
 8003e96:	2000      	movs	r0, #0
 8003e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e9e:	2e00      	cmp	r6, #0
 8003ea0:	d0f9      	beq.n	8003e96 <__sflush_r+0x1a>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ea8:	682f      	ldr	r7, [r5, #0]
 8003eaa:	602b      	str	r3, [r5, #0]
 8003eac:	d032      	beq.n	8003f14 <__sflush_r+0x98>
 8003eae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003eb0:	89a3      	ldrh	r3, [r4, #12]
 8003eb2:	075a      	lsls	r2, r3, #29
 8003eb4:	d505      	bpl.n	8003ec2 <__sflush_r+0x46>
 8003eb6:	6863      	ldr	r3, [r4, #4]
 8003eb8:	1ac0      	subs	r0, r0, r3
 8003eba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ebc:	b10b      	cbz	r3, 8003ec2 <__sflush_r+0x46>
 8003ebe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ec0:	1ac0      	subs	r0, r0, r3
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ec8:	6a21      	ldr	r1, [r4, #32]
 8003eca:	4628      	mov	r0, r5
 8003ecc:	47b0      	blx	r6
 8003ece:	1c43      	adds	r3, r0, #1
 8003ed0:	89a3      	ldrh	r3, [r4, #12]
 8003ed2:	d106      	bne.n	8003ee2 <__sflush_r+0x66>
 8003ed4:	6829      	ldr	r1, [r5, #0]
 8003ed6:	291d      	cmp	r1, #29
 8003ed8:	d82c      	bhi.n	8003f34 <__sflush_r+0xb8>
 8003eda:	4a2a      	ldr	r2, [pc, #168]	; (8003f84 <__sflush_r+0x108>)
 8003edc:	40ca      	lsrs	r2, r1
 8003ede:	07d6      	lsls	r6, r2, #31
 8003ee0:	d528      	bpl.n	8003f34 <__sflush_r+0xb8>
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	6062      	str	r2, [r4, #4]
 8003ee6:	04d9      	lsls	r1, r3, #19
 8003ee8:	6922      	ldr	r2, [r4, #16]
 8003eea:	6022      	str	r2, [r4, #0]
 8003eec:	d504      	bpl.n	8003ef8 <__sflush_r+0x7c>
 8003eee:	1c42      	adds	r2, r0, #1
 8003ef0:	d101      	bne.n	8003ef6 <__sflush_r+0x7a>
 8003ef2:	682b      	ldr	r3, [r5, #0]
 8003ef4:	b903      	cbnz	r3, 8003ef8 <__sflush_r+0x7c>
 8003ef6:	6560      	str	r0, [r4, #84]	; 0x54
 8003ef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003efa:	602f      	str	r7, [r5, #0]
 8003efc:	2900      	cmp	r1, #0
 8003efe:	d0ca      	beq.n	8003e96 <__sflush_r+0x1a>
 8003f00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f04:	4299      	cmp	r1, r3
 8003f06:	d002      	beq.n	8003f0e <__sflush_r+0x92>
 8003f08:	4628      	mov	r0, r5
 8003f0a:	f000 f8fb 	bl	8004104 <_free_r>
 8003f0e:	2000      	movs	r0, #0
 8003f10:	6360      	str	r0, [r4, #52]	; 0x34
 8003f12:	e7c1      	b.n	8003e98 <__sflush_r+0x1c>
 8003f14:	6a21      	ldr	r1, [r4, #32]
 8003f16:	2301      	movs	r3, #1
 8003f18:	4628      	mov	r0, r5
 8003f1a:	47b0      	blx	r6
 8003f1c:	1c41      	adds	r1, r0, #1
 8003f1e:	d1c7      	bne.n	8003eb0 <__sflush_r+0x34>
 8003f20:	682b      	ldr	r3, [r5, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0c4      	beq.n	8003eb0 <__sflush_r+0x34>
 8003f26:	2b1d      	cmp	r3, #29
 8003f28:	d001      	beq.n	8003f2e <__sflush_r+0xb2>
 8003f2a:	2b16      	cmp	r3, #22
 8003f2c:	d101      	bne.n	8003f32 <__sflush_r+0xb6>
 8003f2e:	602f      	str	r7, [r5, #0]
 8003f30:	e7b1      	b.n	8003e96 <__sflush_r+0x1a>
 8003f32:	89a3      	ldrh	r3, [r4, #12]
 8003f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f38:	81a3      	strh	r3, [r4, #12]
 8003f3a:	e7ad      	b.n	8003e98 <__sflush_r+0x1c>
 8003f3c:	690f      	ldr	r7, [r1, #16]
 8003f3e:	2f00      	cmp	r7, #0
 8003f40:	d0a9      	beq.n	8003e96 <__sflush_r+0x1a>
 8003f42:	0793      	lsls	r3, r2, #30
 8003f44:	680e      	ldr	r6, [r1, #0]
 8003f46:	bf08      	it	eq
 8003f48:	694b      	ldreq	r3, [r1, #20]
 8003f4a:	600f      	str	r7, [r1, #0]
 8003f4c:	bf18      	it	ne
 8003f4e:	2300      	movne	r3, #0
 8003f50:	eba6 0807 	sub.w	r8, r6, r7
 8003f54:	608b      	str	r3, [r1, #8]
 8003f56:	f1b8 0f00 	cmp.w	r8, #0
 8003f5a:	dd9c      	ble.n	8003e96 <__sflush_r+0x1a>
 8003f5c:	6a21      	ldr	r1, [r4, #32]
 8003f5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f60:	4643      	mov	r3, r8
 8003f62:	463a      	mov	r2, r7
 8003f64:	4628      	mov	r0, r5
 8003f66:	47b0      	blx	r6
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	dc06      	bgt.n	8003f7a <__sflush_r+0xfe>
 8003f6c:	89a3      	ldrh	r3, [r4, #12]
 8003f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f72:	81a3      	strh	r3, [r4, #12]
 8003f74:	f04f 30ff 	mov.w	r0, #4294967295
 8003f78:	e78e      	b.n	8003e98 <__sflush_r+0x1c>
 8003f7a:	4407      	add	r7, r0
 8003f7c:	eba8 0800 	sub.w	r8, r8, r0
 8003f80:	e7e9      	b.n	8003f56 <__sflush_r+0xda>
 8003f82:	bf00      	nop
 8003f84:	20400001 	.word	0x20400001

08003f88 <_fflush_r>:
 8003f88:	b538      	push	{r3, r4, r5, lr}
 8003f8a:	690b      	ldr	r3, [r1, #16]
 8003f8c:	4605      	mov	r5, r0
 8003f8e:	460c      	mov	r4, r1
 8003f90:	b913      	cbnz	r3, 8003f98 <_fflush_r+0x10>
 8003f92:	2500      	movs	r5, #0
 8003f94:	4628      	mov	r0, r5
 8003f96:	bd38      	pop	{r3, r4, r5, pc}
 8003f98:	b118      	cbz	r0, 8003fa2 <_fflush_r+0x1a>
 8003f9a:	6983      	ldr	r3, [r0, #24]
 8003f9c:	b90b      	cbnz	r3, 8003fa2 <_fflush_r+0x1a>
 8003f9e:	f7ff fa51 	bl	8003444 <__sinit>
 8003fa2:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <_fflush_r+0x6c>)
 8003fa4:	429c      	cmp	r4, r3
 8003fa6:	d11b      	bne.n	8003fe0 <_fflush_r+0x58>
 8003fa8:	686c      	ldr	r4, [r5, #4]
 8003faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0ef      	beq.n	8003f92 <_fflush_r+0xa>
 8003fb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003fb4:	07d0      	lsls	r0, r2, #31
 8003fb6:	d404      	bmi.n	8003fc2 <_fflush_r+0x3a>
 8003fb8:	0599      	lsls	r1, r3, #22
 8003fba:	d402      	bmi.n	8003fc2 <_fflush_r+0x3a>
 8003fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fbe:	f7ff fadf 	bl	8003580 <__retarget_lock_acquire_recursive>
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	f7ff ff59 	bl	8003e7c <__sflush_r>
 8003fca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fcc:	07da      	lsls	r2, r3, #31
 8003fce:	4605      	mov	r5, r0
 8003fd0:	d4e0      	bmi.n	8003f94 <_fflush_r+0xc>
 8003fd2:	89a3      	ldrh	r3, [r4, #12]
 8003fd4:	059b      	lsls	r3, r3, #22
 8003fd6:	d4dd      	bmi.n	8003f94 <_fflush_r+0xc>
 8003fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fda:	f7ff fad2 	bl	8003582 <__retarget_lock_release_recursive>
 8003fde:	e7d9      	b.n	8003f94 <_fflush_r+0xc>
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <_fflush_r+0x70>)
 8003fe2:	429c      	cmp	r4, r3
 8003fe4:	d101      	bne.n	8003fea <_fflush_r+0x62>
 8003fe6:	68ac      	ldr	r4, [r5, #8]
 8003fe8:	e7df      	b.n	8003faa <_fflush_r+0x22>
 8003fea:	4b04      	ldr	r3, [pc, #16]	; (8003ffc <_fflush_r+0x74>)
 8003fec:	429c      	cmp	r4, r3
 8003fee:	bf08      	it	eq
 8003ff0:	68ec      	ldreq	r4, [r5, #12]
 8003ff2:	e7da      	b.n	8003faa <_fflush_r+0x22>
 8003ff4:	080043b4 	.word	0x080043b4
 8003ff8:	080043d4 	.word	0x080043d4
 8003ffc:	08004394 	.word	0x08004394

08004000 <_lseek_r>:
 8004000:	b538      	push	{r3, r4, r5, lr}
 8004002:	4d07      	ldr	r5, [pc, #28]	; (8004020 <_lseek_r+0x20>)
 8004004:	4604      	mov	r4, r0
 8004006:	4608      	mov	r0, r1
 8004008:	4611      	mov	r1, r2
 800400a:	2200      	movs	r2, #0
 800400c:	602a      	str	r2, [r5, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	f7fc fca6 	bl	8000960 <_lseek>
 8004014:	1c43      	adds	r3, r0, #1
 8004016:	d102      	bne.n	800401e <_lseek_r+0x1e>
 8004018:	682b      	ldr	r3, [r5, #0]
 800401a:	b103      	cbz	r3, 800401e <_lseek_r+0x1e>
 800401c:	6023      	str	r3, [r4, #0]
 800401e:	bd38      	pop	{r3, r4, r5, pc}
 8004020:	20000148 	.word	0x20000148

08004024 <__swhatbuf_r>:
 8004024:	b570      	push	{r4, r5, r6, lr}
 8004026:	460e      	mov	r6, r1
 8004028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800402c:	2900      	cmp	r1, #0
 800402e:	b096      	sub	sp, #88	; 0x58
 8004030:	4614      	mov	r4, r2
 8004032:	461d      	mov	r5, r3
 8004034:	da07      	bge.n	8004046 <__swhatbuf_r+0x22>
 8004036:	2300      	movs	r3, #0
 8004038:	602b      	str	r3, [r5, #0]
 800403a:	89b3      	ldrh	r3, [r6, #12]
 800403c:	061a      	lsls	r2, r3, #24
 800403e:	d410      	bmi.n	8004062 <__swhatbuf_r+0x3e>
 8004040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004044:	e00e      	b.n	8004064 <__swhatbuf_r+0x40>
 8004046:	466a      	mov	r2, sp
 8004048:	f000 f8bc 	bl	80041c4 <_fstat_r>
 800404c:	2800      	cmp	r0, #0
 800404e:	dbf2      	blt.n	8004036 <__swhatbuf_r+0x12>
 8004050:	9a01      	ldr	r2, [sp, #4]
 8004052:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004056:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800405a:	425a      	negs	r2, r3
 800405c:	415a      	adcs	r2, r3
 800405e:	602a      	str	r2, [r5, #0]
 8004060:	e7ee      	b.n	8004040 <__swhatbuf_r+0x1c>
 8004062:	2340      	movs	r3, #64	; 0x40
 8004064:	2000      	movs	r0, #0
 8004066:	6023      	str	r3, [r4, #0]
 8004068:	b016      	add	sp, #88	; 0x58
 800406a:	bd70      	pop	{r4, r5, r6, pc}

0800406c <__smakebuf_r>:
 800406c:	898b      	ldrh	r3, [r1, #12]
 800406e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004070:	079d      	lsls	r5, r3, #30
 8004072:	4606      	mov	r6, r0
 8004074:	460c      	mov	r4, r1
 8004076:	d507      	bpl.n	8004088 <__smakebuf_r+0x1c>
 8004078:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800407c:	6023      	str	r3, [r4, #0]
 800407e:	6123      	str	r3, [r4, #16]
 8004080:	2301      	movs	r3, #1
 8004082:	6163      	str	r3, [r4, #20]
 8004084:	b002      	add	sp, #8
 8004086:	bd70      	pop	{r4, r5, r6, pc}
 8004088:	ab01      	add	r3, sp, #4
 800408a:	466a      	mov	r2, sp
 800408c:	f7ff ffca 	bl	8004024 <__swhatbuf_r>
 8004090:	9900      	ldr	r1, [sp, #0]
 8004092:	4605      	mov	r5, r0
 8004094:	4630      	mov	r0, r6
 8004096:	f7ff fa75 	bl	8003584 <_malloc_r>
 800409a:	b948      	cbnz	r0, 80040b0 <__smakebuf_r+0x44>
 800409c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040a0:	059a      	lsls	r2, r3, #22
 80040a2:	d4ef      	bmi.n	8004084 <__smakebuf_r+0x18>
 80040a4:	f023 0303 	bic.w	r3, r3, #3
 80040a8:	f043 0302 	orr.w	r3, r3, #2
 80040ac:	81a3      	strh	r3, [r4, #12]
 80040ae:	e7e3      	b.n	8004078 <__smakebuf_r+0xc>
 80040b0:	4b0d      	ldr	r3, [pc, #52]	; (80040e8 <__smakebuf_r+0x7c>)
 80040b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80040b4:	89a3      	ldrh	r3, [r4, #12]
 80040b6:	6020      	str	r0, [r4, #0]
 80040b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040bc:	81a3      	strh	r3, [r4, #12]
 80040be:	9b00      	ldr	r3, [sp, #0]
 80040c0:	6163      	str	r3, [r4, #20]
 80040c2:	9b01      	ldr	r3, [sp, #4]
 80040c4:	6120      	str	r0, [r4, #16]
 80040c6:	b15b      	cbz	r3, 80040e0 <__smakebuf_r+0x74>
 80040c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040cc:	4630      	mov	r0, r6
 80040ce:	f000 f88b 	bl	80041e8 <_isatty_r>
 80040d2:	b128      	cbz	r0, 80040e0 <__smakebuf_r+0x74>
 80040d4:	89a3      	ldrh	r3, [r4, #12]
 80040d6:	f023 0303 	bic.w	r3, r3, #3
 80040da:	f043 0301 	orr.w	r3, r3, #1
 80040de:	81a3      	strh	r3, [r4, #12]
 80040e0:	89a0      	ldrh	r0, [r4, #12]
 80040e2:	4305      	orrs	r5, r0
 80040e4:	81a5      	strh	r5, [r4, #12]
 80040e6:	e7cd      	b.n	8004084 <__smakebuf_r+0x18>
 80040e8:	080033dd 	.word	0x080033dd

080040ec <__malloc_lock>:
 80040ec:	4801      	ldr	r0, [pc, #4]	; (80040f4 <__malloc_lock+0x8>)
 80040ee:	f7ff ba47 	b.w	8003580 <__retarget_lock_acquire_recursive>
 80040f2:	bf00      	nop
 80040f4:	20000140 	.word	0x20000140

080040f8 <__malloc_unlock>:
 80040f8:	4801      	ldr	r0, [pc, #4]	; (8004100 <__malloc_unlock+0x8>)
 80040fa:	f7ff ba42 	b.w	8003582 <__retarget_lock_release_recursive>
 80040fe:	bf00      	nop
 8004100:	20000140 	.word	0x20000140

08004104 <_free_r>:
 8004104:	b538      	push	{r3, r4, r5, lr}
 8004106:	4605      	mov	r5, r0
 8004108:	2900      	cmp	r1, #0
 800410a:	d045      	beq.n	8004198 <_free_r+0x94>
 800410c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004110:	1f0c      	subs	r4, r1, #4
 8004112:	2b00      	cmp	r3, #0
 8004114:	bfb8      	it	lt
 8004116:	18e4      	addlt	r4, r4, r3
 8004118:	f7ff ffe8 	bl	80040ec <__malloc_lock>
 800411c:	4a1f      	ldr	r2, [pc, #124]	; (800419c <_free_r+0x98>)
 800411e:	6813      	ldr	r3, [r2, #0]
 8004120:	4610      	mov	r0, r2
 8004122:	b933      	cbnz	r3, 8004132 <_free_r+0x2e>
 8004124:	6063      	str	r3, [r4, #4]
 8004126:	6014      	str	r4, [r2, #0]
 8004128:	4628      	mov	r0, r5
 800412a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800412e:	f7ff bfe3 	b.w	80040f8 <__malloc_unlock>
 8004132:	42a3      	cmp	r3, r4
 8004134:	d90b      	bls.n	800414e <_free_r+0x4a>
 8004136:	6821      	ldr	r1, [r4, #0]
 8004138:	1862      	adds	r2, r4, r1
 800413a:	4293      	cmp	r3, r2
 800413c:	bf04      	itt	eq
 800413e:	681a      	ldreq	r2, [r3, #0]
 8004140:	685b      	ldreq	r3, [r3, #4]
 8004142:	6063      	str	r3, [r4, #4]
 8004144:	bf04      	itt	eq
 8004146:	1852      	addeq	r2, r2, r1
 8004148:	6022      	streq	r2, [r4, #0]
 800414a:	6004      	str	r4, [r0, #0]
 800414c:	e7ec      	b.n	8004128 <_free_r+0x24>
 800414e:	461a      	mov	r2, r3
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	b10b      	cbz	r3, 8004158 <_free_r+0x54>
 8004154:	42a3      	cmp	r3, r4
 8004156:	d9fa      	bls.n	800414e <_free_r+0x4a>
 8004158:	6811      	ldr	r1, [r2, #0]
 800415a:	1850      	adds	r0, r2, r1
 800415c:	42a0      	cmp	r0, r4
 800415e:	d10b      	bne.n	8004178 <_free_r+0x74>
 8004160:	6820      	ldr	r0, [r4, #0]
 8004162:	4401      	add	r1, r0
 8004164:	1850      	adds	r0, r2, r1
 8004166:	4283      	cmp	r3, r0
 8004168:	6011      	str	r1, [r2, #0]
 800416a:	d1dd      	bne.n	8004128 <_free_r+0x24>
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	6053      	str	r3, [r2, #4]
 8004172:	4401      	add	r1, r0
 8004174:	6011      	str	r1, [r2, #0]
 8004176:	e7d7      	b.n	8004128 <_free_r+0x24>
 8004178:	d902      	bls.n	8004180 <_free_r+0x7c>
 800417a:	230c      	movs	r3, #12
 800417c:	602b      	str	r3, [r5, #0]
 800417e:	e7d3      	b.n	8004128 <_free_r+0x24>
 8004180:	6820      	ldr	r0, [r4, #0]
 8004182:	1821      	adds	r1, r4, r0
 8004184:	428b      	cmp	r3, r1
 8004186:	bf04      	itt	eq
 8004188:	6819      	ldreq	r1, [r3, #0]
 800418a:	685b      	ldreq	r3, [r3, #4]
 800418c:	6063      	str	r3, [r4, #4]
 800418e:	bf04      	itt	eq
 8004190:	1809      	addeq	r1, r1, r0
 8004192:	6021      	streq	r1, [r4, #0]
 8004194:	6054      	str	r4, [r2, #4]
 8004196:	e7c7      	b.n	8004128 <_free_r+0x24>
 8004198:	bd38      	pop	{r3, r4, r5, pc}
 800419a:	bf00      	nop
 800419c:	200000a0 	.word	0x200000a0

080041a0 <_read_r>:
 80041a0:	b538      	push	{r3, r4, r5, lr}
 80041a2:	4d07      	ldr	r5, [pc, #28]	; (80041c0 <_read_r+0x20>)
 80041a4:	4604      	mov	r4, r0
 80041a6:	4608      	mov	r0, r1
 80041a8:	4611      	mov	r1, r2
 80041aa:	2200      	movs	r2, #0
 80041ac:	602a      	str	r2, [r5, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	f7fc fb79 	bl	80008a6 <_read>
 80041b4:	1c43      	adds	r3, r0, #1
 80041b6:	d102      	bne.n	80041be <_read_r+0x1e>
 80041b8:	682b      	ldr	r3, [r5, #0]
 80041ba:	b103      	cbz	r3, 80041be <_read_r+0x1e>
 80041bc:	6023      	str	r3, [r4, #0]
 80041be:	bd38      	pop	{r3, r4, r5, pc}
 80041c0:	20000148 	.word	0x20000148

080041c4 <_fstat_r>:
 80041c4:	b538      	push	{r3, r4, r5, lr}
 80041c6:	4d07      	ldr	r5, [pc, #28]	; (80041e4 <_fstat_r+0x20>)
 80041c8:	2300      	movs	r3, #0
 80041ca:	4604      	mov	r4, r0
 80041cc:	4608      	mov	r0, r1
 80041ce:	4611      	mov	r1, r2
 80041d0:	602b      	str	r3, [r5, #0]
 80041d2:	f7fc fbac 	bl	800092e <_fstat>
 80041d6:	1c43      	adds	r3, r0, #1
 80041d8:	d102      	bne.n	80041e0 <_fstat_r+0x1c>
 80041da:	682b      	ldr	r3, [r5, #0]
 80041dc:	b103      	cbz	r3, 80041e0 <_fstat_r+0x1c>
 80041de:	6023      	str	r3, [r4, #0]
 80041e0:	bd38      	pop	{r3, r4, r5, pc}
 80041e2:	bf00      	nop
 80041e4:	20000148 	.word	0x20000148

080041e8 <_isatty_r>:
 80041e8:	b538      	push	{r3, r4, r5, lr}
 80041ea:	4d06      	ldr	r5, [pc, #24]	; (8004204 <_isatty_r+0x1c>)
 80041ec:	2300      	movs	r3, #0
 80041ee:	4604      	mov	r4, r0
 80041f0:	4608      	mov	r0, r1
 80041f2:	602b      	str	r3, [r5, #0]
 80041f4:	f7fc fbaa 	bl	800094c <_isatty>
 80041f8:	1c43      	adds	r3, r0, #1
 80041fa:	d102      	bne.n	8004202 <_isatty_r+0x1a>
 80041fc:	682b      	ldr	r3, [r5, #0]
 80041fe:	b103      	cbz	r3, 8004202 <_isatty_r+0x1a>
 8004200:	6023      	str	r3, [r4, #0]
 8004202:	bd38      	pop	{r3, r4, r5, pc}
 8004204:	20000148 	.word	0x20000148

08004208 <_init>:
 8004208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420a:	bf00      	nop
 800420c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800420e:	bc08      	pop	{r3}
 8004210:	469e      	mov	lr, r3
 8004212:	4770      	bx	lr

08004214 <_fini>:
 8004214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004216:	bf00      	nop
 8004218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800421a:	bc08      	pop	{r3}
 800421c:	469e      	mov	lr, r3
 800421e:	4770      	bx	lr
